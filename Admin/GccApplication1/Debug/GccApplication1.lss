
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003a84  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000003c6  00800060  00003a84  00003b18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800426  00800426  00003ede  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003ede  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003f10  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000348  00000000  00000000  00003f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000024b7  00000000  00000000  00004294  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ff4  00000000  00000000  0000674b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000029e1  00000000  00000000  0000773f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b60  00000000  00000000  0000a120  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000938  00000000  00000000  0000ac80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001747  00000000  00000000  0000b5b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a0  00000000  00000000  0000ccff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 16 14 	jmp	0x282c	; 0x282c <__vector_1>
       8:	0c 94 75 15 	jmp	0x2aea	; 0x2aea <__vector_2>
       c:	0c 94 a6 15 	jmp	0x2b4c	; 0x2b4c <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 d5 18 	jmp	0x31aa	; 0x31aa <__vector_10>
      2c:	0c 94 a4 18 	jmp	0x3148	; 0x3148 <__vector_11>
      30:	0c 94 74 17 	jmp	0x2ee8	; 0x2ee8 <__vector_12>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	14 e0       	ldi	r17, 0x04	; 4
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e8       	ldi	r30, 0x84	; 132
      68:	fa e3       	ldi	r31, 0x3A	; 58
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 32       	cpi	r26, 0x26	; 38
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	24 e0       	ldi	r18, 0x04	; 4
      78:	a6 e2       	ldi	r26, 0x26	; 38
      7a:	b4 e0       	ldi	r27, 0x04	; 4
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 33       	cpi	r26, 0x31	; 49
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 00 	call	0x92	; 0x92 <main>
      8a:	0c 94 40 1d 	jmp	0x3a80	; 0x3a80 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "EXT_INT.h"
#include "GI_INT.h"
#include "LCD_INT.h"

int main(void)
{
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
      9a:	c6 54       	subi	r28, 0x46	; 70
      9c:	d1 09       	sbc	r29, r1
      9e:	0f b6       	in	r0, 0x3f	; 63
      a0:	f8 94       	cli
      a2:	de bf       	out	0x3e, r29	; 62
      a4:	0f be       	out	0x3f, r0	; 63
      a6:	cd bf       	out	0x3d, r28	; 61
	//setting the 5 leds and the buzzer 
	DIO_setPinDir(DIO_PINB0,DIO_OUTPUT);
      a8:	61 e0       	ldi	r22, 0x01	; 1
      aa:	88 e0       	ldi	r24, 0x08	; 8
      ac:	0e 94 b6 12 	call	0x256c	; 0x256c <DIO_setPinDir>
	DIO_setPinDir(DIO_PINA0,DIO_OUTPUT);
      b0:	61 e0       	ldi	r22, 0x01	; 1
      b2:	80 e0       	ldi	r24, 0x00	; 0
      b4:	0e 94 b6 12 	call	0x256c	; 0x256c <DIO_setPinDir>
	DIO_setPinDir(DIO_PINA1,DIO_OUTPUT);
      b8:	61 e0       	ldi	r22, 0x01	; 1
      ba:	81 e0       	ldi	r24, 0x01	; 1
      bc:	0e 94 b6 12 	call	0x256c	; 0x256c <DIO_setPinDir>
	DIO_setPinDir(DIO_PINA2,DIO_OUTPUT);
      c0:	61 e0       	ldi	r22, 0x01	; 1
      c2:	82 e0       	ldi	r24, 0x02	; 2
      c4:	0e 94 b6 12 	call	0x256c	; 0x256c <DIO_setPinDir>
	DIO_setPinDir(DIO_PINA3,DIO_OUTPUT);
      c8:	61 e0       	ldi	r22, 0x01	; 1
      ca:	83 e0       	ldi	r24, 0x03	; 3
      cc:	0e 94 b6 12 	call	0x256c	; 0x256c <DIO_setPinDir>
	DIO_setPinDir(DIO_PINA4,DIO_OUTPUT);
      d0:	61 e0       	ldi	r22, 0x01	; 1
      d2:	84 e0       	ldi	r24, 0x04	; 4
      d4:	0e 94 b6 12 	call	0x256c	; 0x256c <DIO_setPinDir>
	SPI_Init();
      d8:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <SPI_Init>
	UART_init();
      dc:	0e 94 2d 1a 	call	0x345a	; 0x345a <UART_init>
	I2C_init(MASTER);
      e0:	81 e0       	ldi	r24, 0x01	; 1
      e2:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <I2C_init>
	GI_enable();
      e6:	0e 94 d7 15 	call	0x2bae	; 0x2bae <GI_enable>
	EXT0_init(EXT_RISING);
      ea:	83 e0       	ldi	r24, 0x03	; 3
      ec:	0e 94 ab 13 	call	0x2756	; 0x2756 <EXT0_init>
	LCD_init();
      f0:	0e 94 75 0d 	call	0x1aea	; 0x1aea <LCD_init>
	
	u8 adminuser[5]="admin";
      f4:	85 e0       	ldi	r24, 0x05	; 5
      f6:	e4 e1       	ldi	r30, 0x14	; 20
      f8:	f3 e0       	ldi	r31, 0x03	; 3
      fa:	de 01       	movw	r26, r28
      fc:	d4 96       	adiw	r26, 0x34	; 52
      fe:	01 90       	ld	r0, Z+
     100:	0d 92       	st	X+, r0
     102:	8a 95       	dec	r24
     104:	e1 f7       	brne	.-8      	; 0xfe <main+0x6c>
	u8 adminpassword[4]="1234";
     106:	81 e3       	ldi	r24, 0x31	; 49
     108:	92 e3       	ldi	r25, 0x32	; 50
     10a:	9a af       	std	Y+58, r25	; 0x3a
     10c:	89 af       	std	Y+57, r24	; 0x39
     10e:	83 e3       	ldi	r24, 0x33	; 51
     110:	94 e3       	ldi	r25, 0x34	; 52
     112:	9c af       	std	Y+60, r25	; 0x3c
     114:	8b af       	std	Y+59, r24	; 0x3b
	//saving admin username
	for(int b=0; b<5; b++)
     116:	1a 82       	std	Y+2, r1	; 0x02
     118:	19 82       	std	Y+1, r1	; 0x01
     11a:	85 c0       	rjmp	.+266    	; 0x226 <main+0x194>
	{
		EEPROM_writeData(adminuser[b],b);
     11c:	49 81       	ldd	r20, Y+1	; 0x01
     11e:	5a 81       	ldd	r21, Y+2	; 0x02
     120:	9e 01       	movw	r18, r28
     122:	2c 5c       	subi	r18, 0xCC	; 204
     124:	3f 4f       	sbci	r19, 0xFF	; 255
     126:	89 81       	ldd	r24, Y+1	; 0x01
     128:	9a 81       	ldd	r25, Y+2	; 0x02
     12a:	82 0f       	add	r24, r18
     12c:	93 1f       	adc	r25, r19
     12e:	fc 01       	movw	r30, r24
     130:	80 81       	ld	r24, Z
     132:	ba 01       	movw	r22, r20
     134:	0e 94 2a 0c 	call	0x1854	; 0x1854 <EEPROM_writeData>
     138:	80 e0       	ldi	r24, 0x00	; 0
     13a:	90 e0       	ldi	r25, 0x00	; 0
     13c:	a0 ea       	ldi	r26, 0xA0	; 160
     13e:	b1 e4       	ldi	r27, 0x41	; 65
     140:	8a 8b       	std	Y+18, r24	; 0x12
     142:	9b 8b       	std	Y+19, r25	; 0x13
     144:	ac 8b       	std	Y+20, r26	; 0x14
     146:	bd 8b       	std	Y+21, r27	; 0x15

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     148:	20 e0       	ldi	r18, 0x00	; 0
     14a:	30 e0       	ldi	r19, 0x00	; 0
     14c:	4a e7       	ldi	r20, 0x7A	; 122
     14e:	55 e4       	ldi	r21, 0x45	; 69
     150:	6a 89       	ldd	r22, Y+18	; 0x12
     152:	7b 89       	ldd	r23, Y+19	; 0x13
     154:	8c 89       	ldd	r24, Y+20	; 0x14
     156:	9d 89       	ldd	r25, Y+21	; 0x15
     158:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__mulsf3>
     15c:	dc 01       	movw	r26, r24
     15e:	cb 01       	movw	r24, r22
     160:	8e 8b       	std	Y+22, r24	; 0x16
     162:	9f 8b       	std	Y+23, r25	; 0x17
     164:	a8 8f       	std	Y+24, r26	; 0x18
     166:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
     168:	20 e0       	ldi	r18, 0x00	; 0
     16a:	30 e0       	ldi	r19, 0x00	; 0
     16c:	40 e8       	ldi	r20, 0x80	; 128
     16e:	5f e3       	ldi	r21, 0x3F	; 63
     170:	6e 89       	ldd	r22, Y+22	; 0x16
     172:	7f 89       	ldd	r23, Y+23	; 0x17
     174:	88 8d       	ldd	r24, Y+24	; 0x18
     176:	99 8d       	ldd	r25, Y+25	; 0x19
     178:	0e 94 45 1b 	call	0x368a	; 0x368a <__cmpsf2>
     17c:	88 23       	and	r24, r24
     17e:	2c f4       	brge	.+10     	; 0x18a <main+0xf8>
		__ticks = 1;
     180:	81 e0       	ldi	r24, 0x01	; 1
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	9b 8f       	std	Y+27, r25	; 0x1b
     186:	8a 8f       	std	Y+26, r24	; 0x1a
     188:	3f c0       	rjmp	.+126    	; 0x208 <main+0x176>
	else if (__tmp > 65535)
     18a:	20 e0       	ldi	r18, 0x00	; 0
     18c:	3f ef       	ldi	r19, 0xFF	; 255
     18e:	4f e7       	ldi	r20, 0x7F	; 127
     190:	57 e4       	ldi	r21, 0x47	; 71
     192:	6e 89       	ldd	r22, Y+22	; 0x16
     194:	7f 89       	ldd	r23, Y+23	; 0x17
     196:	88 8d       	ldd	r24, Y+24	; 0x18
     198:	99 8d       	ldd	r25, Y+25	; 0x19
     19a:	0e 94 9d 1c 	call	0x393a	; 0x393a <__gesf2>
     19e:	18 16       	cp	r1, r24
     1a0:	4c f5       	brge	.+82     	; 0x1f4 <main+0x162>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     1a2:	20 e0       	ldi	r18, 0x00	; 0
     1a4:	30 e0       	ldi	r19, 0x00	; 0
     1a6:	40 e2       	ldi	r20, 0x20	; 32
     1a8:	51 e4       	ldi	r21, 0x41	; 65
     1aa:	6a 89       	ldd	r22, Y+18	; 0x12
     1ac:	7b 89       	ldd	r23, Y+19	; 0x13
     1ae:	8c 89       	ldd	r24, Y+20	; 0x14
     1b0:	9d 89       	ldd	r25, Y+21	; 0x15
     1b2:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__mulsf3>
     1b6:	dc 01       	movw	r26, r24
     1b8:	cb 01       	movw	r24, r22
     1ba:	bc 01       	movw	r22, r24
     1bc:	cd 01       	movw	r24, r26
     1be:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__fixunssfsi>
     1c2:	dc 01       	movw	r26, r24
     1c4:	cb 01       	movw	r24, r22
     1c6:	9b 8f       	std	Y+27, r25	; 0x1b
     1c8:	8a 8f       	std	Y+26, r24	; 0x1a
     1ca:	0f c0       	rjmp	.+30     	; 0x1ea <main+0x158>
     1cc:	80 e9       	ldi	r24, 0x90	; 144
     1ce:	91 e0       	ldi	r25, 0x01	; 1
     1d0:	9d 8f       	std	Y+29, r25	; 0x1d
     1d2:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1d4:	8c 8d       	ldd	r24, Y+28	; 0x1c
     1d6:	9d 8d       	ldd	r25, Y+29	; 0x1d
     1d8:	01 97       	sbiw	r24, 0x01	; 1
     1da:	f1 f7       	brne	.-4      	; 0x1d8 <main+0x146>
     1dc:	9d 8f       	std	Y+29, r25	; 0x1d
     1de:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1e0:	8a 8d       	ldd	r24, Y+26	; 0x1a
     1e2:	9b 8d       	ldd	r25, Y+27	; 0x1b
     1e4:	01 97       	sbiw	r24, 0x01	; 1
     1e6:	9b 8f       	std	Y+27, r25	; 0x1b
     1e8:	8a 8f       	std	Y+26, r24	; 0x1a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1ea:	8a 8d       	ldd	r24, Y+26	; 0x1a
     1ec:	9b 8d       	ldd	r25, Y+27	; 0x1b
     1ee:	89 2b       	or	r24, r25
     1f0:	69 f7       	brne	.-38     	; 0x1cc <main+0x13a>
     1f2:	14 c0       	rjmp	.+40     	; 0x21c <main+0x18a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1f4:	6e 89       	ldd	r22, Y+22	; 0x16
     1f6:	7f 89       	ldd	r23, Y+23	; 0x17
     1f8:	88 8d       	ldd	r24, Y+24	; 0x18
     1fa:	99 8d       	ldd	r25, Y+25	; 0x19
     1fc:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__fixunssfsi>
     200:	dc 01       	movw	r26, r24
     202:	cb 01       	movw	r24, r22
     204:	9b 8f       	std	Y+27, r25	; 0x1b
     206:	8a 8f       	std	Y+26, r24	; 0x1a
     208:	8a 8d       	ldd	r24, Y+26	; 0x1a
     20a:	9b 8d       	ldd	r25, Y+27	; 0x1b
     20c:	9f 8f       	std	Y+31, r25	; 0x1f
     20e:	8e 8f       	std	Y+30, r24	; 0x1e
     210:	8e 8d       	ldd	r24, Y+30	; 0x1e
     212:	9f 8d       	ldd	r25, Y+31	; 0x1f
     214:	01 97       	sbiw	r24, 0x01	; 1
     216:	f1 f7       	brne	.-4      	; 0x214 <main+0x182>
     218:	9f 8f       	std	Y+31, r25	; 0x1f
     21a:	8e 8f       	std	Y+30, r24	; 0x1e
	LCD_init();
	
	u8 adminuser[5]="admin";
	u8 adminpassword[4]="1234";
	//saving admin username
	for(int b=0; b<5; b++)
     21c:	89 81       	ldd	r24, Y+1	; 0x01
     21e:	9a 81       	ldd	r25, Y+2	; 0x02
     220:	01 96       	adiw	r24, 0x01	; 1
     222:	9a 83       	std	Y+2, r25	; 0x02
     224:	89 83       	std	Y+1, r24	; 0x01
     226:	89 81       	ldd	r24, Y+1	; 0x01
     228:	9a 81       	ldd	r25, Y+2	; 0x02
     22a:	05 97       	sbiw	r24, 0x05	; 5
     22c:	0c f4       	brge	.+2      	; 0x230 <main+0x19e>
     22e:	76 cf       	rjmp	.-276    	; 0x11c <main+0x8a>
	{
		EEPROM_writeData(adminuser[b],b);
		_delay_ms(20);

	}
	for(int b=0,j=5; b<4; b++,j++)
     230:	1c 82       	std	Y+4, r1	; 0x04
     232:	1b 82       	std	Y+3, r1	; 0x03
     234:	85 e0       	ldi	r24, 0x05	; 5
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	9e 83       	std	Y+6, r25	; 0x06
     23a:	8d 83       	std	Y+5, r24	; 0x05
     23c:	8a c0       	rjmp	.+276    	; 0x352 <main+0x2c0>
	{
		EEPROM_writeData(adminpassword[b],j);
     23e:	4d 81       	ldd	r20, Y+5	; 0x05
     240:	5e 81       	ldd	r21, Y+6	; 0x06
     242:	9e 01       	movw	r18, r28
     244:	27 5c       	subi	r18, 0xC7	; 199
     246:	3f 4f       	sbci	r19, 0xFF	; 255
     248:	8b 81       	ldd	r24, Y+3	; 0x03
     24a:	9c 81       	ldd	r25, Y+4	; 0x04
     24c:	82 0f       	add	r24, r18
     24e:	93 1f       	adc	r25, r19
     250:	fc 01       	movw	r30, r24
     252:	80 81       	ld	r24, Z
     254:	ba 01       	movw	r22, r20
     256:	0e 94 2a 0c 	call	0x1854	; 0x1854 <EEPROM_writeData>
     25a:	80 e0       	ldi	r24, 0x00	; 0
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	a0 ea       	ldi	r26, 0xA0	; 160
     260:	b1 e4       	ldi	r27, 0x41	; 65
     262:	8a 87       	std	Y+10, r24	; 0x0a
     264:	9b 87       	std	Y+11, r25	; 0x0b
     266:	ac 87       	std	Y+12, r26	; 0x0c
     268:	bd 87       	std	Y+13, r27	; 0x0d

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     26a:	20 e0       	ldi	r18, 0x00	; 0
     26c:	30 e0       	ldi	r19, 0x00	; 0
     26e:	4a e7       	ldi	r20, 0x7A	; 122
     270:	55 e4       	ldi	r21, 0x45	; 69
     272:	6a 85       	ldd	r22, Y+10	; 0x0a
     274:	7b 85       	ldd	r23, Y+11	; 0x0b
     276:	8c 85       	ldd	r24, Y+12	; 0x0c
     278:	9d 85       	ldd	r25, Y+13	; 0x0d
     27a:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__mulsf3>
     27e:	dc 01       	movw	r26, r24
     280:	cb 01       	movw	r24, r22
     282:	88 a3       	std	Y+32, r24	; 0x20
     284:	99 a3       	std	Y+33, r25	; 0x21
     286:	aa a3       	std	Y+34, r26	; 0x22
     288:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
     28a:	20 e0       	ldi	r18, 0x00	; 0
     28c:	30 e0       	ldi	r19, 0x00	; 0
     28e:	40 e8       	ldi	r20, 0x80	; 128
     290:	5f e3       	ldi	r21, 0x3F	; 63
     292:	68 a1       	ldd	r22, Y+32	; 0x20
     294:	79 a1       	ldd	r23, Y+33	; 0x21
     296:	8a a1       	ldd	r24, Y+34	; 0x22
     298:	9b a1       	ldd	r25, Y+35	; 0x23
     29a:	0e 94 45 1b 	call	0x368a	; 0x368a <__cmpsf2>
     29e:	88 23       	and	r24, r24
     2a0:	2c f4       	brge	.+10     	; 0x2ac <main+0x21a>
		__ticks = 1;
     2a2:	81 e0       	ldi	r24, 0x01	; 1
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	9d a3       	std	Y+37, r25	; 0x25
     2a8:	8c a3       	std	Y+36, r24	; 0x24
     2aa:	3f c0       	rjmp	.+126    	; 0x32a <main+0x298>
	else if (__tmp > 65535)
     2ac:	20 e0       	ldi	r18, 0x00	; 0
     2ae:	3f ef       	ldi	r19, 0xFF	; 255
     2b0:	4f e7       	ldi	r20, 0x7F	; 127
     2b2:	57 e4       	ldi	r21, 0x47	; 71
     2b4:	68 a1       	ldd	r22, Y+32	; 0x20
     2b6:	79 a1       	ldd	r23, Y+33	; 0x21
     2b8:	8a a1       	ldd	r24, Y+34	; 0x22
     2ba:	9b a1       	ldd	r25, Y+35	; 0x23
     2bc:	0e 94 9d 1c 	call	0x393a	; 0x393a <__gesf2>
     2c0:	18 16       	cp	r1, r24
     2c2:	4c f5       	brge	.+82     	; 0x316 <main+0x284>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     2c4:	20 e0       	ldi	r18, 0x00	; 0
     2c6:	30 e0       	ldi	r19, 0x00	; 0
     2c8:	40 e2       	ldi	r20, 0x20	; 32
     2ca:	51 e4       	ldi	r21, 0x41	; 65
     2cc:	6a 85       	ldd	r22, Y+10	; 0x0a
     2ce:	7b 85       	ldd	r23, Y+11	; 0x0b
     2d0:	8c 85       	ldd	r24, Y+12	; 0x0c
     2d2:	9d 85       	ldd	r25, Y+13	; 0x0d
     2d4:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__mulsf3>
     2d8:	dc 01       	movw	r26, r24
     2da:	cb 01       	movw	r24, r22
     2dc:	bc 01       	movw	r22, r24
     2de:	cd 01       	movw	r24, r26
     2e0:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__fixunssfsi>
     2e4:	dc 01       	movw	r26, r24
     2e6:	cb 01       	movw	r24, r22
     2e8:	9d a3       	std	Y+37, r25	; 0x25
     2ea:	8c a3       	std	Y+36, r24	; 0x24
     2ec:	0f c0       	rjmp	.+30     	; 0x30c <main+0x27a>
     2ee:	80 e9       	ldi	r24, 0x90	; 144
     2f0:	91 e0       	ldi	r25, 0x01	; 1
     2f2:	9f a3       	std	Y+39, r25	; 0x27
     2f4:	8e a3       	std	Y+38, r24	; 0x26
     2f6:	8e a1       	ldd	r24, Y+38	; 0x26
     2f8:	9f a1       	ldd	r25, Y+39	; 0x27
     2fa:	01 97       	sbiw	r24, 0x01	; 1
     2fc:	f1 f7       	brne	.-4      	; 0x2fa <main+0x268>
     2fe:	9f a3       	std	Y+39, r25	; 0x27
     300:	8e a3       	std	Y+38, r24	; 0x26
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     302:	8c a1       	ldd	r24, Y+36	; 0x24
     304:	9d a1       	ldd	r25, Y+37	; 0x25
     306:	01 97       	sbiw	r24, 0x01	; 1
     308:	9d a3       	std	Y+37, r25	; 0x25
     30a:	8c a3       	std	Y+36, r24	; 0x24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     30c:	8c a1       	ldd	r24, Y+36	; 0x24
     30e:	9d a1       	ldd	r25, Y+37	; 0x25
     310:	89 2b       	or	r24, r25
     312:	69 f7       	brne	.-38     	; 0x2ee <main+0x25c>
     314:	14 c0       	rjmp	.+40     	; 0x33e <main+0x2ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     316:	68 a1       	ldd	r22, Y+32	; 0x20
     318:	79 a1       	ldd	r23, Y+33	; 0x21
     31a:	8a a1       	ldd	r24, Y+34	; 0x22
     31c:	9b a1       	ldd	r25, Y+35	; 0x23
     31e:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__fixunssfsi>
     322:	dc 01       	movw	r26, r24
     324:	cb 01       	movw	r24, r22
     326:	9d a3       	std	Y+37, r25	; 0x25
     328:	8c a3       	std	Y+36, r24	; 0x24
     32a:	8c a1       	ldd	r24, Y+36	; 0x24
     32c:	9d a1       	ldd	r25, Y+37	; 0x25
     32e:	99 a7       	std	Y+41, r25	; 0x29
     330:	88 a7       	std	Y+40, r24	; 0x28
     332:	88 a5       	ldd	r24, Y+40	; 0x28
     334:	99 a5       	ldd	r25, Y+41	; 0x29
     336:	01 97       	sbiw	r24, 0x01	; 1
     338:	f1 f7       	brne	.-4      	; 0x336 <main+0x2a4>
     33a:	99 a7       	std	Y+41, r25	; 0x29
     33c:	88 a7       	std	Y+40, r24	; 0x28
	{
		EEPROM_writeData(adminuser[b],b);
		_delay_ms(20);

	}
	for(int b=0,j=5; b<4; b++,j++)
     33e:	8b 81       	ldd	r24, Y+3	; 0x03
     340:	9c 81       	ldd	r25, Y+4	; 0x04
     342:	01 96       	adiw	r24, 0x01	; 1
     344:	9c 83       	std	Y+4, r25	; 0x04
     346:	8b 83       	std	Y+3, r24	; 0x03
     348:	8d 81       	ldd	r24, Y+5	; 0x05
     34a:	9e 81       	ldd	r25, Y+6	; 0x06
     34c:	01 96       	adiw	r24, 0x01	; 1
     34e:	9e 83       	std	Y+6, r25	; 0x06
     350:	8d 83       	std	Y+5, r24	; 0x05
     352:	8b 81       	ldd	r24, Y+3	; 0x03
     354:	9c 81       	ldd	r25, Y+4	; 0x04
     356:	04 97       	sbiw	r24, 0x04	; 4
     358:	0c f4       	brge	.+2      	; 0x35c <main+0x2ca>
     35a:	71 cf       	rjmp	.-286    	; 0x23e <main+0x1ac>
	{
		EEPROM_writeData(adminpassword[b],j);
		_delay_ms(20);

	}
u8 wrongPass=0;
     35c:	1f 82       	std	Y+7, r1	; 0x07
u8 userchoice[10];
u8 flag1;
u8 back=0;
     35e:	19 86       	std	Y+9, r1	; 0x09
while (1)
{
	//checking if a wrong pass was entered 3 consecutive times
	if (wrongPass!=3)
     360:	8f 81       	ldd	r24, Y+7	; 0x07
     362:	83 30       	cpi	r24, 0x03	; 3
     364:	09 f4       	brne	.+2      	; 0x368 <main+0x2d6>
     366:	0c c2       	rjmp	.+1048   	; 0x780 <__EEPROM_REGION_LENGTH__+0x380>
	{	
		//checks if the login was correct
		if(adminLogin())
     368:	0e 94 3c 04 	call	0x878	; 0x878 <adminLogin>
     36c:	88 23       	and	r24, r24
     36e:	09 f4       	brne	.+2      	; 0x372 <main+0x2e0>
     370:	ff c1       	rjmp	.+1022   	; 0x770 <__EEPROM_REGION_LENGTH__+0x370>
		{
			wrongPass=0;
     372:	1f 82       	std	Y+7, r1	; 0x07
			UART_sendString("Welcome Home.\r ");
     374:	80 e6       	ldi	r24, 0x60	; 96
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	0e 94 8b 1a 	call	0x3516	; 0x3516 <UART_sendString>
			flag1=1;
     37c:	81 e0       	ldi	r24, 0x01	; 1
     37e:	88 87       	std	Y+8, r24	; 0x08
			//enters a loop where the admin menu to add, delete users or control devices
		while (flag1)
     380:	f2 c1       	rjmp	.+996    	; 0x766 <__EEPROM_REGION_LENGTH__+0x366>
		{
				UART_sendString(" Press a to add an online user\r press b to add an offline user\r press c to delete online user\r Press d to delete offline user\r Press e to Control devices\r Press s to sign out\r");
     382:	80 e7       	ldi	r24, 0x70	; 112
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	0e 94 8b 1a 	call	0x3516	; 0x3516 <UART_sendString>
				adminInput(userchoice);
     38a:	ce 01       	movw	r24, r28
     38c:	cd 96       	adiw	r24, 0x3d	; 61
     38e:	0e 94 af 04 	call	0x95e	; 0x95e <adminInput>
				if ((!(strcmp(userchoice,"a"))))
     392:	ce 01       	movw	r24, r28
     394:	cd 96       	adiw	r24, 0x3d	; 61
     396:	60 e2       	ldi	r22, 0x20	; 32
     398:	71 e0       	ldi	r23, 0x01	; 1
     39a:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <strcmp>
     39e:	89 2b       	or	r24, r25
     3a0:	71 f4       	brne	.+28     	; 0x3be <main+0x32c>
					{
						if (addOnlineUser())
     3a2:	0e 94 ef 04 	call	0x9de	; 0x9de <addOnlineUser>
     3a6:	88 23       	and	r24, r24
     3a8:	29 f0       	breq	.+10     	; 0x3b4 <main+0x322>
						{
							UART_sendString("User added successfully \r");
     3aa:	82 e2       	ldi	r24, 0x22	; 34
     3ac:	91 e0       	ldi	r25, 0x01	; 1
     3ae:	0e 94 8b 1a 	call	0x3516	; 0x3516 <UART_sendString>
     3b2:	d9 c1       	rjmp	.+946    	; 0x766 <__EEPROM_REGION_LENGTH__+0x366>
						}
						else
						{
							UART_sendString("Error\r ");
     3b4:	8c e3       	ldi	r24, 0x3C	; 60
     3b6:	91 e0       	ldi	r25, 0x01	; 1
     3b8:	0e 94 8b 1a 	call	0x3516	; 0x3516 <UART_sendString>
     3bc:	d4 c1       	rjmp	.+936    	; 0x766 <__EEPROM_REGION_LENGTH__+0x366>
						}	
					}
				else if ((!(strcmp(userchoice,"b"))))
     3be:	ce 01       	movw	r24, r28
     3c0:	cd 96       	adiw	r24, 0x3d	; 61
     3c2:	64 e4       	ldi	r22, 0x44	; 68
     3c4:	71 e0       	ldi	r23, 0x01	; 1
     3c6:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <strcmp>
     3ca:	89 2b       	or	r24, r25
     3cc:	71 f4       	brne	.+28     	; 0x3ea <main+0x358>
					{	
						if (addOfflineUser())
     3ce:	0e 94 6d 06 	call	0xcda	; 0xcda <addOfflineUser>
     3d2:	88 23       	and	r24, r24
     3d4:	29 f0       	breq	.+10     	; 0x3e0 <main+0x34e>
						{
							UART_sendString("User added successfully\r ");
     3d6:	86 e4       	ldi	r24, 0x46	; 70
     3d8:	91 e0       	ldi	r25, 0x01	; 1
     3da:	0e 94 8b 1a 	call	0x3516	; 0x3516 <UART_sendString>
     3de:	c3 c1       	rjmp	.+902    	; 0x766 <__EEPROM_REGION_LENGTH__+0x366>
						}
						else
						{
							UART_sendString("Error\r ");
     3e0:	8c e3       	ldi	r24, 0x3C	; 60
     3e2:	91 e0       	ldi	r25, 0x01	; 1
     3e4:	0e 94 8b 1a 	call	0x3516	; 0x3516 <UART_sendString>
     3e8:	be c1       	rjmp	.+892    	; 0x766 <__EEPROM_REGION_LENGTH__+0x366>
						}
					}
				else if ((!(strcmp(userchoice,"c"))))
     3ea:	ce 01       	movw	r24, r28
     3ec:	cd 96       	adiw	r24, 0x3d	; 61
     3ee:	60 e6       	ldi	r22, 0x60	; 96
     3f0:	71 e0       	ldi	r23, 0x01	; 1
     3f2:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <strcmp>
     3f6:	89 2b       	or	r24, r25
     3f8:	71 f4       	brne	.+28     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
					{
						if (deleteOnlineUser())
     3fa:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <deleteOnlineUser>
     3fe:	88 23       	and	r24, r24
     400:	29 f0       	breq	.+10     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
						{
							UART_sendString("User deleted successfully \r");
     402:	82 e6       	ldi	r24, 0x62	; 98
     404:	91 e0       	ldi	r25, 0x01	; 1
     406:	0e 94 8b 1a 	call	0x3516	; 0x3516 <UART_sendString>
     40a:	ad c1       	rjmp	.+858    	; 0x766 <__EEPROM_REGION_LENGTH__+0x366>
						}
						else
						{
							UART_sendString("Error \r");
     40c:	8e e7       	ldi	r24, 0x7E	; 126
     40e:	91 e0       	ldi	r25, 0x01	; 1
     410:	0e 94 8b 1a 	call	0x3516	; 0x3516 <UART_sendString>
     414:	a8 c1       	rjmp	.+848    	; 0x766 <__EEPROM_REGION_LENGTH__+0x366>
							
						}
					}
				else if ((!(strcmp(userchoice,"d"))))
     416:	ce 01       	movw	r24, r28
     418:	cd 96       	adiw	r24, 0x3d	; 61
     41a:	66 e8       	ldi	r22, 0x86	; 134
     41c:	71 e0       	ldi	r23, 0x01	; 1
     41e:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <strcmp>
     422:	89 2b       	or	r24, r25
     424:	71 f4       	brne	.+28     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
				{
					if (deleteOfflineUser())
     426:	0e 94 d6 09 	call	0x13ac	; 0x13ac <deleteOfflineUser>
     42a:	88 23       	and	r24, r24
     42c:	29 f0       	breq	.+10     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
					{
						UART_sendString("User deleted successfully \r");
     42e:	82 e6       	ldi	r24, 0x62	; 98
     430:	91 e0       	ldi	r25, 0x01	; 1
     432:	0e 94 8b 1a 	call	0x3516	; 0x3516 <UART_sendString>
     436:	97 c1       	rjmp	.+814    	; 0x766 <__EEPROM_REGION_LENGTH__+0x366>
					}
					else
					{
						UART_sendString("Error \r");
     438:	8e e7       	ldi	r24, 0x7E	; 126
     43a:	91 e0       	ldi	r25, 0x01	; 1
     43c:	0e 94 8b 1a 	call	0x3516	; 0x3516 <UART_sendString>
     440:	92 c1       	rjmp	.+804    	; 0x766 <__EEPROM_REGION_LENGTH__+0x366>
						
					}
				}

				else if((!(strcmp(userchoice,"e"))))
     442:	ce 01       	movw	r24, r28
     444:	cd 96       	adiw	r24, 0x3d	; 61
     446:	68 e8       	ldi	r22, 0x88	; 136
     448:	71 e0       	ldi	r23, 0x01	; 1
     44a:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <strcmp>
     44e:	89 2b       	or	r24, r25
     450:	09 f0       	breq	.+2      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
     452:	7b c1       	rjmp	.+758    	; 0x74a <__EEPROM_REGION_LENGTH__+0x34a>
					{
						
						back=1;
     454:	81 e0       	ldi	r24, 0x01	; 1
     456:	89 87       	std	Y+9, r24	; 0x09
						while (back==1)
     458:	73 c1       	rjmp	.+742    	; 0x740 <__EEPROM_REGION_LENGTH__+0x340>
						{
							UART_sendString("  Write the number of the led then on or off to control it\r  Press a number between 1 and 5 to control the dimming\r  Write off to turn dimmer off\r  Write open or close to control the door\r  Press b to go back\r");
     45a:	8a e8       	ldi	r24, 0x8A	; 138
     45c:	91 e0       	ldi	r25, 0x01	; 1
     45e:	0e 94 8b 1a 	call	0x3516	; 0x3516 <UART_sendString>
							adminInput(userchoice);
     462:	ce 01       	movw	r24, r28
     464:	cd 96       	adiw	r24, 0x3d	; 61
     466:	0e 94 af 04 	call	0x95e	; 0x95e <adminInput>
							if ((!(strcmp(userchoice,"off"))))
     46a:	ce 01       	movw	r24, r28
     46c:	cd 96       	adiw	r24, 0x3d	; 61
     46e:	6c e5       	ldi	r22, 0x5C	; 92
     470:	72 e0       	ldi	r23, 0x02	; 2
     472:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <strcmp>
     476:	89 2b       	or	r24, r25
     478:	61 f4       	brne	.+24     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
							{
								LED_DIMMER(0);
     47a:	80 e0       	ldi	r24, 0x00	; 0
     47c:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <LED_DIMMER>
								LCD_goto(10,2);
     480:	62 e0       	ldi	r22, 0x02	; 2
     482:	8a e0       	ldi	r24, 0x0A	; 10
     484:	0e 94 a5 11 	call	0x234a	; 0x234a <LCD_goto>
								LCD_writeStr("      ");
     488:	80 e6       	ldi	r24, 0x60	; 96
     48a:	92 e0       	ldi	r25, 0x02	; 2
     48c:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <LCD_writeStr>
     490:	57 c1       	rjmp	.+686    	; 0x740 <__EEPROM_REGION_LENGTH__+0x340>
								
							}
							else if ((!(strcmp(userchoice,"1"))))
     492:	ce 01       	movw	r24, r28
     494:	cd 96       	adiw	r24, 0x3d	; 61
     496:	67 e6       	ldi	r22, 0x67	; 103
     498:	72 e0       	ldi	r23, 0x02	; 2
     49a:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <strcmp>
     49e:	89 2b       	or	r24, r25
     4a0:	61 f4       	brne	.+24     	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
							{
								LED_DIMMER(1);
     4a2:	81 e0       	ldi	r24, 0x01	; 1
     4a4:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <LED_DIMMER>
								LCD_goto(10,2);
     4a8:	62 e0       	ldi	r22, 0x02	; 2
     4aa:	8a e0       	ldi	r24, 0x0A	; 10
     4ac:	0e 94 a5 11 	call	0x234a	; 0x234a <LCD_goto>
								LCD_writeStr("Dim L1");
     4b0:	89 e6       	ldi	r24, 0x69	; 105
     4b2:	92 e0       	ldi	r25, 0x02	; 2
     4b4:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <LCD_writeStr>
     4b8:	43 c1       	rjmp	.+646    	; 0x740 <__EEPROM_REGION_LENGTH__+0x340>
								
							}
							else if ((!(strcmp(userchoice,"2"))))
     4ba:	ce 01       	movw	r24, r28
     4bc:	cd 96       	adiw	r24, 0x3d	; 61
     4be:	60 e7       	ldi	r22, 0x70	; 112
     4c0:	72 e0       	ldi	r23, 0x02	; 2
     4c2:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <strcmp>
     4c6:	89 2b       	or	r24, r25
     4c8:	61 f4       	brne	.+24     	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
							{
								LED_DIMMER(2);
     4ca:	82 e0       	ldi	r24, 0x02	; 2
     4cc:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <LED_DIMMER>
								LCD_goto(10,2);
     4d0:	62 e0       	ldi	r22, 0x02	; 2
     4d2:	8a e0       	ldi	r24, 0x0A	; 10
     4d4:	0e 94 a5 11 	call	0x234a	; 0x234a <LCD_goto>
								LCD_writeStr("Dim L2");
     4d8:	82 e7       	ldi	r24, 0x72	; 114
     4da:	92 e0       	ldi	r25, 0x02	; 2
     4dc:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <LCD_writeStr>
     4e0:	2f c1       	rjmp	.+606    	; 0x740 <__EEPROM_REGION_LENGTH__+0x340>
							}
							else if ((!(strcmp(userchoice,"3"))))
     4e2:	ce 01       	movw	r24, r28
     4e4:	cd 96       	adiw	r24, 0x3d	; 61
     4e6:	69 e7       	ldi	r22, 0x79	; 121
     4e8:	72 e0       	ldi	r23, 0x02	; 2
     4ea:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <strcmp>
     4ee:	89 2b       	or	r24, r25
     4f0:	61 f4       	brne	.+24     	; 0x50a <__EEPROM_REGION_LENGTH__+0x10a>
							{
								LED_DIMMER(3);
     4f2:	83 e0       	ldi	r24, 0x03	; 3
     4f4:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <LED_DIMMER>
								LCD_goto(10,2);
     4f8:	62 e0       	ldi	r22, 0x02	; 2
     4fa:	8a e0       	ldi	r24, 0x0A	; 10
     4fc:	0e 94 a5 11 	call	0x234a	; 0x234a <LCD_goto>
								LCD_writeStr("Dim L3");
     500:	8b e7       	ldi	r24, 0x7B	; 123
     502:	92 e0       	ldi	r25, 0x02	; 2
     504:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <LCD_writeStr>
     508:	1b c1       	rjmp	.+566    	; 0x740 <__EEPROM_REGION_LENGTH__+0x340>
							}
							else if ((!(strcmp(userchoice,"4"))))
     50a:	ce 01       	movw	r24, r28
     50c:	cd 96       	adiw	r24, 0x3d	; 61
     50e:	62 e8       	ldi	r22, 0x82	; 130
     510:	72 e0       	ldi	r23, 0x02	; 2
     512:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <strcmp>
     516:	89 2b       	or	r24, r25
     518:	61 f4       	brne	.+24     	; 0x532 <__EEPROM_REGION_LENGTH__+0x132>
							{
								LED_DIMMER(4);
     51a:	84 e0       	ldi	r24, 0x04	; 4
     51c:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <LED_DIMMER>
								LCD_goto(10,2);
     520:	62 e0       	ldi	r22, 0x02	; 2
     522:	8a e0       	ldi	r24, 0x0A	; 10
     524:	0e 94 a5 11 	call	0x234a	; 0x234a <LCD_goto>
								LCD_writeStr("Dim L4");
     528:	84 e8       	ldi	r24, 0x84	; 132
     52a:	92 e0       	ldi	r25, 0x02	; 2
     52c:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <LCD_writeStr>
     530:	07 c1       	rjmp	.+526    	; 0x740 <__EEPROM_REGION_LENGTH__+0x340>
							}
							else if ((!(strcmp(userchoice,"5"))))
     532:	ce 01       	movw	r24, r28
     534:	cd 96       	adiw	r24, 0x3d	; 61
     536:	6b e8       	ldi	r22, 0x8B	; 139
     538:	72 e0       	ldi	r23, 0x02	; 2
     53a:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <strcmp>
     53e:	89 2b       	or	r24, r25
     540:	61 f4       	brne	.+24     	; 0x55a <__EEPROM_REGION_LENGTH__+0x15a>
							{
								LED_DIMMER(5);
     542:	85 e0       	ldi	r24, 0x05	; 5
     544:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <LED_DIMMER>
								LCD_goto(10,2);
     548:	62 e0       	ldi	r22, 0x02	; 2
     54a:	8a e0       	ldi	r24, 0x0A	; 10
     54c:	0e 94 a5 11 	call	0x234a	; 0x234a <LCD_goto>
								LCD_writeStr("Dim L5");
     550:	8d e8       	ldi	r24, 0x8D	; 141
     552:	92 e0       	ldi	r25, 0x02	; 2
     554:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <LCD_writeStr>
     558:	f3 c0       	rjmp	.+486    	; 0x740 <__EEPROM_REGION_LENGTH__+0x340>
							}
							else if ((!(strcmp(userchoice,"1 on"))))
     55a:	ce 01       	movw	r24, r28
     55c:	cd 96       	adiw	r24, 0x3d	; 61
     55e:	64 e9       	ldi	r22, 0x94	; 148
     560:	72 e0       	ldi	r23, 0x02	; 2
     562:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <strcmp>
     566:	89 2b       	or	r24, r25
     568:	69 f4       	brne	.+26     	; 0x584 <__EEPROM_REGION_LENGTH__+0x184>
							{
								DIO_setPinValue(DIO_PINA0,DIO_HIGH);
     56a:	61 e0       	ldi	r22, 0x01	; 1
     56c:	80 e0       	ldi	r24, 0x00	; 0
     56e:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_setPinValue>
								LCD_goto(0,2);
     572:	62 e0       	ldi	r22, 0x02	; 2
     574:	80 e0       	ldi	r24, 0x00	; 0
     576:	0e 94 a5 11 	call	0x234a	; 0x234a <LCD_goto>
								LCD_writeStr("L1");
     57a:	89 e9       	ldi	r24, 0x99	; 153
     57c:	92 e0       	ldi	r25, 0x02	; 2
     57e:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <LCD_writeStr>
     582:	de c0       	rjmp	.+444    	; 0x740 <__EEPROM_REGION_LENGTH__+0x340>
							}
							else if ((!(strcmp(userchoice,"2 on"))))
     584:	ce 01       	movw	r24, r28
     586:	cd 96       	adiw	r24, 0x3d	; 61
     588:	6c e9       	ldi	r22, 0x9C	; 156
     58a:	72 e0       	ldi	r23, 0x02	; 2
     58c:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <strcmp>
     590:	89 2b       	or	r24, r25
     592:	69 f4       	brne	.+26     	; 0x5ae <__EEPROM_REGION_LENGTH__+0x1ae>
							{
								DIO_setPinValue(DIO_PINA1,DIO_HIGH);
     594:	61 e0       	ldi	r22, 0x01	; 1
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_setPinValue>
								LCD_goto(2,2);
     59c:	62 e0       	ldi	r22, 0x02	; 2
     59e:	82 e0       	ldi	r24, 0x02	; 2
     5a0:	0e 94 a5 11 	call	0x234a	; 0x234a <LCD_goto>
								LCD_writeStr("L2");
     5a4:	81 ea       	ldi	r24, 0xA1	; 161
     5a6:	92 e0       	ldi	r25, 0x02	; 2
     5a8:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <LCD_writeStr>
     5ac:	c9 c0       	rjmp	.+402    	; 0x740 <__EEPROM_REGION_LENGTH__+0x340>
							}
							else if ((!(strcmp(userchoice,"3 on"))))
     5ae:	ce 01       	movw	r24, r28
     5b0:	cd 96       	adiw	r24, 0x3d	; 61
     5b2:	64 ea       	ldi	r22, 0xA4	; 164
     5b4:	72 e0       	ldi	r23, 0x02	; 2
     5b6:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <strcmp>
     5ba:	89 2b       	or	r24, r25
     5bc:	69 f4       	brne	.+26     	; 0x5d8 <__EEPROM_REGION_LENGTH__+0x1d8>
							{
								DIO_setPinValue(DIO_PINA2,DIO_HIGH);
     5be:	61 e0       	ldi	r22, 0x01	; 1
     5c0:	82 e0       	ldi	r24, 0x02	; 2
     5c2:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_setPinValue>
								LCD_goto(4,2);
     5c6:	62 e0       	ldi	r22, 0x02	; 2
     5c8:	84 e0       	ldi	r24, 0x04	; 4
     5ca:	0e 94 a5 11 	call	0x234a	; 0x234a <LCD_goto>
								LCD_writeStr("L3");
     5ce:	89 ea       	ldi	r24, 0xA9	; 169
     5d0:	92 e0       	ldi	r25, 0x02	; 2
     5d2:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <LCD_writeStr>
     5d6:	b4 c0       	rjmp	.+360    	; 0x740 <__EEPROM_REGION_LENGTH__+0x340>
							}
							else if ((!(strcmp(userchoice,"4 on"))))
     5d8:	ce 01       	movw	r24, r28
     5da:	cd 96       	adiw	r24, 0x3d	; 61
     5dc:	6c ea       	ldi	r22, 0xAC	; 172
     5de:	72 e0       	ldi	r23, 0x02	; 2
     5e0:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <strcmp>
     5e4:	89 2b       	or	r24, r25
     5e6:	69 f4       	brne	.+26     	; 0x602 <__EEPROM_REGION_LENGTH__+0x202>
							{
								DIO_setPinValue(DIO_PINA3,DIO_HIGH);
     5e8:	61 e0       	ldi	r22, 0x01	; 1
     5ea:	83 e0       	ldi	r24, 0x03	; 3
     5ec:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_setPinValue>
								LCD_goto(6,2);
     5f0:	62 e0       	ldi	r22, 0x02	; 2
     5f2:	86 e0       	ldi	r24, 0x06	; 6
     5f4:	0e 94 a5 11 	call	0x234a	; 0x234a <LCD_goto>
								LCD_writeStr("L4");
     5f8:	81 eb       	ldi	r24, 0xB1	; 177
     5fa:	92 e0       	ldi	r25, 0x02	; 2
     5fc:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <LCD_writeStr>
     600:	9f c0       	rjmp	.+318    	; 0x740 <__EEPROM_REGION_LENGTH__+0x340>
							}
							else if ((!(strcmp(userchoice,"5 on"))))
     602:	ce 01       	movw	r24, r28
     604:	cd 96       	adiw	r24, 0x3d	; 61
     606:	64 eb       	ldi	r22, 0xB4	; 180
     608:	72 e0       	ldi	r23, 0x02	; 2
     60a:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <strcmp>
     60e:	89 2b       	or	r24, r25
     610:	69 f4       	brne	.+26     	; 0x62c <__EEPROM_REGION_LENGTH__+0x22c>
							{
								DIO_setPinValue(DIO_PINA4,DIO_HIGH);
     612:	61 e0       	ldi	r22, 0x01	; 1
     614:	84 e0       	ldi	r24, 0x04	; 4
     616:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_setPinValue>
								LCD_goto(8,2);
     61a:	62 e0       	ldi	r22, 0x02	; 2
     61c:	88 e0       	ldi	r24, 0x08	; 8
     61e:	0e 94 a5 11 	call	0x234a	; 0x234a <LCD_goto>
								LCD_writeStr("L5");
     622:	89 eb       	ldi	r24, 0xB9	; 185
     624:	92 e0       	ldi	r25, 0x02	; 2
     626:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <LCD_writeStr>
     62a:	8a c0       	rjmp	.+276    	; 0x740 <__EEPROM_REGION_LENGTH__+0x340>
							}
							else if ((!(strcmp(userchoice,"1 off"))))
     62c:	ce 01       	movw	r24, r28
     62e:	cd 96       	adiw	r24, 0x3d	; 61
     630:	6c eb       	ldi	r22, 0xBC	; 188
     632:	72 e0       	ldi	r23, 0x02	; 2
     634:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <strcmp>
     638:	89 2b       	or	r24, r25
     63a:	69 f4       	brne	.+26     	; 0x656 <__EEPROM_REGION_LENGTH__+0x256>
							{
								DIO_setPinValue(DIO_PINA0,DIO_LOW);
     63c:	60 e0       	ldi	r22, 0x00	; 0
     63e:	80 e0       	ldi	r24, 0x00	; 0
     640:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_setPinValue>
								LCD_goto(0,2);
     644:	62 e0       	ldi	r22, 0x02	; 2
     646:	80 e0       	ldi	r24, 0x00	; 0
     648:	0e 94 a5 11 	call	0x234a	; 0x234a <LCD_goto>
								LCD_writeStr("  ");
     64c:	82 ec       	ldi	r24, 0xC2	; 194
     64e:	92 e0       	ldi	r25, 0x02	; 2
     650:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <LCD_writeStr>
     654:	75 c0       	rjmp	.+234    	; 0x740 <__EEPROM_REGION_LENGTH__+0x340>
							}
							else if ((!(strcmp(userchoice,"2 off"))))
     656:	ce 01       	movw	r24, r28
     658:	cd 96       	adiw	r24, 0x3d	; 61
     65a:	65 ec       	ldi	r22, 0xC5	; 197
     65c:	72 e0       	ldi	r23, 0x02	; 2
     65e:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <strcmp>
     662:	89 2b       	or	r24, r25
     664:	69 f4       	brne	.+26     	; 0x680 <__EEPROM_REGION_LENGTH__+0x280>
							{
								DIO_setPinValue(DIO_PINA1,DIO_LOW);
     666:	60 e0       	ldi	r22, 0x00	; 0
     668:	81 e0       	ldi	r24, 0x01	; 1
     66a:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_setPinValue>
								LCD_goto(2,2);
     66e:	62 e0       	ldi	r22, 0x02	; 2
     670:	82 e0       	ldi	r24, 0x02	; 2
     672:	0e 94 a5 11 	call	0x234a	; 0x234a <LCD_goto>
								LCD_writeStr("  ");
     676:	82 ec       	ldi	r24, 0xC2	; 194
     678:	92 e0       	ldi	r25, 0x02	; 2
     67a:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <LCD_writeStr>
     67e:	60 c0       	rjmp	.+192    	; 0x740 <__EEPROM_REGION_LENGTH__+0x340>
							}
							else if ((!(strcmp(userchoice,"3 off"))))
     680:	ce 01       	movw	r24, r28
     682:	cd 96       	adiw	r24, 0x3d	; 61
     684:	6b ec       	ldi	r22, 0xCB	; 203
     686:	72 e0       	ldi	r23, 0x02	; 2
     688:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <strcmp>
     68c:	89 2b       	or	r24, r25
     68e:	69 f4       	brne	.+26     	; 0x6aa <__EEPROM_REGION_LENGTH__+0x2aa>
							{
								DIO_setPinValue(DIO_PINA2,DIO_LOW);
     690:	60 e0       	ldi	r22, 0x00	; 0
     692:	82 e0       	ldi	r24, 0x02	; 2
     694:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_setPinValue>
								LCD_goto(4,2);
     698:	62 e0       	ldi	r22, 0x02	; 2
     69a:	84 e0       	ldi	r24, 0x04	; 4
     69c:	0e 94 a5 11 	call	0x234a	; 0x234a <LCD_goto>
								LCD_writeStr("  ");
     6a0:	82 ec       	ldi	r24, 0xC2	; 194
     6a2:	92 e0       	ldi	r25, 0x02	; 2
     6a4:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <LCD_writeStr>
     6a8:	4b c0       	rjmp	.+150    	; 0x740 <__EEPROM_REGION_LENGTH__+0x340>
							}
							else if ((!(strcmp(userchoice,"4 off"))))
     6aa:	ce 01       	movw	r24, r28
     6ac:	cd 96       	adiw	r24, 0x3d	; 61
     6ae:	61 ed       	ldi	r22, 0xD1	; 209
     6b0:	72 e0       	ldi	r23, 0x02	; 2
     6b2:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <strcmp>
     6b6:	89 2b       	or	r24, r25
     6b8:	69 f4       	brne	.+26     	; 0x6d4 <__EEPROM_REGION_LENGTH__+0x2d4>
							{
								DIO_setPinValue(DIO_PINA3,DIO_LOW);
     6ba:	60 e0       	ldi	r22, 0x00	; 0
     6bc:	83 e0       	ldi	r24, 0x03	; 3
     6be:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_setPinValue>
								LCD_goto(6,2);
     6c2:	62 e0       	ldi	r22, 0x02	; 2
     6c4:	86 e0       	ldi	r24, 0x06	; 6
     6c6:	0e 94 a5 11 	call	0x234a	; 0x234a <LCD_goto>
								LCD_writeStr("  ");
     6ca:	82 ec       	ldi	r24, 0xC2	; 194
     6cc:	92 e0       	ldi	r25, 0x02	; 2
     6ce:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <LCD_writeStr>
     6d2:	36 c0       	rjmp	.+108    	; 0x740 <__EEPROM_REGION_LENGTH__+0x340>
							}
							else if ((!(strcmp(userchoice,"5 off"))))
     6d4:	ce 01       	movw	r24, r28
     6d6:	cd 96       	adiw	r24, 0x3d	; 61
     6d8:	67 ed       	ldi	r22, 0xD7	; 215
     6da:	72 e0       	ldi	r23, 0x02	; 2
     6dc:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <strcmp>
     6e0:	89 2b       	or	r24, r25
     6e2:	69 f4       	brne	.+26     	; 0x6fe <__EEPROM_REGION_LENGTH__+0x2fe>
							{
								DIO_setPinValue(DIO_PINA4,DIO_LOW);
     6e4:	60 e0       	ldi	r22, 0x00	; 0
     6e6:	84 e0       	ldi	r24, 0x04	; 4
     6e8:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_setPinValue>
								LCD_goto(8,2);
     6ec:	62 e0       	ldi	r22, 0x02	; 2
     6ee:	88 e0       	ldi	r24, 0x08	; 8
     6f0:	0e 94 a5 11 	call	0x234a	; 0x234a <LCD_goto>
								LCD_writeStr("  ");
     6f4:	82 ec       	ldi	r24, 0xC2	; 194
     6f6:	92 e0       	ldi	r25, 0x02	; 2
     6f8:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <LCD_writeStr>
     6fc:	21 c0       	rjmp	.+66     	; 0x740 <__EEPROM_REGION_LENGTH__+0x340>
							}
							else if ((!(strcmp(userchoice,"open"))))
     6fe:	ce 01       	movw	r24, r28
     700:	cd 96       	adiw	r24, 0x3d	; 61
     702:	6d ed       	ldi	r22, 0xDD	; 221
     704:	72 e0       	ldi	r23, 0x02	; 2
     706:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <strcmp>
     70a:	89 2b       	or	r24, r25
     70c:	21 f4       	brne	.+8      	; 0x716 <__EEPROM_REGION_LENGTH__+0x316>
							{
								Door(0);
     70e:	80 e0       	ldi	r24, 0x00	; 0
     710:	0e 94 c1 0b 	call	0x1782	; 0x1782 <Door>
     714:	15 c0       	rjmp	.+42     	; 0x740 <__EEPROM_REGION_LENGTH__+0x340>
							}
							else if ((!(strcmp(userchoice,"close"))))
     716:	ce 01       	movw	r24, r28
     718:	cd 96       	adiw	r24, 0x3d	; 61
     71a:	62 ee       	ldi	r22, 0xE2	; 226
     71c:	72 e0       	ldi	r23, 0x02	; 2
     71e:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <strcmp>
     722:	89 2b       	or	r24, r25
     724:	21 f4       	brne	.+8      	; 0x72e <__EEPROM_REGION_LENGTH__+0x32e>
							{
								Door(1);
     726:	81 e0       	ldi	r24, 0x01	; 1
     728:	0e 94 c1 0b 	call	0x1782	; 0x1782 <Door>
     72c:	09 c0       	rjmp	.+18     	; 0x740 <__EEPROM_REGION_LENGTH__+0x340>
							}
							else if ((!(strcmp(userchoice,"b"))))
     72e:	ce 01       	movw	r24, r28
     730:	cd 96       	adiw	r24, 0x3d	; 61
     732:	64 e4       	ldi	r22, 0x44	; 68
     734:	71 e0       	ldi	r23, 0x01	; 1
     736:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <strcmp>
     73a:	89 2b       	or	r24, r25
     73c:	09 f4       	brne	.+2      	; 0x740 <__EEPROM_REGION_LENGTH__+0x340>
							{
								back=0;
     73e:	19 86       	std	Y+9, r1	; 0x09

				else if((!(strcmp(userchoice,"e"))))
					{
						
						back=1;
						while (back==1)
     740:	89 85       	ldd	r24, Y+9	; 0x09
     742:	81 30       	cpi	r24, 0x01	; 1
     744:	09 f4       	brne	.+2      	; 0x748 <__EEPROM_REGION_LENGTH__+0x348>
     746:	89 ce       	rjmp	.-750    	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
     748:	0e c0       	rjmp	.+28     	; 0x766 <__EEPROM_REGION_LENGTH__+0x366>
							{
								back=0;
							}
						}
					}
				else if ((!(strcmp(userchoice,"s"))))
     74a:	ce 01       	movw	r24, r28
     74c:	cd 96       	adiw	r24, 0x3d	; 61
     74e:	68 ee       	ldi	r22, 0xE8	; 232
     750:	72 e0       	ldi	r23, 0x02	; 2
     752:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <strcmp>
     756:	89 2b       	or	r24, r25
     758:	11 f4       	brne	.+4      	; 0x75e <__EEPROM_REGION_LENGTH__+0x35e>
					{
						flag1=0;
     75a:	18 86       	std	Y+8, r1	; 0x08
     75c:	04 c0       	rjmp	.+8      	; 0x766 <__EEPROM_REGION_LENGTH__+0x366>
					}
				else
					{
						UART_sendString("wrong input\r ");
     75e:	8a ee       	ldi	r24, 0xEA	; 234
     760:	92 e0       	ldi	r25, 0x02	; 2
     762:	0e 94 8b 1a 	call	0x3516	; 0x3516 <UART_sendString>
		{
			wrongPass=0;
			UART_sendString("Welcome Home.\r ");
			flag1=1;
			//enters a loop where the admin menu to add, delete users or control devices
		while (flag1)
     766:	88 85       	ldd	r24, Y+8	; 0x08
     768:	88 23       	and	r24, r24
     76a:	09 f0       	breq	.+2      	; 0x76e <__EEPROM_REGION_LENGTH__+0x36e>
     76c:	0a ce       	rjmp	.-1004   	; 0x382 <main+0x2f0>
     76e:	f8 cd       	rjmp	.-1040   	; 0x360 <main+0x2ce>
					}
				}
			}
		else
		{
   			UART_sendString("Wrong Username or Password\r");
     770:	88 ef       	ldi	r24, 0xF8	; 248
     772:	92 e0       	ldi	r25, 0x02	; 2
     774:	0e 94 8b 1a 	call	0x3516	; 0x3516 <UART_sendString>
			wrongPass++;
     778:	8f 81       	ldd	r24, Y+7	; 0x07
     77a:	8f 5f       	subi	r24, 0xFF	; 255
     77c:	8f 83       	std	Y+7, r24	; 0x07
     77e:	f0 cd       	rjmp	.-1056   	; 0x360 <main+0x2ce>
		}
		
else
{
	//enable the buzzer for about 2 seconds when login is incorrect 3 times
	DIO_setPinValue(DIO_PINB0,DIO_HIGH);
     780:	61 e0       	ldi	r22, 0x01	; 1
     782:	88 e0       	ldi	r24, 0x08	; 8
     784:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_setPinValue>
     788:	80 e0       	ldi	r24, 0x00	; 0
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	aa ef       	ldi	r26, 0xFA	; 250
     78e:	b4 e4       	ldi	r27, 0x44	; 68
     790:	8e 87       	std	Y+14, r24	; 0x0e
     792:	9f 87       	std	Y+15, r25	; 0x0f
     794:	a8 8b       	std	Y+16, r26	; 0x10
     796:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     798:	20 e0       	ldi	r18, 0x00	; 0
     79a:	30 e0       	ldi	r19, 0x00	; 0
     79c:	4a e7       	ldi	r20, 0x7A	; 122
     79e:	55 e4       	ldi	r21, 0x45	; 69
     7a0:	6e 85       	ldd	r22, Y+14	; 0x0e
     7a2:	7f 85       	ldd	r23, Y+15	; 0x0f
     7a4:	88 89       	ldd	r24, Y+16	; 0x10
     7a6:	99 89       	ldd	r25, Y+17	; 0x11
     7a8:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__mulsf3>
     7ac:	dc 01       	movw	r26, r24
     7ae:	cb 01       	movw	r24, r22
     7b0:	8a a7       	std	Y+42, r24	; 0x2a
     7b2:	9b a7       	std	Y+43, r25	; 0x2b
     7b4:	ac a7       	std	Y+44, r26	; 0x2c
     7b6:	bd a7       	std	Y+45, r27	; 0x2d
	if (__tmp < 1.0)
     7b8:	20 e0       	ldi	r18, 0x00	; 0
     7ba:	30 e0       	ldi	r19, 0x00	; 0
     7bc:	40 e8       	ldi	r20, 0x80	; 128
     7be:	5f e3       	ldi	r21, 0x3F	; 63
     7c0:	6a a5       	ldd	r22, Y+42	; 0x2a
     7c2:	7b a5       	ldd	r23, Y+43	; 0x2b
     7c4:	8c a5       	ldd	r24, Y+44	; 0x2c
     7c6:	9d a5       	ldd	r25, Y+45	; 0x2d
     7c8:	0e 94 45 1b 	call	0x368a	; 0x368a <__cmpsf2>
     7cc:	88 23       	and	r24, r24
     7ce:	2c f4       	brge	.+10     	; 0x7da <__EEPROM_REGION_LENGTH__+0x3da>
		__ticks = 1;
     7d0:	81 e0       	ldi	r24, 0x01	; 1
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	9f a7       	std	Y+47, r25	; 0x2f
     7d6:	8e a7       	std	Y+46, r24	; 0x2e
     7d8:	3f c0       	rjmp	.+126    	; 0x858 <__DATA_REGION_LENGTH__+0x58>
	else if (__tmp > 65535)
     7da:	20 e0       	ldi	r18, 0x00	; 0
     7dc:	3f ef       	ldi	r19, 0xFF	; 255
     7de:	4f e7       	ldi	r20, 0x7F	; 127
     7e0:	57 e4       	ldi	r21, 0x47	; 71
     7e2:	6a a5       	ldd	r22, Y+42	; 0x2a
     7e4:	7b a5       	ldd	r23, Y+43	; 0x2b
     7e6:	8c a5       	ldd	r24, Y+44	; 0x2c
     7e8:	9d a5       	ldd	r25, Y+45	; 0x2d
     7ea:	0e 94 9d 1c 	call	0x393a	; 0x393a <__gesf2>
     7ee:	18 16       	cp	r1, r24
     7f0:	4c f5       	brge	.+82     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7f2:	20 e0       	ldi	r18, 0x00	; 0
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	40 e2       	ldi	r20, 0x20	; 32
     7f8:	51 e4       	ldi	r21, 0x41	; 65
     7fa:	6e 85       	ldd	r22, Y+14	; 0x0e
     7fc:	7f 85       	ldd	r23, Y+15	; 0x0f
     7fe:	88 89       	ldd	r24, Y+16	; 0x10
     800:	99 89       	ldd	r25, Y+17	; 0x11
     802:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__mulsf3>
     806:	dc 01       	movw	r26, r24
     808:	cb 01       	movw	r24, r22
     80a:	bc 01       	movw	r22, r24
     80c:	cd 01       	movw	r24, r26
     80e:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__fixunssfsi>
     812:	dc 01       	movw	r26, r24
     814:	cb 01       	movw	r24, r22
     816:	9f a7       	std	Y+47, r25	; 0x2f
     818:	8e a7       	std	Y+46, r24	; 0x2e
     81a:	0f c0       	rjmp	.+30     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
     81c:	80 e9       	ldi	r24, 0x90	; 144
     81e:	91 e0       	ldi	r25, 0x01	; 1
     820:	99 ab       	std	Y+49, r25	; 0x31
     822:	88 ab       	std	Y+48, r24	; 0x30
     824:	88 a9       	ldd	r24, Y+48	; 0x30
     826:	99 a9       	ldd	r25, Y+49	; 0x31
     828:	01 97       	sbiw	r24, 0x01	; 1
     82a:	f1 f7       	brne	.-4      	; 0x828 <__DATA_REGION_LENGTH__+0x28>
     82c:	99 ab       	std	Y+49, r25	; 0x31
     82e:	88 ab       	std	Y+48, r24	; 0x30
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     830:	8e a5       	ldd	r24, Y+46	; 0x2e
     832:	9f a5       	ldd	r25, Y+47	; 0x2f
     834:	01 97       	sbiw	r24, 0x01	; 1
     836:	9f a7       	std	Y+47, r25	; 0x2f
     838:	8e a7       	std	Y+46, r24	; 0x2e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     83a:	8e a5       	ldd	r24, Y+46	; 0x2e
     83c:	9f a5       	ldd	r25, Y+47	; 0x2f
     83e:	89 2b       	or	r24, r25
     840:	69 f7       	brne	.-38     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
     842:	14 c0       	rjmp	.+40     	; 0x86c <__stack+0xd>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     844:	6a a5       	ldd	r22, Y+42	; 0x2a
     846:	7b a5       	ldd	r23, Y+43	; 0x2b
     848:	8c a5       	ldd	r24, Y+44	; 0x2c
     84a:	9d a5       	ldd	r25, Y+45	; 0x2d
     84c:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__fixunssfsi>
     850:	dc 01       	movw	r26, r24
     852:	cb 01       	movw	r24, r22
     854:	9f a7       	std	Y+47, r25	; 0x2f
     856:	8e a7       	std	Y+46, r24	; 0x2e
     858:	8e a5       	ldd	r24, Y+46	; 0x2e
     85a:	9f a5       	ldd	r25, Y+47	; 0x2f
     85c:	9b ab       	std	Y+51, r25	; 0x33
     85e:	8a ab       	std	Y+50, r24	; 0x32
     860:	8a a9       	ldd	r24, Y+50	; 0x32
     862:	9b a9       	ldd	r25, Y+51	; 0x33
     864:	01 97       	sbiw	r24, 0x01	; 1
     866:	f1 f7       	brne	.-4      	; 0x864 <__stack+0x5>
     868:	9b ab       	std	Y+51, r25	; 0x33
     86a:	8a ab       	std	Y+50, r24	; 0x32
	_delay_ms(2000);
	DIO_setPinValue(DIO_PINB0,DIO_LOW);
     86c:	60 e0       	ldi	r22, 0x00	; 0
     86e:	88 e0       	ldi	r24, 0x08	; 8
     870:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_setPinValue>
	wrongPass=0;
     874:	1f 82       	std	Y+7, r1	; 0x07
}

}
     876:	74 cd       	rjmp	.-1304   	; 0x360 <main+0x2ce>

00000878 <adminLogin>:
#include "EEPROM_INT.h"
#include "MEM_INT.h"
#include "TIMER0_INT.h"
u8 charCounter=0;
u8 adminLogin()
{
     878:	1f 93       	push	r17
     87a:	cf 93       	push	r28
     87c:	df 93       	push	r29
     87e:	cd b7       	in	r28, 0x3d	; 61
     880:	de b7       	in	r29, 0x3e	; 62
     882:	29 97       	sbiw	r28, 0x09	; 9
     884:	0f b6       	in	r0, 0x3f	; 63
     886:	f8 94       	cli
     888:	de bf       	out	0x3e, r29	; 62
     88a:	0f be       	out	0x3f, r0	; 63
     88c:	cd bf       	out	0x3d, r28	; 61
	UART_sendString("Admin= ");
     88e:	8a e1       	ldi	r24, 0x1A	; 26
     890:	93 e0       	ldi	r25, 0x03	; 3
     892:	0e 94 8b 1a 	call	0x3516	; 0x3516 <UART_sendString>
	u8 user[5];
	adminInput(user);
     896:	ce 01       	movw	r24, r28
     898:	01 96       	adiw	r24, 0x01	; 1
     89a:	0e 94 af 04 	call	0x95e	; 0x95e <adminInput>
	if (charCounter!=5)
     89e:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <__data_end>
     8a2:	85 30       	cpi	r24, 0x05	; 5
     8a4:	11 f0       	breq	.+4      	; 0x8aa <adminLogin+0x32>
	{
		return 0;
     8a6:	80 e0       	ldi	r24, 0x00	; 0
     8a8:	50 c0       	rjmp	.+160    	; 0x94a <adminLogin+0xd2>
	}
	UART_sendString("Admin Pass= ");
     8aa:	82 e2       	ldi	r24, 0x22	; 34
     8ac:	93 e0       	ldi	r25, 0x03	; 3
     8ae:	0e 94 8b 1a 	call	0x3516	; 0x3516 <UART_sendString>
	u8 pass[4];
	adminInput(pass);
     8b2:	ce 01       	movw	r24, r28
     8b4:	06 96       	adiw	r24, 0x06	; 6
     8b6:	0e 94 af 04 	call	0x95e	; 0x95e <adminInput>
	if (charCounter!=4)
     8ba:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <__data_end>
     8be:	84 30       	cpi	r24, 0x04	; 4
     8c0:	11 f0       	breq	.+4      	; 0x8c6 <adminLogin+0x4e>
	{
		return 0;
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	42 c0       	rjmp	.+132    	; 0x94a <adminLogin+0xd2>
	}
	//comparing the input with the eeprom data
	if((user[0]==EEPROM_readData(0))
     8c6:	19 81       	ldd	r17, Y+1	; 0x01
     8c8:	80 e0       	ldi	r24, 0x00	; 0
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	0e 94 b2 0c 	call	0x1964	; 0x1964 <EEPROM_readData>
     8d0:	18 17       	cp	r17, r24
     8d2:	d1 f5       	brne	.+116    	; 0x948 <adminLogin+0xd0>
	 &&(user[1]==EEPROM_readData(1))
     8d4:	1a 81       	ldd	r17, Y+2	; 0x02
     8d6:	81 e0       	ldi	r24, 0x01	; 1
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	0e 94 b2 0c 	call	0x1964	; 0x1964 <EEPROM_readData>
     8de:	18 17       	cp	r17, r24
     8e0:	99 f5       	brne	.+102    	; 0x948 <adminLogin+0xd0>
	 &&(user[2]==EEPROM_readData(2))
     8e2:	1b 81       	ldd	r17, Y+3	; 0x03
     8e4:	82 e0       	ldi	r24, 0x02	; 2
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	0e 94 b2 0c 	call	0x1964	; 0x1964 <EEPROM_readData>
     8ec:	18 17       	cp	r17, r24
     8ee:	61 f5       	brne	.+88     	; 0x948 <adminLogin+0xd0>
	 &&(user[3]==EEPROM_readData(3))
     8f0:	1c 81       	ldd	r17, Y+4	; 0x04
     8f2:	83 e0       	ldi	r24, 0x03	; 3
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	0e 94 b2 0c 	call	0x1964	; 0x1964 <EEPROM_readData>
     8fa:	18 17       	cp	r17, r24
     8fc:	29 f5       	brne	.+74     	; 0x948 <adminLogin+0xd0>
	 &&(user[4]==EEPROM_readData(4))
     8fe:	1d 81       	ldd	r17, Y+5	; 0x05
     900:	84 e0       	ldi	r24, 0x04	; 4
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	0e 94 b2 0c 	call	0x1964	; 0x1964 <EEPROM_readData>
     908:	18 17       	cp	r17, r24
     90a:	f1 f4       	brne	.+60     	; 0x948 <adminLogin+0xd0>
	 &&(pass[0]==EEPROM_readData(5))
     90c:	1e 81       	ldd	r17, Y+6	; 0x06
     90e:	85 e0       	ldi	r24, 0x05	; 5
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	0e 94 b2 0c 	call	0x1964	; 0x1964 <EEPROM_readData>
     916:	18 17       	cp	r17, r24
     918:	b9 f4       	brne	.+46     	; 0x948 <adminLogin+0xd0>
	 &&(pass[1]==EEPROM_readData(6))
     91a:	1f 81       	ldd	r17, Y+7	; 0x07
     91c:	86 e0       	ldi	r24, 0x06	; 6
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	0e 94 b2 0c 	call	0x1964	; 0x1964 <EEPROM_readData>
     924:	18 17       	cp	r17, r24
     926:	81 f4       	brne	.+32     	; 0x948 <adminLogin+0xd0>
	 &&(pass[2]==EEPROM_readData(7))
     928:	18 85       	ldd	r17, Y+8	; 0x08
     92a:	87 e0       	ldi	r24, 0x07	; 7
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	0e 94 b2 0c 	call	0x1964	; 0x1964 <EEPROM_readData>
     932:	18 17       	cp	r17, r24
     934:	49 f4       	brne	.+18     	; 0x948 <adminLogin+0xd0>
	 &&(pass[3]==EEPROM_readData(8))
     936:	19 85       	ldd	r17, Y+9	; 0x09
     938:	88 e0       	ldi	r24, 0x08	; 8
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	0e 94 b2 0c 	call	0x1964	; 0x1964 <EEPROM_readData>
     940:	18 17       	cp	r17, r24
     942:	11 f4       	brne	.+4      	; 0x948 <adminLogin+0xd0>
	 )
	 {
		 return 1;
     944:	81 e0       	ldi	r24, 0x01	; 1
     946:	01 c0       	rjmp	.+2      	; 0x94a <adminLogin+0xd2>
	 }
	 else
	 {
		 return 0;
     948:	80 e0       	ldi	r24, 0x00	; 0
	 }

	
}
     94a:	29 96       	adiw	r28, 0x09	; 9
     94c:	0f b6       	in	r0, 0x3f	; 63
     94e:	f8 94       	cli
     950:	de bf       	out	0x3e, r29	; 62
     952:	0f be       	out	0x3f, r0	; 63
     954:	cd bf       	out	0x3d, r28	; 61
     956:	df 91       	pop	r29
     958:	cf 91       	pop	r28
     95a:	1f 91       	pop	r17
     95c:	08 95       	ret

0000095e <adminInput>:

void adminInput (u8 *input)
{
     95e:	cf 93       	push	r28
     960:	df 93       	push	r29
     962:	00 d0       	rcall	.+0      	; 0x964 <adminInput+0x6>
     964:	00 d0       	rcall	.+0      	; 0x966 <adminInput+0x8>
     966:	cd b7       	in	r28, 0x3d	; 61
     968:	de b7       	in	r29, 0x3e	; 62
     96a:	9c 83       	std	Y+4, r25	; 0x04
     96c:	8b 83       	std	Y+3, r24	; 0x03
	//this function is used to receive a string from the uart
u8 c=0,i=0;
     96e:	19 82       	std	Y+1, r1	; 0x01
     970:	1a 82       	std	Y+2, r1	; 0x02
charCounter=0;
     972:	10 92 26 04 	sts	0x0426, r1	; 0x800426 <__data_end>
while (c!=0x3d)
     976:	18 c0       	rjmp	.+48     	; 0x9a8 <adminInput+0x4a>
{
	c=UART_receiveData();
     978:	0e 94 b5 1a 	call	0x356a	; 0x356a <UART_receiveData>
     97c:	89 83       	std	Y+1, r24	; 0x01
	if (c!=0x3d)
     97e:	89 81       	ldd	r24, Y+1	; 0x01
     980:	8d 33       	cpi	r24, 0x3D	; 61
     982:	91 f0       	breq	.+36     	; 0x9a8 <adminInput+0x4a>
	{
		input[i]=c;
     984:	8a 81       	ldd	r24, Y+2	; 0x02
     986:	88 2f       	mov	r24, r24
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	2b 81       	ldd	r18, Y+3	; 0x03
     98c:	3c 81       	ldd	r19, Y+4	; 0x04
     98e:	82 0f       	add	r24, r18
     990:	93 1f       	adc	r25, r19
     992:	29 81       	ldd	r18, Y+1	; 0x01
     994:	fc 01       	movw	r30, r24
     996:	20 83       	st	Z, r18
		charCounter++;
     998:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <__data_end>
     99c:	8f 5f       	subi	r24, 0xFF	; 255
     99e:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__data_end>
		i++;
     9a2:	8a 81       	ldd	r24, Y+2	; 0x02
     9a4:	8f 5f       	subi	r24, 0xFF	; 255
     9a6:	8a 83       	std	Y+2, r24	; 0x02
void adminInput (u8 *input)
{
	//this function is used to receive a string from the uart
u8 c=0,i=0;
charCounter=0;
while (c!=0x3d)
     9a8:	89 81       	ldd	r24, Y+1	; 0x01
     9aa:	8d 33       	cpi	r24, 0x3D	; 61
     9ac:	29 f7       	brne	.-54     	; 0x978 <adminInput+0x1a>
		input[i]=c;
		charCounter++;
		i++;
	}
}
input[charCounter]='\0';
     9ae:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <__data_end>
     9b2:	88 2f       	mov	r24, r24
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	2b 81       	ldd	r18, Y+3	; 0x03
     9b8:	3c 81       	ldd	r19, Y+4	; 0x04
     9ba:	82 0f       	add	r24, r18
     9bc:	93 1f       	adc	r25, r19
     9be:	fc 01       	movw	r30, r24
     9c0:	10 82       	st	Z, r1
UART_sendData(13);
     9c2:	8d e0       	ldi	r24, 0x0D	; 13
     9c4:	0e 94 6d 1a 	call	0x34da	; 0x34da <UART_sendData>
UART_sendData(10);
     9c8:	8a e0       	ldi	r24, 0x0A	; 10
     9ca:	0e 94 6d 1a 	call	0x34da	; 0x34da <UART_sendData>
}
     9ce:	00 00       	nop
     9d0:	0f 90       	pop	r0
     9d2:	0f 90       	pop	r0
     9d4:	0f 90       	pop	r0
     9d6:	0f 90       	pop	r0
     9d8:	df 91       	pop	r29
     9da:	cf 91       	pop	r28
     9dc:	08 95       	ret

000009de <addOnlineUser>:
u8 addOnlineUser()
{
     9de:	cf 93       	push	r28
     9e0:	df 93       	push	r29
     9e2:	cd b7       	in	r28, 0x3d	; 61
     9e4:	de b7       	in	r29, 0x3e	; 62
     9e6:	eb 97       	sbiw	r28, 0x3b	; 59
     9e8:	0f b6       	in	r0, 0x3f	; 63
     9ea:	f8 94       	cli
     9ec:	de bf       	out	0x3e, r29	; 62
     9ee:	0f be       	out	0x3f, r0	; 63
     9f0:	cd bf       	out	0x3d, r28	; 61
	//this function add online user by first checking if there is available space
	    u8 user[10];
		u8 pass[10];
		u8 i=0,location=0;
     9f2:	19 82       	std	Y+1, r1	; 0x01
     9f4:	1a 82       	std	Y+2, r1	; 0x02
		u8 correct=0;
     9f6:	1b 82       	std	Y+3, r1	; 0x03
        UART_sendString("online user= ");
     9f8:	8f e2       	ldi	r24, 0x2F	; 47
     9fa:	93 e0       	ldi	r25, 0x03	; 3
     9fc:	0e 94 8b 1a 	call	0x3516	; 0x3516 <UART_sendString>

		adminInput(user);
     a00:	ce 01       	movw	r24, r28
     a02:	88 96       	adiw	r24, 0x28	; 40
     a04:	0e 94 af 04 	call	0x95e	; 0x95e <adminInput>
		for ( i=101;i<200;i+=20)
     a08:	85 e6       	ldi	r24, 0x65	; 101
     a0a:	89 83       	std	Y+1, r24	; 0x01
     a0c:	ad c0       	rjmp	.+346    	; 0xb68 <addOnlineUser+0x18a>
		{
			if(EEPROM_readData(i)==255)
     a0e:	89 81       	ldd	r24, Y+1	; 0x01
     a10:	88 2f       	mov	r24, r24
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	0e 94 b2 0c 	call	0x1964	; 0x1964 <EEPROM_readData>
     a18:	8f 3f       	cpi	r24, 0xFF	; 255
     a1a:	09 f0       	breq	.+2      	; 0xa1e <addOnlineUser+0x40>
     a1c:	a2 c0       	rjmp	.+324    	; 0xb62 <addOnlineUser+0x184>
			{
				location=i;
     a1e:	89 81       	ldd	r24, Y+1	; 0x01
     a20:	8a 83       	std	Y+2, r24	; 0x02
				for(int l=0,j=i; l<charCounter; j++,l++)
     a22:	1d 82       	std	Y+5, r1	; 0x05
     a24:	1c 82       	std	Y+4, r1	; 0x04
     a26:	89 81       	ldd	r24, Y+1	; 0x01
     a28:	88 2f       	mov	r24, r24
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	9f 83       	std	Y+7, r25	; 0x07
     a2e:	8e 83       	std	Y+6, r24	; 0x06
     a30:	8a c0       	rjmp	.+276    	; 0xb46 <addOnlineUser+0x168>
				{
					EEPROM_writeData(user[l],j);
     a32:	4e 81       	ldd	r20, Y+6	; 0x06
     a34:	5f 81       	ldd	r21, Y+7	; 0x07
     a36:	9e 01       	movw	r18, r28
     a38:	28 5d       	subi	r18, 0xD8	; 216
     a3a:	3f 4f       	sbci	r19, 0xFF	; 255
     a3c:	8c 81       	ldd	r24, Y+4	; 0x04
     a3e:	9d 81       	ldd	r25, Y+5	; 0x05
     a40:	82 0f       	add	r24, r18
     a42:	93 1f       	adc	r25, r19
     a44:	fc 01       	movw	r30, r24
     a46:	80 81       	ld	r24, Z
     a48:	ba 01       	movw	r22, r20
     a4a:	0e 94 2a 0c 	call	0x1854	; 0x1854 <EEPROM_writeData>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	a0 ea       	ldi	r26, 0xA0	; 160
     a54:	b1 e4       	ldi	r27, 0x41	; 65
     a56:	88 8b       	std	Y+16, r24	; 0x10
     a58:	99 8b       	std	Y+17, r25	; 0x11
     a5a:	aa 8b       	std	Y+18, r26	; 0x12
     a5c:	bb 8b       	std	Y+19, r27	; 0x13

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     a5e:	20 e0       	ldi	r18, 0x00	; 0
     a60:	30 e0       	ldi	r19, 0x00	; 0
     a62:	4a e7       	ldi	r20, 0x7A	; 122
     a64:	55 e4       	ldi	r21, 0x45	; 69
     a66:	68 89       	ldd	r22, Y+16	; 0x10
     a68:	79 89       	ldd	r23, Y+17	; 0x11
     a6a:	8a 89       	ldd	r24, Y+18	; 0x12
     a6c:	9b 89       	ldd	r25, Y+19	; 0x13
     a6e:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__mulsf3>
     a72:	dc 01       	movw	r26, r24
     a74:	cb 01       	movw	r24, r22
     a76:	8c 8b       	std	Y+20, r24	; 0x14
     a78:	9d 8b       	std	Y+21, r25	; 0x15
     a7a:	ae 8b       	std	Y+22, r26	; 0x16
     a7c:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
     a7e:	20 e0       	ldi	r18, 0x00	; 0
     a80:	30 e0       	ldi	r19, 0x00	; 0
     a82:	40 e8       	ldi	r20, 0x80	; 128
     a84:	5f e3       	ldi	r21, 0x3F	; 63
     a86:	6c 89       	ldd	r22, Y+20	; 0x14
     a88:	7d 89       	ldd	r23, Y+21	; 0x15
     a8a:	8e 89       	ldd	r24, Y+22	; 0x16
     a8c:	9f 89       	ldd	r25, Y+23	; 0x17
     a8e:	0e 94 45 1b 	call	0x368a	; 0x368a <__cmpsf2>
     a92:	88 23       	and	r24, r24
     a94:	2c f4       	brge	.+10     	; 0xaa0 <addOnlineUser+0xc2>
		__ticks = 1;
     a96:	81 e0       	ldi	r24, 0x01	; 1
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	99 8f       	std	Y+25, r25	; 0x19
     a9c:	88 8f       	std	Y+24, r24	; 0x18
     a9e:	3f c0       	rjmp	.+126    	; 0xb1e <addOnlineUser+0x140>
	else if (__tmp > 65535)
     aa0:	20 e0       	ldi	r18, 0x00	; 0
     aa2:	3f ef       	ldi	r19, 0xFF	; 255
     aa4:	4f e7       	ldi	r20, 0x7F	; 127
     aa6:	57 e4       	ldi	r21, 0x47	; 71
     aa8:	6c 89       	ldd	r22, Y+20	; 0x14
     aaa:	7d 89       	ldd	r23, Y+21	; 0x15
     aac:	8e 89       	ldd	r24, Y+22	; 0x16
     aae:	9f 89       	ldd	r25, Y+23	; 0x17
     ab0:	0e 94 9d 1c 	call	0x393a	; 0x393a <__gesf2>
     ab4:	18 16       	cp	r1, r24
     ab6:	4c f5       	brge	.+82     	; 0xb0a <addOnlineUser+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ab8:	20 e0       	ldi	r18, 0x00	; 0
     aba:	30 e0       	ldi	r19, 0x00	; 0
     abc:	40 e2       	ldi	r20, 0x20	; 32
     abe:	51 e4       	ldi	r21, 0x41	; 65
     ac0:	68 89       	ldd	r22, Y+16	; 0x10
     ac2:	79 89       	ldd	r23, Y+17	; 0x11
     ac4:	8a 89       	ldd	r24, Y+18	; 0x12
     ac6:	9b 89       	ldd	r25, Y+19	; 0x13
     ac8:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__mulsf3>
     acc:	dc 01       	movw	r26, r24
     ace:	cb 01       	movw	r24, r22
     ad0:	bc 01       	movw	r22, r24
     ad2:	cd 01       	movw	r24, r26
     ad4:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__fixunssfsi>
     ad8:	dc 01       	movw	r26, r24
     ada:	cb 01       	movw	r24, r22
     adc:	99 8f       	std	Y+25, r25	; 0x19
     ade:	88 8f       	std	Y+24, r24	; 0x18
     ae0:	0f c0       	rjmp	.+30     	; 0xb00 <addOnlineUser+0x122>
     ae2:	80 e9       	ldi	r24, 0x90	; 144
     ae4:	91 e0       	ldi	r25, 0x01	; 1
     ae6:	9b 8f       	std	Y+27, r25	; 0x1b
     ae8:	8a 8f       	std	Y+26, r24	; 0x1a
     aea:	8a 8d       	ldd	r24, Y+26	; 0x1a
     aec:	9b 8d       	ldd	r25, Y+27	; 0x1b
     aee:	01 97       	sbiw	r24, 0x01	; 1
     af0:	f1 f7       	brne	.-4      	; 0xaee <addOnlineUser+0x110>
     af2:	9b 8f       	std	Y+27, r25	; 0x1b
     af4:	8a 8f       	std	Y+26, r24	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     af6:	88 8d       	ldd	r24, Y+24	; 0x18
     af8:	99 8d       	ldd	r25, Y+25	; 0x19
     afa:	01 97       	sbiw	r24, 0x01	; 1
     afc:	99 8f       	std	Y+25, r25	; 0x19
     afe:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b00:	88 8d       	ldd	r24, Y+24	; 0x18
     b02:	99 8d       	ldd	r25, Y+25	; 0x19
     b04:	89 2b       	or	r24, r25
     b06:	69 f7       	brne	.-38     	; 0xae2 <addOnlineUser+0x104>
     b08:	14 c0       	rjmp	.+40     	; 0xb32 <addOnlineUser+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b0a:	6c 89       	ldd	r22, Y+20	; 0x14
     b0c:	7d 89       	ldd	r23, Y+21	; 0x15
     b0e:	8e 89       	ldd	r24, Y+22	; 0x16
     b10:	9f 89       	ldd	r25, Y+23	; 0x17
     b12:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__fixunssfsi>
     b16:	dc 01       	movw	r26, r24
     b18:	cb 01       	movw	r24, r22
     b1a:	99 8f       	std	Y+25, r25	; 0x19
     b1c:	88 8f       	std	Y+24, r24	; 0x18
     b1e:	88 8d       	ldd	r24, Y+24	; 0x18
     b20:	99 8d       	ldd	r25, Y+25	; 0x19
     b22:	9d 8f       	std	Y+29, r25	; 0x1d
     b24:	8c 8f       	std	Y+28, r24	; 0x1c
     b26:	8c 8d       	ldd	r24, Y+28	; 0x1c
     b28:	9d 8d       	ldd	r25, Y+29	; 0x1d
     b2a:	01 97       	sbiw	r24, 0x01	; 1
     b2c:	f1 f7       	brne	.-4      	; 0xb2a <addOnlineUser+0x14c>
     b2e:	9d 8f       	std	Y+29, r25	; 0x1d
     b30:	8c 8f       	std	Y+28, r24	; 0x1c
		for ( i=101;i<200;i+=20)
		{
			if(EEPROM_readData(i)==255)
			{
				location=i;
				for(int l=0,j=i; l<charCounter; j++,l++)
     b32:	8e 81       	ldd	r24, Y+6	; 0x06
     b34:	9f 81       	ldd	r25, Y+7	; 0x07
     b36:	01 96       	adiw	r24, 0x01	; 1
     b38:	9f 83       	std	Y+7, r25	; 0x07
     b3a:	8e 83       	std	Y+6, r24	; 0x06
     b3c:	8c 81       	ldd	r24, Y+4	; 0x04
     b3e:	9d 81       	ldd	r25, Y+5	; 0x05
     b40:	01 96       	adiw	r24, 0x01	; 1
     b42:	9d 83       	std	Y+5, r25	; 0x05
     b44:	8c 83       	std	Y+4, r24	; 0x04
     b46:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <__data_end>
     b4a:	28 2f       	mov	r18, r24
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	8c 81       	ldd	r24, Y+4	; 0x04
     b50:	9d 81       	ldd	r25, Y+5	; 0x05
     b52:	82 17       	cp	r24, r18
     b54:	93 07       	cpc	r25, r19
     b56:	0c f4       	brge	.+2      	; 0xb5a <addOnlineUser+0x17c>
     b58:	6c cf       	rjmp	.-296    	; 0xa32 <addOnlineUser+0x54>
				{
					EEPROM_writeData(user[l],j);
					_delay_ms(20);
				}
				correct++;
     b5a:	8b 81       	ldd	r24, Y+3	; 0x03
     b5c:	8f 5f       	subi	r24, 0xFF	; 255
     b5e:	8b 83       	std	Y+3, r24	; 0x03
				break;
     b60:	07 c0       	rjmp	.+14     	; 0xb70 <addOnlineUser+0x192>
		u8 i=0,location=0;
		u8 correct=0;
        UART_sendString("online user= ");

		adminInput(user);
		for ( i=101;i<200;i+=20)
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	8c 5e       	subi	r24, 0xEC	; 236
     b66:	89 83       	std	Y+1, r24	; 0x01
     b68:	89 81       	ldd	r24, Y+1	; 0x01
     b6a:	88 3c       	cpi	r24, 0xC8	; 200
     b6c:	08 f4       	brcc	.+2      	; 0xb70 <addOnlineUser+0x192>
     b6e:	4f cf       	rjmp	.-354    	; 0xa0e <addOnlineUser+0x30>
				correct++;
				break;
				
			}
		}
		if (correct)
     b70:	8b 81       	ldd	r24, Y+3	; 0x03
     b72:	88 23       	and	r24, r24
     b74:	09 f4       	brne	.+2      	; 0xb78 <addOnlineUser+0x19a>
     b76:	a7 c0       	rjmp	.+334    	; 0xcc6 <addOnlineUser+0x2e8>
		{
		UART_sendString("online user pass= ");
     b78:	8d e3       	ldi	r24, 0x3D	; 61
     b7a:	93 e0       	ldi	r25, 0x03	; 3
     b7c:	0e 94 8b 1a 	call	0x3516	; 0x3516 <UART_sendString>
		adminInput(pass);
     b80:	ce 01       	movw	r24, r28
     b82:	c2 96       	adiw	r24, 0x32	; 50
     b84:	0e 94 af 04 	call	0x95e	; 0x95e <adminInput>
		location+=10;
     b88:	8a 81       	ldd	r24, Y+2	; 0x02
     b8a:	86 5f       	subi	r24, 0xF6	; 246
     b8c:	8a 83       	std	Y+2, r24	; 0x02
		for(int l=0,j=location; l<charCounter; j++,l++)
     b8e:	19 86       	std	Y+9, r1	; 0x09
     b90:	18 86       	std	Y+8, r1	; 0x08
     b92:	8a 81       	ldd	r24, Y+2	; 0x02
     b94:	88 2f       	mov	r24, r24
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	9b 87       	std	Y+11, r25	; 0x0b
     b9a:	8a 87       	std	Y+10, r24	; 0x0a
     b9c:	8a c0       	rjmp	.+276    	; 0xcb2 <addOnlineUser+0x2d4>
		{
			EEPROM_writeData(pass[l],j);
     b9e:	4a 85       	ldd	r20, Y+10	; 0x0a
     ba0:	5b 85       	ldd	r21, Y+11	; 0x0b
     ba2:	9e 01       	movw	r18, r28
     ba4:	2e 5c       	subi	r18, 0xCE	; 206
     ba6:	3f 4f       	sbci	r19, 0xFF	; 255
     ba8:	88 85       	ldd	r24, Y+8	; 0x08
     baa:	99 85       	ldd	r25, Y+9	; 0x09
     bac:	82 0f       	add	r24, r18
     bae:	93 1f       	adc	r25, r19
     bb0:	fc 01       	movw	r30, r24
     bb2:	80 81       	ld	r24, Z
     bb4:	ba 01       	movw	r22, r20
     bb6:	0e 94 2a 0c 	call	0x1854	; 0x1854 <EEPROM_writeData>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 ea       	ldi	r26, 0xA0	; 160
     bc0:	b1 e4       	ldi	r27, 0x41	; 65
     bc2:	8c 87       	std	Y+12, r24	; 0x0c
     bc4:	9d 87       	std	Y+13, r25	; 0x0d
     bc6:	ae 87       	std	Y+14, r26	; 0x0e
     bc8:	bf 87       	std	Y+15, r27	; 0x0f

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     bca:	20 e0       	ldi	r18, 0x00	; 0
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	4a e7       	ldi	r20, 0x7A	; 122
     bd0:	55 e4       	ldi	r21, 0x45	; 69
     bd2:	6c 85       	ldd	r22, Y+12	; 0x0c
     bd4:	7d 85       	ldd	r23, Y+13	; 0x0d
     bd6:	8e 85       	ldd	r24, Y+14	; 0x0e
     bd8:	9f 85       	ldd	r25, Y+15	; 0x0f
     bda:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__mulsf3>
     bde:	dc 01       	movw	r26, r24
     be0:	cb 01       	movw	r24, r22
     be2:	8e 8f       	std	Y+30, r24	; 0x1e
     be4:	9f 8f       	std	Y+31, r25	; 0x1f
     be6:	a8 a3       	std	Y+32, r26	; 0x20
     be8:	b9 a3       	std	Y+33, r27	; 0x21
	if (__tmp < 1.0)
     bea:	20 e0       	ldi	r18, 0x00	; 0
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	40 e8       	ldi	r20, 0x80	; 128
     bf0:	5f e3       	ldi	r21, 0x3F	; 63
     bf2:	6e 8d       	ldd	r22, Y+30	; 0x1e
     bf4:	7f 8d       	ldd	r23, Y+31	; 0x1f
     bf6:	88 a1       	ldd	r24, Y+32	; 0x20
     bf8:	99 a1       	ldd	r25, Y+33	; 0x21
     bfa:	0e 94 45 1b 	call	0x368a	; 0x368a <__cmpsf2>
     bfe:	88 23       	and	r24, r24
     c00:	2c f4       	brge	.+10     	; 0xc0c <addOnlineUser+0x22e>
		__ticks = 1;
     c02:	81 e0       	ldi	r24, 0x01	; 1
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	9b a3       	std	Y+35, r25	; 0x23
     c08:	8a a3       	std	Y+34, r24	; 0x22
     c0a:	3f c0       	rjmp	.+126    	; 0xc8a <addOnlineUser+0x2ac>
	else if (__tmp > 65535)
     c0c:	20 e0       	ldi	r18, 0x00	; 0
     c0e:	3f ef       	ldi	r19, 0xFF	; 255
     c10:	4f e7       	ldi	r20, 0x7F	; 127
     c12:	57 e4       	ldi	r21, 0x47	; 71
     c14:	6e 8d       	ldd	r22, Y+30	; 0x1e
     c16:	7f 8d       	ldd	r23, Y+31	; 0x1f
     c18:	88 a1       	ldd	r24, Y+32	; 0x20
     c1a:	99 a1       	ldd	r25, Y+33	; 0x21
     c1c:	0e 94 9d 1c 	call	0x393a	; 0x393a <__gesf2>
     c20:	18 16       	cp	r1, r24
     c22:	4c f5       	brge	.+82     	; 0xc76 <addOnlineUser+0x298>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c24:	20 e0       	ldi	r18, 0x00	; 0
     c26:	30 e0       	ldi	r19, 0x00	; 0
     c28:	40 e2       	ldi	r20, 0x20	; 32
     c2a:	51 e4       	ldi	r21, 0x41	; 65
     c2c:	6c 85       	ldd	r22, Y+12	; 0x0c
     c2e:	7d 85       	ldd	r23, Y+13	; 0x0d
     c30:	8e 85       	ldd	r24, Y+14	; 0x0e
     c32:	9f 85       	ldd	r25, Y+15	; 0x0f
     c34:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__mulsf3>
     c38:	dc 01       	movw	r26, r24
     c3a:	cb 01       	movw	r24, r22
     c3c:	bc 01       	movw	r22, r24
     c3e:	cd 01       	movw	r24, r26
     c40:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__fixunssfsi>
     c44:	dc 01       	movw	r26, r24
     c46:	cb 01       	movw	r24, r22
     c48:	9b a3       	std	Y+35, r25	; 0x23
     c4a:	8a a3       	std	Y+34, r24	; 0x22
     c4c:	0f c0       	rjmp	.+30     	; 0xc6c <addOnlineUser+0x28e>
     c4e:	80 e9       	ldi	r24, 0x90	; 144
     c50:	91 e0       	ldi	r25, 0x01	; 1
     c52:	9d a3       	std	Y+37, r25	; 0x25
     c54:	8c a3       	std	Y+36, r24	; 0x24
     c56:	8c a1       	ldd	r24, Y+36	; 0x24
     c58:	9d a1       	ldd	r25, Y+37	; 0x25
     c5a:	01 97       	sbiw	r24, 0x01	; 1
     c5c:	f1 f7       	brne	.-4      	; 0xc5a <addOnlineUser+0x27c>
     c5e:	9d a3       	std	Y+37, r25	; 0x25
     c60:	8c a3       	std	Y+36, r24	; 0x24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c62:	8a a1       	ldd	r24, Y+34	; 0x22
     c64:	9b a1       	ldd	r25, Y+35	; 0x23
     c66:	01 97       	sbiw	r24, 0x01	; 1
     c68:	9b a3       	std	Y+35, r25	; 0x23
     c6a:	8a a3       	std	Y+34, r24	; 0x22
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c6c:	8a a1       	ldd	r24, Y+34	; 0x22
     c6e:	9b a1       	ldd	r25, Y+35	; 0x23
     c70:	89 2b       	or	r24, r25
     c72:	69 f7       	brne	.-38     	; 0xc4e <addOnlineUser+0x270>
     c74:	14 c0       	rjmp	.+40     	; 0xc9e <addOnlineUser+0x2c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c76:	6e 8d       	ldd	r22, Y+30	; 0x1e
     c78:	7f 8d       	ldd	r23, Y+31	; 0x1f
     c7a:	88 a1       	ldd	r24, Y+32	; 0x20
     c7c:	99 a1       	ldd	r25, Y+33	; 0x21
     c7e:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__fixunssfsi>
     c82:	dc 01       	movw	r26, r24
     c84:	cb 01       	movw	r24, r22
     c86:	9b a3       	std	Y+35, r25	; 0x23
     c88:	8a a3       	std	Y+34, r24	; 0x22
     c8a:	8a a1       	ldd	r24, Y+34	; 0x22
     c8c:	9b a1       	ldd	r25, Y+35	; 0x23
     c8e:	9f a3       	std	Y+39, r25	; 0x27
     c90:	8e a3       	std	Y+38, r24	; 0x26
     c92:	8e a1       	ldd	r24, Y+38	; 0x26
     c94:	9f a1       	ldd	r25, Y+39	; 0x27
     c96:	01 97       	sbiw	r24, 0x01	; 1
     c98:	f1 f7       	brne	.-4      	; 0xc96 <addOnlineUser+0x2b8>
     c9a:	9f a3       	std	Y+39, r25	; 0x27
     c9c:	8e a3       	std	Y+38, r24	; 0x26
		if (correct)
		{
		UART_sendString("online user pass= ");
		adminInput(pass);
		location+=10;
		for(int l=0,j=location; l<charCounter; j++,l++)
     c9e:	8a 85       	ldd	r24, Y+10	; 0x0a
     ca0:	9b 85       	ldd	r25, Y+11	; 0x0b
     ca2:	01 96       	adiw	r24, 0x01	; 1
     ca4:	9b 87       	std	Y+11, r25	; 0x0b
     ca6:	8a 87       	std	Y+10, r24	; 0x0a
     ca8:	88 85       	ldd	r24, Y+8	; 0x08
     caa:	99 85       	ldd	r25, Y+9	; 0x09
     cac:	01 96       	adiw	r24, 0x01	; 1
     cae:	99 87       	std	Y+9, r25	; 0x09
     cb0:	88 87       	std	Y+8, r24	; 0x08
     cb2:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <__data_end>
     cb6:	28 2f       	mov	r18, r24
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	88 85       	ldd	r24, Y+8	; 0x08
     cbc:	99 85       	ldd	r25, Y+9	; 0x09
     cbe:	82 17       	cp	r24, r18
     cc0:	93 07       	cpc	r25, r19
     cc2:	0c f4       	brge	.+2      	; 0xcc6 <addOnlineUser+0x2e8>
     cc4:	6c cf       	rjmp	.-296    	; 0xb9e <addOnlineUser+0x1c0>
		{
			EEPROM_writeData(pass[l],j);
			_delay_ms(20);
		}
		}
		return correct;
     cc6:	8b 81       	ldd	r24, Y+3	; 0x03
		
	


}
     cc8:	eb 96       	adiw	r28, 0x3b	; 59
     cca:	0f b6       	in	r0, 0x3f	; 63
     ccc:	f8 94       	cli
     cce:	de bf       	out	0x3e, r29	; 62
     cd0:	0f be       	out	0x3f, r0	; 63
     cd2:	cd bf       	out	0x3d, r28	; 61
     cd4:	df 91       	pop	r29
     cd6:	cf 91       	pop	r28
     cd8:	08 95       	ret

00000cda <addOfflineUser>:
u8 addOfflineUser()
{
     cda:	cf 93       	push	r28
     cdc:	df 93       	push	r29
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
     ce2:	eb 97       	sbiw	r28, 0x3b	; 59
     ce4:	0f b6       	in	r0, 0x3f	; 63
     ce6:	f8 94       	cli
     ce8:	de bf       	out	0x3e, r29	; 62
     cea:	0f be       	out	0x3f, r0	; 63
     cec:	cd bf       	out	0x3d, r28	; 61
	//this function add offline user by first checking if there is available space
	u8 user[10];
	u8 pass[10];
	u8 i=0,location=0;
     cee:	19 82       	std	Y+1, r1	; 0x01
     cf0:	1a 82       	std	Y+2, r1	; 0x02
	u8 correct=0;
     cf2:	1b 82       	std	Y+3, r1	; 0x03
	UART_sendString("offline user= ");
     cf4:	80 e5       	ldi	r24, 0x50	; 80
     cf6:	93 e0       	ldi	r25, 0x03	; 3
     cf8:	0e 94 8b 1a 	call	0x3516	; 0x3516 <UART_sendString>

	adminInput(user);
     cfc:	ce 01       	movw	r24, r28
     cfe:	88 96       	adiw	r24, 0x28	; 40
     d00:	0e 94 af 04 	call	0x95e	; 0x95e <adminInput>
	for ( i=11;i<100;i+=20)
     d04:	8b e0       	ldi	r24, 0x0B	; 11
     d06:	89 83       	std	Y+1, r24	; 0x01
     d08:	ad c0       	rjmp	.+346    	; 0xe64 <addOfflineUser+0x18a>
	{
		if(EEPROM_readData(i)==255)
     d0a:	89 81       	ldd	r24, Y+1	; 0x01
     d0c:	88 2f       	mov	r24, r24
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	0e 94 b2 0c 	call	0x1964	; 0x1964 <EEPROM_readData>
     d14:	8f 3f       	cpi	r24, 0xFF	; 255
     d16:	09 f0       	breq	.+2      	; 0xd1a <addOfflineUser+0x40>
     d18:	a2 c0       	rjmp	.+324    	; 0xe5e <addOfflineUser+0x184>
		{
			location=i;
     d1a:	89 81       	ldd	r24, Y+1	; 0x01
     d1c:	8a 83       	std	Y+2, r24	; 0x02
			for(int l=0,j=i; l<charCounter; j++,l++)
     d1e:	1d 82       	std	Y+5, r1	; 0x05
     d20:	1c 82       	std	Y+4, r1	; 0x04
     d22:	89 81       	ldd	r24, Y+1	; 0x01
     d24:	88 2f       	mov	r24, r24
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	9f 83       	std	Y+7, r25	; 0x07
     d2a:	8e 83       	std	Y+6, r24	; 0x06
     d2c:	8a c0       	rjmp	.+276    	; 0xe42 <addOfflineUser+0x168>
			{
				EEPROM_writeData(user[l],j);
     d2e:	4e 81       	ldd	r20, Y+6	; 0x06
     d30:	5f 81       	ldd	r21, Y+7	; 0x07
     d32:	9e 01       	movw	r18, r28
     d34:	28 5d       	subi	r18, 0xD8	; 216
     d36:	3f 4f       	sbci	r19, 0xFF	; 255
     d38:	8c 81       	ldd	r24, Y+4	; 0x04
     d3a:	9d 81       	ldd	r25, Y+5	; 0x05
     d3c:	82 0f       	add	r24, r18
     d3e:	93 1f       	adc	r25, r19
     d40:	fc 01       	movw	r30, r24
     d42:	80 81       	ld	r24, Z
     d44:	ba 01       	movw	r22, r20
     d46:	0e 94 2a 0c 	call	0x1854	; 0x1854 <EEPROM_writeData>
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	a0 ea       	ldi	r26, 0xA0	; 160
     d50:	b1 e4       	ldi	r27, 0x41	; 65
     d52:	88 8b       	std	Y+16, r24	; 0x10
     d54:	99 8b       	std	Y+17, r25	; 0x11
     d56:	aa 8b       	std	Y+18, r26	; 0x12
     d58:	bb 8b       	std	Y+19, r27	; 0x13

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     d5a:	20 e0       	ldi	r18, 0x00	; 0
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	4a e7       	ldi	r20, 0x7A	; 122
     d60:	55 e4       	ldi	r21, 0x45	; 69
     d62:	68 89       	ldd	r22, Y+16	; 0x10
     d64:	79 89       	ldd	r23, Y+17	; 0x11
     d66:	8a 89       	ldd	r24, Y+18	; 0x12
     d68:	9b 89       	ldd	r25, Y+19	; 0x13
     d6a:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__mulsf3>
     d6e:	dc 01       	movw	r26, r24
     d70:	cb 01       	movw	r24, r22
     d72:	8c 8b       	std	Y+20, r24	; 0x14
     d74:	9d 8b       	std	Y+21, r25	; 0x15
     d76:	ae 8b       	std	Y+22, r26	; 0x16
     d78:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
     d7a:	20 e0       	ldi	r18, 0x00	; 0
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	40 e8       	ldi	r20, 0x80	; 128
     d80:	5f e3       	ldi	r21, 0x3F	; 63
     d82:	6c 89       	ldd	r22, Y+20	; 0x14
     d84:	7d 89       	ldd	r23, Y+21	; 0x15
     d86:	8e 89       	ldd	r24, Y+22	; 0x16
     d88:	9f 89       	ldd	r25, Y+23	; 0x17
     d8a:	0e 94 45 1b 	call	0x368a	; 0x368a <__cmpsf2>
     d8e:	88 23       	and	r24, r24
     d90:	2c f4       	brge	.+10     	; 0xd9c <addOfflineUser+0xc2>
		__ticks = 1;
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	99 8f       	std	Y+25, r25	; 0x19
     d98:	88 8f       	std	Y+24, r24	; 0x18
     d9a:	3f c0       	rjmp	.+126    	; 0xe1a <addOfflineUser+0x140>
	else if (__tmp > 65535)
     d9c:	20 e0       	ldi	r18, 0x00	; 0
     d9e:	3f ef       	ldi	r19, 0xFF	; 255
     da0:	4f e7       	ldi	r20, 0x7F	; 127
     da2:	57 e4       	ldi	r21, 0x47	; 71
     da4:	6c 89       	ldd	r22, Y+20	; 0x14
     da6:	7d 89       	ldd	r23, Y+21	; 0x15
     da8:	8e 89       	ldd	r24, Y+22	; 0x16
     daa:	9f 89       	ldd	r25, Y+23	; 0x17
     dac:	0e 94 9d 1c 	call	0x393a	; 0x393a <__gesf2>
     db0:	18 16       	cp	r1, r24
     db2:	4c f5       	brge	.+82     	; 0xe06 <addOfflineUser+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     db4:	20 e0       	ldi	r18, 0x00	; 0
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	40 e2       	ldi	r20, 0x20	; 32
     dba:	51 e4       	ldi	r21, 0x41	; 65
     dbc:	68 89       	ldd	r22, Y+16	; 0x10
     dbe:	79 89       	ldd	r23, Y+17	; 0x11
     dc0:	8a 89       	ldd	r24, Y+18	; 0x12
     dc2:	9b 89       	ldd	r25, Y+19	; 0x13
     dc4:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__mulsf3>
     dc8:	dc 01       	movw	r26, r24
     dca:	cb 01       	movw	r24, r22
     dcc:	bc 01       	movw	r22, r24
     dce:	cd 01       	movw	r24, r26
     dd0:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__fixunssfsi>
     dd4:	dc 01       	movw	r26, r24
     dd6:	cb 01       	movw	r24, r22
     dd8:	99 8f       	std	Y+25, r25	; 0x19
     dda:	88 8f       	std	Y+24, r24	; 0x18
     ddc:	0f c0       	rjmp	.+30     	; 0xdfc <addOfflineUser+0x122>
     dde:	80 e9       	ldi	r24, 0x90	; 144
     de0:	91 e0       	ldi	r25, 0x01	; 1
     de2:	9b 8f       	std	Y+27, r25	; 0x1b
     de4:	8a 8f       	std	Y+26, r24	; 0x1a
     de6:	8a 8d       	ldd	r24, Y+26	; 0x1a
     de8:	9b 8d       	ldd	r25, Y+27	; 0x1b
     dea:	01 97       	sbiw	r24, 0x01	; 1
     dec:	f1 f7       	brne	.-4      	; 0xdea <addOfflineUser+0x110>
     dee:	9b 8f       	std	Y+27, r25	; 0x1b
     df0:	8a 8f       	std	Y+26, r24	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     df2:	88 8d       	ldd	r24, Y+24	; 0x18
     df4:	99 8d       	ldd	r25, Y+25	; 0x19
     df6:	01 97       	sbiw	r24, 0x01	; 1
     df8:	99 8f       	std	Y+25, r25	; 0x19
     dfa:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dfc:	88 8d       	ldd	r24, Y+24	; 0x18
     dfe:	99 8d       	ldd	r25, Y+25	; 0x19
     e00:	89 2b       	or	r24, r25
     e02:	69 f7       	brne	.-38     	; 0xdde <addOfflineUser+0x104>
     e04:	14 c0       	rjmp	.+40     	; 0xe2e <addOfflineUser+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e06:	6c 89       	ldd	r22, Y+20	; 0x14
     e08:	7d 89       	ldd	r23, Y+21	; 0x15
     e0a:	8e 89       	ldd	r24, Y+22	; 0x16
     e0c:	9f 89       	ldd	r25, Y+23	; 0x17
     e0e:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__fixunssfsi>
     e12:	dc 01       	movw	r26, r24
     e14:	cb 01       	movw	r24, r22
     e16:	99 8f       	std	Y+25, r25	; 0x19
     e18:	88 8f       	std	Y+24, r24	; 0x18
     e1a:	88 8d       	ldd	r24, Y+24	; 0x18
     e1c:	99 8d       	ldd	r25, Y+25	; 0x19
     e1e:	9d 8f       	std	Y+29, r25	; 0x1d
     e20:	8c 8f       	std	Y+28, r24	; 0x1c
     e22:	8c 8d       	ldd	r24, Y+28	; 0x1c
     e24:	9d 8d       	ldd	r25, Y+29	; 0x1d
     e26:	01 97       	sbiw	r24, 0x01	; 1
     e28:	f1 f7       	brne	.-4      	; 0xe26 <addOfflineUser+0x14c>
     e2a:	9d 8f       	std	Y+29, r25	; 0x1d
     e2c:	8c 8f       	std	Y+28, r24	; 0x1c
	for ( i=11;i<100;i+=20)
	{
		if(EEPROM_readData(i)==255)
		{
			location=i;
			for(int l=0,j=i; l<charCounter; j++,l++)
     e2e:	8e 81       	ldd	r24, Y+6	; 0x06
     e30:	9f 81       	ldd	r25, Y+7	; 0x07
     e32:	01 96       	adiw	r24, 0x01	; 1
     e34:	9f 83       	std	Y+7, r25	; 0x07
     e36:	8e 83       	std	Y+6, r24	; 0x06
     e38:	8c 81       	ldd	r24, Y+4	; 0x04
     e3a:	9d 81       	ldd	r25, Y+5	; 0x05
     e3c:	01 96       	adiw	r24, 0x01	; 1
     e3e:	9d 83       	std	Y+5, r25	; 0x05
     e40:	8c 83       	std	Y+4, r24	; 0x04
     e42:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <__data_end>
     e46:	28 2f       	mov	r18, r24
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	8c 81       	ldd	r24, Y+4	; 0x04
     e4c:	9d 81       	ldd	r25, Y+5	; 0x05
     e4e:	82 17       	cp	r24, r18
     e50:	93 07       	cpc	r25, r19
     e52:	0c f4       	brge	.+2      	; 0xe56 <addOfflineUser+0x17c>
     e54:	6c cf       	rjmp	.-296    	; 0xd2e <addOfflineUser+0x54>
			{
				EEPROM_writeData(user[l],j);
				_delay_ms(20);
			}
			correct++;
     e56:	8b 81       	ldd	r24, Y+3	; 0x03
     e58:	8f 5f       	subi	r24, 0xFF	; 255
     e5a:	8b 83       	std	Y+3, r24	; 0x03
			break;
     e5c:	07 c0       	rjmp	.+14     	; 0xe6c <addOfflineUser+0x192>
	u8 i=0,location=0;
	u8 correct=0;
	UART_sendString("offline user= ");

	adminInput(user);
	for ( i=11;i<100;i+=20)
     e5e:	89 81       	ldd	r24, Y+1	; 0x01
     e60:	8c 5e       	subi	r24, 0xEC	; 236
     e62:	89 83       	std	Y+1, r24	; 0x01
     e64:	89 81       	ldd	r24, Y+1	; 0x01
     e66:	84 36       	cpi	r24, 0x64	; 100
     e68:	08 f4       	brcc	.+2      	; 0xe6c <addOfflineUser+0x192>
     e6a:	4f cf       	rjmp	.-354    	; 0xd0a <addOfflineUser+0x30>
			}
			correct++;
			break;
		}
	}
	if (correct)
     e6c:	8b 81       	ldd	r24, Y+3	; 0x03
     e6e:	88 23       	and	r24, r24
     e70:	09 f4       	brne	.+2      	; 0xe74 <addOfflineUser+0x19a>
     e72:	a7 c0       	rjmp	.+334    	; 0xfc2 <addOfflineUser+0x2e8>
	{
	
	UART_sendString("offline user pass= ");
     e74:	8f e5       	ldi	r24, 0x5F	; 95
     e76:	93 e0       	ldi	r25, 0x03	; 3
     e78:	0e 94 8b 1a 	call	0x3516	; 0x3516 <UART_sendString>
	adminInput(pass);
     e7c:	ce 01       	movw	r24, r28
     e7e:	c2 96       	adiw	r24, 0x32	; 50
     e80:	0e 94 af 04 	call	0x95e	; 0x95e <adminInput>
	location+=10;
     e84:	8a 81       	ldd	r24, Y+2	; 0x02
     e86:	86 5f       	subi	r24, 0xF6	; 246
     e88:	8a 83       	std	Y+2, r24	; 0x02
	for(int l=0,j=location; l<charCounter; j++,l++)
     e8a:	19 86       	std	Y+9, r1	; 0x09
     e8c:	18 86       	std	Y+8, r1	; 0x08
     e8e:	8a 81       	ldd	r24, Y+2	; 0x02
     e90:	88 2f       	mov	r24, r24
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	9b 87       	std	Y+11, r25	; 0x0b
     e96:	8a 87       	std	Y+10, r24	; 0x0a
     e98:	8a c0       	rjmp	.+276    	; 0xfae <addOfflineUser+0x2d4>
	{
		EEPROM_writeData(pass[l],j);
     e9a:	4a 85       	ldd	r20, Y+10	; 0x0a
     e9c:	5b 85       	ldd	r21, Y+11	; 0x0b
     e9e:	9e 01       	movw	r18, r28
     ea0:	2e 5c       	subi	r18, 0xCE	; 206
     ea2:	3f 4f       	sbci	r19, 0xFF	; 255
     ea4:	88 85       	ldd	r24, Y+8	; 0x08
     ea6:	99 85       	ldd	r25, Y+9	; 0x09
     ea8:	82 0f       	add	r24, r18
     eaa:	93 1f       	adc	r25, r19
     eac:	fc 01       	movw	r30, r24
     eae:	80 81       	ld	r24, Z
     eb0:	ba 01       	movw	r22, r20
     eb2:	0e 94 2a 0c 	call	0x1854	; 0x1854 <EEPROM_writeData>
     eb6:	80 e0       	ldi	r24, 0x00	; 0
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	a0 ea       	ldi	r26, 0xA0	; 160
     ebc:	b1 e4       	ldi	r27, 0x41	; 65
     ebe:	8c 87       	std	Y+12, r24	; 0x0c
     ec0:	9d 87       	std	Y+13, r25	; 0x0d
     ec2:	ae 87       	std	Y+14, r26	; 0x0e
     ec4:	bf 87       	std	Y+15, r27	; 0x0f

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     ec6:	20 e0       	ldi	r18, 0x00	; 0
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	4a e7       	ldi	r20, 0x7A	; 122
     ecc:	55 e4       	ldi	r21, 0x45	; 69
     ece:	6c 85       	ldd	r22, Y+12	; 0x0c
     ed0:	7d 85       	ldd	r23, Y+13	; 0x0d
     ed2:	8e 85       	ldd	r24, Y+14	; 0x0e
     ed4:	9f 85       	ldd	r25, Y+15	; 0x0f
     ed6:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__mulsf3>
     eda:	dc 01       	movw	r26, r24
     edc:	cb 01       	movw	r24, r22
     ede:	8e 8f       	std	Y+30, r24	; 0x1e
     ee0:	9f 8f       	std	Y+31, r25	; 0x1f
     ee2:	a8 a3       	std	Y+32, r26	; 0x20
     ee4:	b9 a3       	std	Y+33, r27	; 0x21
	if (__tmp < 1.0)
     ee6:	20 e0       	ldi	r18, 0x00	; 0
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	40 e8       	ldi	r20, 0x80	; 128
     eec:	5f e3       	ldi	r21, 0x3F	; 63
     eee:	6e 8d       	ldd	r22, Y+30	; 0x1e
     ef0:	7f 8d       	ldd	r23, Y+31	; 0x1f
     ef2:	88 a1       	ldd	r24, Y+32	; 0x20
     ef4:	99 a1       	ldd	r25, Y+33	; 0x21
     ef6:	0e 94 45 1b 	call	0x368a	; 0x368a <__cmpsf2>
     efa:	88 23       	and	r24, r24
     efc:	2c f4       	brge	.+10     	; 0xf08 <addOfflineUser+0x22e>
		__ticks = 1;
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	9b a3       	std	Y+35, r25	; 0x23
     f04:	8a a3       	std	Y+34, r24	; 0x22
     f06:	3f c0       	rjmp	.+126    	; 0xf86 <addOfflineUser+0x2ac>
	else if (__tmp > 65535)
     f08:	20 e0       	ldi	r18, 0x00	; 0
     f0a:	3f ef       	ldi	r19, 0xFF	; 255
     f0c:	4f e7       	ldi	r20, 0x7F	; 127
     f0e:	57 e4       	ldi	r21, 0x47	; 71
     f10:	6e 8d       	ldd	r22, Y+30	; 0x1e
     f12:	7f 8d       	ldd	r23, Y+31	; 0x1f
     f14:	88 a1       	ldd	r24, Y+32	; 0x20
     f16:	99 a1       	ldd	r25, Y+33	; 0x21
     f18:	0e 94 9d 1c 	call	0x393a	; 0x393a <__gesf2>
     f1c:	18 16       	cp	r1, r24
     f1e:	4c f5       	brge	.+82     	; 0xf72 <addOfflineUser+0x298>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f20:	20 e0       	ldi	r18, 0x00	; 0
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	40 e2       	ldi	r20, 0x20	; 32
     f26:	51 e4       	ldi	r21, 0x41	; 65
     f28:	6c 85       	ldd	r22, Y+12	; 0x0c
     f2a:	7d 85       	ldd	r23, Y+13	; 0x0d
     f2c:	8e 85       	ldd	r24, Y+14	; 0x0e
     f2e:	9f 85       	ldd	r25, Y+15	; 0x0f
     f30:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__mulsf3>
     f34:	dc 01       	movw	r26, r24
     f36:	cb 01       	movw	r24, r22
     f38:	bc 01       	movw	r22, r24
     f3a:	cd 01       	movw	r24, r26
     f3c:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__fixunssfsi>
     f40:	dc 01       	movw	r26, r24
     f42:	cb 01       	movw	r24, r22
     f44:	9b a3       	std	Y+35, r25	; 0x23
     f46:	8a a3       	std	Y+34, r24	; 0x22
     f48:	0f c0       	rjmp	.+30     	; 0xf68 <addOfflineUser+0x28e>
     f4a:	80 e9       	ldi	r24, 0x90	; 144
     f4c:	91 e0       	ldi	r25, 0x01	; 1
     f4e:	9d a3       	std	Y+37, r25	; 0x25
     f50:	8c a3       	std	Y+36, r24	; 0x24
     f52:	8c a1       	ldd	r24, Y+36	; 0x24
     f54:	9d a1       	ldd	r25, Y+37	; 0x25
     f56:	01 97       	sbiw	r24, 0x01	; 1
     f58:	f1 f7       	brne	.-4      	; 0xf56 <addOfflineUser+0x27c>
     f5a:	9d a3       	std	Y+37, r25	; 0x25
     f5c:	8c a3       	std	Y+36, r24	; 0x24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f5e:	8a a1       	ldd	r24, Y+34	; 0x22
     f60:	9b a1       	ldd	r25, Y+35	; 0x23
     f62:	01 97       	sbiw	r24, 0x01	; 1
     f64:	9b a3       	std	Y+35, r25	; 0x23
     f66:	8a a3       	std	Y+34, r24	; 0x22
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f68:	8a a1       	ldd	r24, Y+34	; 0x22
     f6a:	9b a1       	ldd	r25, Y+35	; 0x23
     f6c:	89 2b       	or	r24, r25
     f6e:	69 f7       	brne	.-38     	; 0xf4a <addOfflineUser+0x270>
     f70:	14 c0       	rjmp	.+40     	; 0xf9a <addOfflineUser+0x2c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f72:	6e 8d       	ldd	r22, Y+30	; 0x1e
     f74:	7f 8d       	ldd	r23, Y+31	; 0x1f
     f76:	88 a1       	ldd	r24, Y+32	; 0x20
     f78:	99 a1       	ldd	r25, Y+33	; 0x21
     f7a:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__fixunssfsi>
     f7e:	dc 01       	movw	r26, r24
     f80:	cb 01       	movw	r24, r22
     f82:	9b a3       	std	Y+35, r25	; 0x23
     f84:	8a a3       	std	Y+34, r24	; 0x22
     f86:	8a a1       	ldd	r24, Y+34	; 0x22
     f88:	9b a1       	ldd	r25, Y+35	; 0x23
     f8a:	9f a3       	std	Y+39, r25	; 0x27
     f8c:	8e a3       	std	Y+38, r24	; 0x26
     f8e:	8e a1       	ldd	r24, Y+38	; 0x26
     f90:	9f a1       	ldd	r25, Y+39	; 0x27
     f92:	01 97       	sbiw	r24, 0x01	; 1
     f94:	f1 f7       	brne	.-4      	; 0xf92 <addOfflineUser+0x2b8>
     f96:	9f a3       	std	Y+39, r25	; 0x27
     f98:	8e a3       	std	Y+38, r24	; 0x26
	{
	
	UART_sendString("offline user pass= ");
	adminInput(pass);
	location+=10;
	for(int l=0,j=location; l<charCounter; j++,l++)
     f9a:	8a 85       	ldd	r24, Y+10	; 0x0a
     f9c:	9b 85       	ldd	r25, Y+11	; 0x0b
     f9e:	01 96       	adiw	r24, 0x01	; 1
     fa0:	9b 87       	std	Y+11, r25	; 0x0b
     fa2:	8a 87       	std	Y+10, r24	; 0x0a
     fa4:	88 85       	ldd	r24, Y+8	; 0x08
     fa6:	99 85       	ldd	r25, Y+9	; 0x09
     fa8:	01 96       	adiw	r24, 0x01	; 1
     faa:	99 87       	std	Y+9, r25	; 0x09
     fac:	88 87       	std	Y+8, r24	; 0x08
     fae:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <__data_end>
     fb2:	28 2f       	mov	r18, r24
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	88 85       	ldd	r24, Y+8	; 0x08
     fb8:	99 85       	ldd	r25, Y+9	; 0x09
     fba:	82 17       	cp	r24, r18
     fbc:	93 07       	cpc	r25, r19
     fbe:	0c f4       	brge	.+2      	; 0xfc2 <addOfflineUser+0x2e8>
     fc0:	6c cf       	rjmp	.-296    	; 0xe9a <addOfflineUser+0x1c0>
	{
		EEPROM_writeData(pass[l],j);
		_delay_ms(20);
	}
	}
	return correct;
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
}
     fc4:	eb 96       	adiw	r28, 0x3b	; 59
     fc6:	0f b6       	in	r0, 0x3f	; 63
     fc8:	f8 94       	cli
     fca:	de bf       	out	0x3e, r29	; 62
     fcc:	0f be       	out	0x3f, r0	; 63
     fce:	cd bf       	out	0x3d, r28	; 61
     fd0:	df 91       	pop	r29
     fd2:	cf 91       	pop	r28
     fd4:	08 95       	ret

00000fd6 <deleteOnlineUser>:
u8 deleteOnlineUser()
{
     fd6:	1f 93       	push	r17
     fd8:	cf 93       	push	r28
     fda:	df 93       	push	r29
     fdc:	cd b7       	in	r28, 0x3d	; 61
     fde:	de b7       	in	r29, 0x3e	; 62
     fe0:	ec 97       	sbiw	r28, 0x3c	; 60
     fe2:	0f b6       	in	r0, 0x3f	; 63
     fe4:	f8 94       	cli
     fe6:	de bf       	out	0x3e, r29	; 62
     fe8:	0f be       	out	0x3f, r0	; 63
     fea:	cd bf       	out	0x3d, r28	; 61
	//this function is used to delete an online user  by first checking if the user exist
	u8 user[10];
	u8 location=0;
     fec:	19 82       	std	Y+1, r1	; 0x01
	u8 correct=0;
     fee:	1a 82       	std	Y+2, r1	; 0x02
	u8 flag=0;
     ff0:	1b 82       	std	Y+3, r1	; 0x03
	UART_sendString("user You wish to delete= ");
     ff2:	83 e7       	ldi	r24, 0x73	; 115
     ff4:	93 e0       	ldi	r25, 0x03	; 3
     ff6:	0e 94 8b 1a 	call	0x3516	; 0x3516 <UART_sendString>
	adminInput(user);
     ffa:	ce 01       	movw	r24, r28
     ffc:	c3 96       	adiw	r24, 0x33	; 51
     ffe:	0e 94 af 04 	call	0x95e	; 0x95e <adminInput>
	for (u8 i=101;i<200;i+=20)
    1002:	85 e6       	ldi	r24, 0x65	; 101
    1004:	8c 83       	std	Y+4, r24	; 0x04
    1006:	ba c0       	rjmp	.+372    	; 0x117c <deleteOnlineUser+0x1a6>
	{
		if(EEPROM_readData(i)!=255)
    1008:	8c 81       	ldd	r24, Y+4	; 0x04
    100a:	88 2f       	mov	r24, r24
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	0e 94 b2 0c 	call	0x1964	; 0x1964 <EEPROM_readData>
    1012:	8f 3f       	cpi	r24, 0xFF	; 255
    1014:	09 f4       	brne	.+2      	; 0x1018 <deleteOnlineUser+0x42>
    1016:	ac c0       	rjmp	.+344    	; 0x1170 <deleteOnlineUser+0x19a>
		{
			for(u8 l=0,j=i; l<charCounter; j++,l++)
    1018:	1d 82       	std	Y+5, r1	; 0x05
    101a:	8c 81       	ldd	r24, Y+4	; 0x04
    101c:	8e 83       	std	Y+6, r24	; 0x06
    101e:	a2 c0       	rjmp	.+324    	; 0x1164 <deleteOnlineUser+0x18e>
			{
				if (user[l]==EEPROM_readData(j))
    1020:	8d 81       	ldd	r24, Y+5	; 0x05
    1022:	88 2f       	mov	r24, r24
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	9e 01       	movw	r18, r28
    1028:	2d 5c       	subi	r18, 0xCD	; 205
    102a:	3f 4f       	sbci	r19, 0xFF	; 255
    102c:	82 0f       	add	r24, r18
    102e:	93 1f       	adc	r25, r19
    1030:	fc 01       	movw	r30, r24
    1032:	10 81       	ld	r17, Z
    1034:	8e 81       	ldd	r24, Y+6	; 0x06
    1036:	88 2f       	mov	r24, r24
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	0e 94 b2 0c 	call	0x1964	; 0x1964 <EEPROM_readData>
    103e:	18 17       	cp	r17, r24
    1040:	09 f0       	breq	.+2      	; 0x1044 <deleteOnlineUser+0x6e>
    1042:	89 c0       	rjmp	.+274    	; 0x1156 <deleteOnlineUser+0x180>
				{
					correct++;
    1044:	8a 81       	ldd	r24, Y+2	; 0x02
    1046:	8f 5f       	subi	r24, 0xFF	; 255
    1048:	8a 83       	std	Y+2, r24	; 0x02
					if (correct==charCounter)
    104a:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <__data_end>
    104e:	9a 81       	ldd	r25, Y+2	; 0x02
    1050:	98 17       	cp	r25, r24
    1052:	09 f0       	breq	.+2      	; 0x1056 <deleteOnlineUser+0x80>
    1054:	81 c0       	rjmp	.+258    	; 0x1158 <deleteOnlineUser+0x182>
					{
						if(EEPROM_readData(j+1)==255)
    1056:	8e 81       	ldd	r24, Y+6	; 0x06
    1058:	88 2f       	mov	r24, r24
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	01 96       	adiw	r24, 0x01	; 1
    105e:	0e 94 b2 0c 	call	0x1964	; 0x1964 <EEPROM_readData>
    1062:	8f 3f       	cpi	r24, 0xFF	; 255
    1064:	09 f0       	breq	.+2      	; 0x1068 <deleteOnlineUser+0x92>
    1066:	78 c0       	rjmp	.+240    	; 0x1158 <deleteOnlineUser+0x182>
						{
						location=i;
    1068:	8c 81       	ldd	r24, Y+4	; 0x04
    106a:	89 83       	std	Y+1, r24	; 0x01
    106c:	80 e0       	ldi	r24, 0x00	; 0
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	a6 e9       	ldi	r26, 0x96	; 150
    1072:	b3 e4       	ldi	r27, 0x43	; 67
    1074:	89 8b       	std	Y+17, r24	; 0x11
    1076:	9a 8b       	std	Y+18, r25	; 0x12
    1078:	ab 8b       	std	Y+19, r26	; 0x13
    107a:	bc 8b       	std	Y+20, r27	; 0x14

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    107c:	20 e0       	ldi	r18, 0x00	; 0
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	4a e7       	ldi	r20, 0x7A	; 122
    1082:	55 e4       	ldi	r21, 0x45	; 69
    1084:	69 89       	ldd	r22, Y+17	; 0x11
    1086:	7a 89       	ldd	r23, Y+18	; 0x12
    1088:	8b 89       	ldd	r24, Y+19	; 0x13
    108a:	9c 89       	ldd	r25, Y+20	; 0x14
    108c:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__mulsf3>
    1090:	dc 01       	movw	r26, r24
    1092:	cb 01       	movw	r24, r22
    1094:	8d 8b       	std	Y+21, r24	; 0x15
    1096:	9e 8b       	std	Y+22, r25	; 0x16
    1098:	af 8b       	std	Y+23, r26	; 0x17
    109a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    109c:	20 e0       	ldi	r18, 0x00	; 0
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	40 e8       	ldi	r20, 0x80	; 128
    10a2:	5f e3       	ldi	r21, 0x3F	; 63
    10a4:	6d 89       	ldd	r22, Y+21	; 0x15
    10a6:	7e 89       	ldd	r23, Y+22	; 0x16
    10a8:	8f 89       	ldd	r24, Y+23	; 0x17
    10aa:	98 8d       	ldd	r25, Y+24	; 0x18
    10ac:	0e 94 45 1b 	call	0x368a	; 0x368a <__cmpsf2>
    10b0:	88 23       	and	r24, r24
    10b2:	2c f4       	brge	.+10     	; 0x10be <deleteOnlineUser+0xe8>
		__ticks = 1;
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	9a 8f       	std	Y+26, r25	; 0x1a
    10ba:	89 8f       	std	Y+25, r24	; 0x19
    10bc:	3f c0       	rjmp	.+126    	; 0x113c <deleteOnlineUser+0x166>
	else if (__tmp > 65535)
    10be:	20 e0       	ldi	r18, 0x00	; 0
    10c0:	3f ef       	ldi	r19, 0xFF	; 255
    10c2:	4f e7       	ldi	r20, 0x7F	; 127
    10c4:	57 e4       	ldi	r21, 0x47	; 71
    10c6:	6d 89       	ldd	r22, Y+21	; 0x15
    10c8:	7e 89       	ldd	r23, Y+22	; 0x16
    10ca:	8f 89       	ldd	r24, Y+23	; 0x17
    10cc:	98 8d       	ldd	r25, Y+24	; 0x18
    10ce:	0e 94 9d 1c 	call	0x393a	; 0x393a <__gesf2>
    10d2:	18 16       	cp	r1, r24
    10d4:	4c f5       	brge	.+82     	; 0x1128 <deleteOnlineUser+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10d6:	20 e0       	ldi	r18, 0x00	; 0
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	40 e2       	ldi	r20, 0x20	; 32
    10dc:	51 e4       	ldi	r21, 0x41	; 65
    10de:	69 89       	ldd	r22, Y+17	; 0x11
    10e0:	7a 89       	ldd	r23, Y+18	; 0x12
    10e2:	8b 89       	ldd	r24, Y+19	; 0x13
    10e4:	9c 89       	ldd	r25, Y+20	; 0x14
    10e6:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__mulsf3>
    10ea:	dc 01       	movw	r26, r24
    10ec:	cb 01       	movw	r24, r22
    10ee:	bc 01       	movw	r22, r24
    10f0:	cd 01       	movw	r24, r26
    10f2:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__fixunssfsi>
    10f6:	dc 01       	movw	r26, r24
    10f8:	cb 01       	movw	r24, r22
    10fa:	9a 8f       	std	Y+26, r25	; 0x1a
    10fc:	89 8f       	std	Y+25, r24	; 0x19
    10fe:	0f c0       	rjmp	.+30     	; 0x111e <deleteOnlineUser+0x148>
    1100:	80 e9       	ldi	r24, 0x90	; 144
    1102:	91 e0       	ldi	r25, 0x01	; 1
    1104:	9c 8f       	std	Y+28, r25	; 0x1c
    1106:	8b 8f       	std	Y+27, r24	; 0x1b
    1108:	8b 8d       	ldd	r24, Y+27	; 0x1b
    110a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    110c:	01 97       	sbiw	r24, 0x01	; 1
    110e:	f1 f7       	brne	.-4      	; 0x110c <deleteOnlineUser+0x136>
    1110:	9c 8f       	std	Y+28, r25	; 0x1c
    1112:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1114:	89 8d       	ldd	r24, Y+25	; 0x19
    1116:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1118:	01 97       	sbiw	r24, 0x01	; 1
    111a:	9a 8f       	std	Y+26, r25	; 0x1a
    111c:	89 8f       	std	Y+25, r24	; 0x19
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    111e:	89 8d       	ldd	r24, Y+25	; 0x19
    1120:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1122:	89 2b       	or	r24, r25
    1124:	69 f7       	brne	.-38     	; 0x1100 <deleteOnlineUser+0x12a>
    1126:	14 c0       	rjmp	.+40     	; 0x1150 <deleteOnlineUser+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1128:	6d 89       	ldd	r22, Y+21	; 0x15
    112a:	7e 89       	ldd	r23, Y+22	; 0x16
    112c:	8f 89       	ldd	r24, Y+23	; 0x17
    112e:	98 8d       	ldd	r25, Y+24	; 0x18
    1130:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__fixunssfsi>
    1134:	dc 01       	movw	r26, r24
    1136:	cb 01       	movw	r24, r22
    1138:	9a 8f       	std	Y+26, r25	; 0x1a
    113a:	89 8f       	std	Y+25, r24	; 0x19
    113c:	89 8d       	ldd	r24, Y+25	; 0x19
    113e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1140:	9e 8f       	std	Y+30, r25	; 0x1e
    1142:	8d 8f       	std	Y+29, r24	; 0x1d
    1144:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1146:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1148:	01 97       	sbiw	r24, 0x01	; 1
    114a:	f1 f7       	brne	.-4      	; 0x1148 <deleteOnlineUser+0x172>
    114c:	9e 8f       	std	Y+30, r25	; 0x1e
    114e:	8d 8f       	std	Y+29, r24	; 0x1d
						_delay_ms(300);
						flag=1;
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	8b 83       	std	Y+3, r24	; 0x03
						break;
    1154:	0d c0       	rjmp	.+26     	; 0x1170 <deleteOnlineUser+0x19a>
						}
					}
				}
				else
				{
					correct=0;
    1156:	1a 82       	std	Y+2, r1	; 0x02
	adminInput(user);
	for (u8 i=101;i<200;i+=20)
	{
		if(EEPROM_readData(i)!=255)
		{
			for(u8 l=0,j=i; l<charCounter; j++,l++)
    1158:	8e 81       	ldd	r24, Y+6	; 0x06
    115a:	8f 5f       	subi	r24, 0xFF	; 255
    115c:	8e 83       	std	Y+6, r24	; 0x06
    115e:	8d 81       	ldd	r24, Y+5	; 0x05
    1160:	8f 5f       	subi	r24, 0xFF	; 255
    1162:	8d 83       	std	Y+5, r24	; 0x05
    1164:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <__data_end>
    1168:	9d 81       	ldd	r25, Y+5	; 0x05
    116a:	98 17       	cp	r25, r24
    116c:	08 f4       	brcc	.+2      	; 0x1170 <deleteOnlineUser+0x19a>
    116e:	58 cf       	rjmp	.-336    	; 0x1020 <deleteOnlineUser+0x4a>
				{
					correct=0;
				}
			}
		}
		if(flag==1){break;}
    1170:	8b 81       	ldd	r24, Y+3	; 0x03
    1172:	81 30       	cpi	r24, 0x01	; 1
    1174:	41 f0       	breq	.+16     	; 0x1186 <deleteOnlineUser+0x1b0>
	u8 location=0;
	u8 correct=0;
	u8 flag=0;
	UART_sendString("user You wish to delete= ");
	adminInput(user);
	for (u8 i=101;i<200;i+=20)
    1176:	8c 81       	ldd	r24, Y+4	; 0x04
    1178:	8c 5e       	subi	r24, 0xEC	; 236
    117a:	8c 83       	std	Y+4, r24	; 0x04
    117c:	8c 81       	ldd	r24, Y+4	; 0x04
    117e:	88 3c       	cpi	r24, 0xC8	; 200
    1180:	08 f4       	brcc	.+2      	; 0x1184 <deleteOnlineUser+0x1ae>
    1182:	42 cf       	rjmp	.-380    	; 0x1008 <deleteOnlineUser+0x32>
    1184:	01 c0       	rjmp	.+2      	; 0x1188 <deleteOnlineUser+0x1b2>
				{
					correct=0;
				}
			}
		}
		if(flag==1){break;}
    1186:	00 00       	nop
	}
	if (location!=0)
    1188:	89 81       	ldd	r24, Y+1	; 0x01
    118a:	88 23       	and	r24, r24
    118c:	09 f4       	brne	.+2      	; 0x1190 <deleteOnlineUser+0x1ba>
    118e:	03 c1       	rjmp	.+518    	; 0x1396 <deleteOnlineUser+0x3c0>
	{
		for(u8 l=0,j=location; l<10; j++,l++)
    1190:	1f 82       	std	Y+7, r1	; 0x07
    1192:	89 81       	ldd	r24, Y+1	; 0x01
    1194:	88 87       	std	Y+8, r24	; 0x08
    1196:	f9 c0       	rjmp	.+498    	; 0x138a <deleteOnlineUser+0x3b4>
		{
			EEPROM_writeData(255,j);
    1198:	88 85       	ldd	r24, Y+8	; 0x08
    119a:	88 2f       	mov	r24, r24
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	bc 01       	movw	r22, r24
    11a0:	8f ef       	ldi	r24, 0xFF	; 255
    11a2:	0e 94 2a 0c 	call	0x1854	; 0x1854 <EEPROM_writeData>
    11a6:	80 e0       	ldi	r24, 0x00	; 0
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	a0 ea       	ldi	r26, 0xA0	; 160
    11ac:	b1 e4       	ldi	r27, 0x41	; 65
    11ae:	8d 87       	std	Y+13, r24	; 0x0d
    11b0:	9e 87       	std	Y+14, r25	; 0x0e
    11b2:	af 87       	std	Y+15, r26	; 0x0f
    11b4:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    11b6:	20 e0       	ldi	r18, 0x00	; 0
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	4a e7       	ldi	r20, 0x7A	; 122
    11bc:	55 e4       	ldi	r21, 0x45	; 69
    11be:	6d 85       	ldd	r22, Y+13	; 0x0d
    11c0:	7e 85       	ldd	r23, Y+14	; 0x0e
    11c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    11c4:	98 89       	ldd	r25, Y+16	; 0x10
    11c6:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__mulsf3>
    11ca:	dc 01       	movw	r26, r24
    11cc:	cb 01       	movw	r24, r22
    11ce:	89 a7       	std	Y+41, r24	; 0x29
    11d0:	9a a7       	std	Y+42, r25	; 0x2a
    11d2:	ab a7       	std	Y+43, r26	; 0x2b
    11d4:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    11d6:	20 e0       	ldi	r18, 0x00	; 0
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	40 e8       	ldi	r20, 0x80	; 128
    11dc:	5f e3       	ldi	r21, 0x3F	; 63
    11de:	69 a5       	ldd	r22, Y+41	; 0x29
    11e0:	7a a5       	ldd	r23, Y+42	; 0x2a
    11e2:	8b a5       	ldd	r24, Y+43	; 0x2b
    11e4:	9c a5       	ldd	r25, Y+44	; 0x2c
    11e6:	0e 94 45 1b 	call	0x368a	; 0x368a <__cmpsf2>
    11ea:	88 23       	and	r24, r24
    11ec:	2c f4       	brge	.+10     	; 0x11f8 <deleteOnlineUser+0x222>
		__ticks = 1;
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	9e a7       	std	Y+46, r25	; 0x2e
    11f4:	8d a7       	std	Y+45, r24	; 0x2d
    11f6:	3f c0       	rjmp	.+126    	; 0x1276 <deleteOnlineUser+0x2a0>
	else if (__tmp > 65535)
    11f8:	20 e0       	ldi	r18, 0x00	; 0
    11fa:	3f ef       	ldi	r19, 0xFF	; 255
    11fc:	4f e7       	ldi	r20, 0x7F	; 127
    11fe:	57 e4       	ldi	r21, 0x47	; 71
    1200:	69 a5       	ldd	r22, Y+41	; 0x29
    1202:	7a a5       	ldd	r23, Y+42	; 0x2a
    1204:	8b a5       	ldd	r24, Y+43	; 0x2b
    1206:	9c a5       	ldd	r25, Y+44	; 0x2c
    1208:	0e 94 9d 1c 	call	0x393a	; 0x393a <__gesf2>
    120c:	18 16       	cp	r1, r24
    120e:	4c f5       	brge	.+82     	; 0x1262 <deleteOnlineUser+0x28c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1210:	20 e0       	ldi	r18, 0x00	; 0
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	40 e2       	ldi	r20, 0x20	; 32
    1216:	51 e4       	ldi	r21, 0x41	; 65
    1218:	6d 85       	ldd	r22, Y+13	; 0x0d
    121a:	7e 85       	ldd	r23, Y+14	; 0x0e
    121c:	8f 85       	ldd	r24, Y+15	; 0x0f
    121e:	98 89       	ldd	r25, Y+16	; 0x10
    1220:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__mulsf3>
    1224:	dc 01       	movw	r26, r24
    1226:	cb 01       	movw	r24, r22
    1228:	bc 01       	movw	r22, r24
    122a:	cd 01       	movw	r24, r26
    122c:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__fixunssfsi>
    1230:	dc 01       	movw	r26, r24
    1232:	cb 01       	movw	r24, r22
    1234:	9e a7       	std	Y+46, r25	; 0x2e
    1236:	8d a7       	std	Y+45, r24	; 0x2d
    1238:	0f c0       	rjmp	.+30     	; 0x1258 <deleteOnlineUser+0x282>
    123a:	80 e9       	ldi	r24, 0x90	; 144
    123c:	91 e0       	ldi	r25, 0x01	; 1
    123e:	98 ab       	std	Y+48, r25	; 0x30
    1240:	8f a7       	std	Y+47, r24	; 0x2f
    1242:	8f a5       	ldd	r24, Y+47	; 0x2f
    1244:	98 a9       	ldd	r25, Y+48	; 0x30
    1246:	01 97       	sbiw	r24, 0x01	; 1
    1248:	f1 f7       	brne	.-4      	; 0x1246 <deleteOnlineUser+0x270>
    124a:	98 ab       	std	Y+48, r25	; 0x30
    124c:	8f a7       	std	Y+47, r24	; 0x2f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    124e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1250:	9e a5       	ldd	r25, Y+46	; 0x2e
    1252:	01 97       	sbiw	r24, 0x01	; 1
    1254:	9e a7       	std	Y+46, r25	; 0x2e
    1256:	8d a7       	std	Y+45, r24	; 0x2d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1258:	8d a5       	ldd	r24, Y+45	; 0x2d
    125a:	9e a5       	ldd	r25, Y+46	; 0x2e
    125c:	89 2b       	or	r24, r25
    125e:	69 f7       	brne	.-38     	; 0x123a <deleteOnlineUser+0x264>
    1260:	14 c0       	rjmp	.+40     	; 0x128a <deleteOnlineUser+0x2b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1262:	69 a5       	ldd	r22, Y+41	; 0x29
    1264:	7a a5       	ldd	r23, Y+42	; 0x2a
    1266:	8b a5       	ldd	r24, Y+43	; 0x2b
    1268:	9c a5       	ldd	r25, Y+44	; 0x2c
    126a:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__fixunssfsi>
    126e:	dc 01       	movw	r26, r24
    1270:	cb 01       	movw	r24, r22
    1272:	9e a7       	std	Y+46, r25	; 0x2e
    1274:	8d a7       	std	Y+45, r24	; 0x2d
    1276:	8d a5       	ldd	r24, Y+45	; 0x2d
    1278:	9e a5       	ldd	r25, Y+46	; 0x2e
    127a:	9a ab       	std	Y+50, r25	; 0x32
    127c:	89 ab       	std	Y+49, r24	; 0x31
    127e:	89 a9       	ldd	r24, Y+49	; 0x31
    1280:	9a a9       	ldd	r25, Y+50	; 0x32
    1282:	01 97       	sbiw	r24, 0x01	; 1
    1284:	f1 f7       	brne	.-4      	; 0x1282 <deleteOnlineUser+0x2ac>
    1286:	9a ab       	std	Y+50, r25	; 0x32
    1288:	89 ab       	std	Y+49, r24	; 0x31
			_delay_ms(20);
			EEPROM_writeData(255,j+10);
    128a:	88 85       	ldd	r24, Y+8	; 0x08
    128c:	88 2f       	mov	r24, r24
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	0a 96       	adiw	r24, 0x0a	; 10
    1292:	bc 01       	movw	r22, r24
    1294:	8f ef       	ldi	r24, 0xFF	; 255
    1296:	0e 94 2a 0c 	call	0x1854	; 0x1854 <EEPROM_writeData>
    129a:	80 e0       	ldi	r24, 0x00	; 0
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	a0 ea       	ldi	r26, 0xA0	; 160
    12a0:	b1 e4       	ldi	r27, 0x41	; 65
    12a2:	89 87       	std	Y+9, r24	; 0x09
    12a4:	9a 87       	std	Y+10, r25	; 0x0a
    12a6:	ab 87       	std	Y+11, r26	; 0x0b
    12a8:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    12aa:	20 e0       	ldi	r18, 0x00	; 0
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	4a e7       	ldi	r20, 0x7A	; 122
    12b0:	55 e4       	ldi	r21, 0x45	; 69
    12b2:	69 85       	ldd	r22, Y+9	; 0x09
    12b4:	7a 85       	ldd	r23, Y+10	; 0x0a
    12b6:	8b 85       	ldd	r24, Y+11	; 0x0b
    12b8:	9c 85       	ldd	r25, Y+12	; 0x0c
    12ba:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__mulsf3>
    12be:	dc 01       	movw	r26, r24
    12c0:	cb 01       	movw	r24, r22
    12c2:	8f 8f       	std	Y+31, r24	; 0x1f
    12c4:	98 a3       	std	Y+32, r25	; 0x20
    12c6:	a9 a3       	std	Y+33, r26	; 0x21
    12c8:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    12ca:	20 e0       	ldi	r18, 0x00	; 0
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	40 e8       	ldi	r20, 0x80	; 128
    12d0:	5f e3       	ldi	r21, 0x3F	; 63
    12d2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    12d4:	78 a1       	ldd	r23, Y+32	; 0x20
    12d6:	89 a1       	ldd	r24, Y+33	; 0x21
    12d8:	9a a1       	ldd	r25, Y+34	; 0x22
    12da:	0e 94 45 1b 	call	0x368a	; 0x368a <__cmpsf2>
    12de:	88 23       	and	r24, r24
    12e0:	2c f4       	brge	.+10     	; 0x12ec <deleteOnlineUser+0x316>
		__ticks = 1;
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	9c a3       	std	Y+36, r25	; 0x24
    12e8:	8b a3       	std	Y+35, r24	; 0x23
    12ea:	3f c0       	rjmp	.+126    	; 0x136a <deleteOnlineUser+0x394>
	else if (__tmp > 65535)
    12ec:	20 e0       	ldi	r18, 0x00	; 0
    12ee:	3f ef       	ldi	r19, 0xFF	; 255
    12f0:	4f e7       	ldi	r20, 0x7F	; 127
    12f2:	57 e4       	ldi	r21, 0x47	; 71
    12f4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    12f6:	78 a1       	ldd	r23, Y+32	; 0x20
    12f8:	89 a1       	ldd	r24, Y+33	; 0x21
    12fa:	9a a1       	ldd	r25, Y+34	; 0x22
    12fc:	0e 94 9d 1c 	call	0x393a	; 0x393a <__gesf2>
    1300:	18 16       	cp	r1, r24
    1302:	4c f5       	brge	.+82     	; 0x1356 <deleteOnlineUser+0x380>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1304:	20 e0       	ldi	r18, 0x00	; 0
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	40 e2       	ldi	r20, 0x20	; 32
    130a:	51 e4       	ldi	r21, 0x41	; 65
    130c:	69 85       	ldd	r22, Y+9	; 0x09
    130e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1310:	8b 85       	ldd	r24, Y+11	; 0x0b
    1312:	9c 85       	ldd	r25, Y+12	; 0x0c
    1314:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__mulsf3>
    1318:	dc 01       	movw	r26, r24
    131a:	cb 01       	movw	r24, r22
    131c:	bc 01       	movw	r22, r24
    131e:	cd 01       	movw	r24, r26
    1320:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__fixunssfsi>
    1324:	dc 01       	movw	r26, r24
    1326:	cb 01       	movw	r24, r22
    1328:	9c a3       	std	Y+36, r25	; 0x24
    132a:	8b a3       	std	Y+35, r24	; 0x23
    132c:	0f c0       	rjmp	.+30     	; 0x134c <deleteOnlineUser+0x376>
    132e:	80 e9       	ldi	r24, 0x90	; 144
    1330:	91 e0       	ldi	r25, 0x01	; 1
    1332:	9e a3       	std	Y+38, r25	; 0x26
    1334:	8d a3       	std	Y+37, r24	; 0x25
    1336:	8d a1       	ldd	r24, Y+37	; 0x25
    1338:	9e a1       	ldd	r25, Y+38	; 0x26
    133a:	01 97       	sbiw	r24, 0x01	; 1
    133c:	f1 f7       	brne	.-4      	; 0x133a <deleteOnlineUser+0x364>
    133e:	9e a3       	std	Y+38, r25	; 0x26
    1340:	8d a3       	std	Y+37, r24	; 0x25
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1342:	8b a1       	ldd	r24, Y+35	; 0x23
    1344:	9c a1       	ldd	r25, Y+36	; 0x24
    1346:	01 97       	sbiw	r24, 0x01	; 1
    1348:	9c a3       	std	Y+36, r25	; 0x24
    134a:	8b a3       	std	Y+35, r24	; 0x23
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    134c:	8b a1       	ldd	r24, Y+35	; 0x23
    134e:	9c a1       	ldd	r25, Y+36	; 0x24
    1350:	89 2b       	or	r24, r25
    1352:	69 f7       	brne	.-38     	; 0x132e <deleteOnlineUser+0x358>
    1354:	14 c0       	rjmp	.+40     	; 0x137e <deleteOnlineUser+0x3a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1356:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1358:	78 a1       	ldd	r23, Y+32	; 0x20
    135a:	89 a1       	ldd	r24, Y+33	; 0x21
    135c:	9a a1       	ldd	r25, Y+34	; 0x22
    135e:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__fixunssfsi>
    1362:	dc 01       	movw	r26, r24
    1364:	cb 01       	movw	r24, r22
    1366:	9c a3       	std	Y+36, r25	; 0x24
    1368:	8b a3       	std	Y+35, r24	; 0x23
    136a:	8b a1       	ldd	r24, Y+35	; 0x23
    136c:	9c a1       	ldd	r25, Y+36	; 0x24
    136e:	98 a7       	std	Y+40, r25	; 0x28
    1370:	8f a3       	std	Y+39, r24	; 0x27
    1372:	8f a1       	ldd	r24, Y+39	; 0x27
    1374:	98 a5       	ldd	r25, Y+40	; 0x28
    1376:	01 97       	sbiw	r24, 0x01	; 1
    1378:	f1 f7       	brne	.-4      	; 0x1376 <deleteOnlineUser+0x3a0>
    137a:	98 a7       	std	Y+40, r25	; 0x28
    137c:	8f a3       	std	Y+39, r24	; 0x27
		}
		if(flag==1){break;}
	}
	if (location!=0)
	{
		for(u8 l=0,j=location; l<10; j++,l++)
    137e:	88 85       	ldd	r24, Y+8	; 0x08
    1380:	8f 5f       	subi	r24, 0xFF	; 255
    1382:	88 87       	std	Y+8, r24	; 0x08
    1384:	8f 81       	ldd	r24, Y+7	; 0x07
    1386:	8f 5f       	subi	r24, 0xFF	; 255
    1388:	8f 83       	std	Y+7, r24	; 0x07
    138a:	8f 81       	ldd	r24, Y+7	; 0x07
    138c:	8a 30       	cpi	r24, 0x0A	; 10
    138e:	08 f4       	brcc	.+2      	; 0x1392 <deleteOnlineUser+0x3bc>
    1390:	03 cf       	rjmp	.-506    	; 0x1198 <deleteOnlineUser+0x1c2>
			EEPROM_writeData(255,j);
			_delay_ms(20);
			EEPROM_writeData(255,j+10);
			_delay_ms(20);
		}
		return 1;
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	01 c0       	rjmp	.+2      	; 0x1398 <deleteOnlineUser+0x3c2>
	}
	return 0;
    1396:	80 e0       	ldi	r24, 0x00	; 0

}
    1398:	ec 96       	adiw	r28, 0x3c	; 60
    139a:	0f b6       	in	r0, 0x3f	; 63
    139c:	f8 94       	cli
    139e:	de bf       	out	0x3e, r29	; 62
    13a0:	0f be       	out	0x3f, r0	; 63
    13a2:	cd bf       	out	0x3d, r28	; 61
    13a4:	df 91       	pop	r29
    13a6:	cf 91       	pop	r28
    13a8:	1f 91       	pop	r17
    13aa:	08 95       	ret

000013ac <deleteOfflineUser>:
u8 deleteOfflineUser()
{
    13ac:	1f 93       	push	r17
    13ae:	cf 93       	push	r28
    13b0:	df 93       	push	r29
    13b2:	cd b7       	in	r28, 0x3d	; 61
    13b4:	de b7       	in	r29, 0x3e	; 62
    13b6:	ec 97       	sbiw	r28, 0x3c	; 60
    13b8:	0f b6       	in	r0, 0x3f	; 63
    13ba:	f8 94       	cli
    13bc:	de bf       	out	0x3e, r29	; 62
    13be:	0f be       	out	0x3f, r0	; 63
    13c0:	cd bf       	out	0x3d, r28	; 61
	//this function is used to delete an offline user  by first checking if the user exist
	u8 user[10];
	u8 location=0;
    13c2:	19 82       	std	Y+1, r1	; 0x01
	u8 correct=0;
    13c4:	1a 82       	std	Y+2, r1	; 0x02
	u8 flag=0;
    13c6:	1b 82       	std	Y+3, r1	; 0x03
	UART_sendString("user You wish to delete= ");
    13c8:	83 e7       	ldi	r24, 0x73	; 115
    13ca:	93 e0       	ldi	r25, 0x03	; 3
    13cc:	0e 94 8b 1a 	call	0x3516	; 0x3516 <UART_sendString>
	adminInput(user);
    13d0:	ce 01       	movw	r24, r28
    13d2:	c3 96       	adiw	r24, 0x33	; 51
    13d4:	0e 94 af 04 	call	0x95e	; 0x95e <adminInput>
	for (u8 i=11;i<100;i+=20)
    13d8:	8b e0       	ldi	r24, 0x0B	; 11
    13da:	8c 83       	std	Y+4, r24	; 0x04
    13dc:	ba c0       	rjmp	.+372    	; 0x1552 <deleteOfflineUser+0x1a6>
	{
		if(EEPROM_readData(i)!=255)
    13de:	8c 81       	ldd	r24, Y+4	; 0x04
    13e0:	88 2f       	mov	r24, r24
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	0e 94 b2 0c 	call	0x1964	; 0x1964 <EEPROM_readData>
    13e8:	8f 3f       	cpi	r24, 0xFF	; 255
    13ea:	09 f4       	brne	.+2      	; 0x13ee <deleteOfflineUser+0x42>
    13ec:	ac c0       	rjmp	.+344    	; 0x1546 <deleteOfflineUser+0x19a>
		{
			for(u8 l=0,j=i; l<charCounter; j++,l++)
    13ee:	1d 82       	std	Y+5, r1	; 0x05
    13f0:	8c 81       	ldd	r24, Y+4	; 0x04
    13f2:	8e 83       	std	Y+6, r24	; 0x06
    13f4:	a2 c0       	rjmp	.+324    	; 0x153a <deleteOfflineUser+0x18e>
			{
				if (user[l]==EEPROM_readData(j))
    13f6:	8d 81       	ldd	r24, Y+5	; 0x05
    13f8:	88 2f       	mov	r24, r24
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	9e 01       	movw	r18, r28
    13fe:	2d 5c       	subi	r18, 0xCD	; 205
    1400:	3f 4f       	sbci	r19, 0xFF	; 255
    1402:	82 0f       	add	r24, r18
    1404:	93 1f       	adc	r25, r19
    1406:	fc 01       	movw	r30, r24
    1408:	10 81       	ld	r17, Z
    140a:	8e 81       	ldd	r24, Y+6	; 0x06
    140c:	88 2f       	mov	r24, r24
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	0e 94 b2 0c 	call	0x1964	; 0x1964 <EEPROM_readData>
    1414:	18 17       	cp	r17, r24
    1416:	09 f0       	breq	.+2      	; 0x141a <deleteOfflineUser+0x6e>
    1418:	89 c0       	rjmp	.+274    	; 0x152c <deleteOfflineUser+0x180>
				{
					correct++;
    141a:	8a 81       	ldd	r24, Y+2	; 0x02
    141c:	8f 5f       	subi	r24, 0xFF	; 255
    141e:	8a 83       	std	Y+2, r24	; 0x02
					if (correct==charCounter)
    1420:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <__data_end>
    1424:	9a 81       	ldd	r25, Y+2	; 0x02
    1426:	98 17       	cp	r25, r24
    1428:	09 f0       	breq	.+2      	; 0x142c <deleteOfflineUser+0x80>
    142a:	81 c0       	rjmp	.+258    	; 0x152e <deleteOfflineUser+0x182>
					{
						if(EEPROM_readData(j+1)==255)
    142c:	8e 81       	ldd	r24, Y+6	; 0x06
    142e:	88 2f       	mov	r24, r24
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	01 96       	adiw	r24, 0x01	; 1
    1434:	0e 94 b2 0c 	call	0x1964	; 0x1964 <EEPROM_readData>
    1438:	8f 3f       	cpi	r24, 0xFF	; 255
    143a:	09 f0       	breq	.+2      	; 0x143e <deleteOfflineUser+0x92>
    143c:	78 c0       	rjmp	.+240    	; 0x152e <deleteOfflineUser+0x182>
						{
							location=i;
    143e:	8c 81       	ldd	r24, Y+4	; 0x04
    1440:	89 83       	std	Y+1, r24	; 0x01
    1442:	80 e0       	ldi	r24, 0x00	; 0
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	a6 e9       	ldi	r26, 0x96	; 150
    1448:	b3 e4       	ldi	r27, 0x43	; 67
    144a:	89 8b       	std	Y+17, r24	; 0x11
    144c:	9a 8b       	std	Y+18, r25	; 0x12
    144e:	ab 8b       	std	Y+19, r26	; 0x13
    1450:	bc 8b       	std	Y+20, r27	; 0x14

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1452:	20 e0       	ldi	r18, 0x00	; 0
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	4a e7       	ldi	r20, 0x7A	; 122
    1458:	55 e4       	ldi	r21, 0x45	; 69
    145a:	69 89       	ldd	r22, Y+17	; 0x11
    145c:	7a 89       	ldd	r23, Y+18	; 0x12
    145e:	8b 89       	ldd	r24, Y+19	; 0x13
    1460:	9c 89       	ldd	r25, Y+20	; 0x14
    1462:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__mulsf3>
    1466:	dc 01       	movw	r26, r24
    1468:	cb 01       	movw	r24, r22
    146a:	8d 8b       	std	Y+21, r24	; 0x15
    146c:	9e 8b       	std	Y+22, r25	; 0x16
    146e:	af 8b       	std	Y+23, r26	; 0x17
    1470:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1472:	20 e0       	ldi	r18, 0x00	; 0
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	40 e8       	ldi	r20, 0x80	; 128
    1478:	5f e3       	ldi	r21, 0x3F	; 63
    147a:	6d 89       	ldd	r22, Y+21	; 0x15
    147c:	7e 89       	ldd	r23, Y+22	; 0x16
    147e:	8f 89       	ldd	r24, Y+23	; 0x17
    1480:	98 8d       	ldd	r25, Y+24	; 0x18
    1482:	0e 94 45 1b 	call	0x368a	; 0x368a <__cmpsf2>
    1486:	88 23       	and	r24, r24
    1488:	2c f4       	brge	.+10     	; 0x1494 <deleteOfflineUser+0xe8>
		__ticks = 1;
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	9a 8f       	std	Y+26, r25	; 0x1a
    1490:	89 8f       	std	Y+25, r24	; 0x19
    1492:	3f c0       	rjmp	.+126    	; 0x1512 <deleteOfflineUser+0x166>
	else if (__tmp > 65535)
    1494:	20 e0       	ldi	r18, 0x00	; 0
    1496:	3f ef       	ldi	r19, 0xFF	; 255
    1498:	4f e7       	ldi	r20, 0x7F	; 127
    149a:	57 e4       	ldi	r21, 0x47	; 71
    149c:	6d 89       	ldd	r22, Y+21	; 0x15
    149e:	7e 89       	ldd	r23, Y+22	; 0x16
    14a0:	8f 89       	ldd	r24, Y+23	; 0x17
    14a2:	98 8d       	ldd	r25, Y+24	; 0x18
    14a4:	0e 94 9d 1c 	call	0x393a	; 0x393a <__gesf2>
    14a8:	18 16       	cp	r1, r24
    14aa:	4c f5       	brge	.+82     	; 0x14fe <deleteOfflineUser+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14ac:	20 e0       	ldi	r18, 0x00	; 0
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	40 e2       	ldi	r20, 0x20	; 32
    14b2:	51 e4       	ldi	r21, 0x41	; 65
    14b4:	69 89       	ldd	r22, Y+17	; 0x11
    14b6:	7a 89       	ldd	r23, Y+18	; 0x12
    14b8:	8b 89       	ldd	r24, Y+19	; 0x13
    14ba:	9c 89       	ldd	r25, Y+20	; 0x14
    14bc:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__mulsf3>
    14c0:	dc 01       	movw	r26, r24
    14c2:	cb 01       	movw	r24, r22
    14c4:	bc 01       	movw	r22, r24
    14c6:	cd 01       	movw	r24, r26
    14c8:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__fixunssfsi>
    14cc:	dc 01       	movw	r26, r24
    14ce:	cb 01       	movw	r24, r22
    14d0:	9a 8f       	std	Y+26, r25	; 0x1a
    14d2:	89 8f       	std	Y+25, r24	; 0x19
    14d4:	0f c0       	rjmp	.+30     	; 0x14f4 <deleteOfflineUser+0x148>
    14d6:	80 e9       	ldi	r24, 0x90	; 144
    14d8:	91 e0       	ldi	r25, 0x01	; 1
    14da:	9c 8f       	std	Y+28, r25	; 0x1c
    14dc:	8b 8f       	std	Y+27, r24	; 0x1b
    14de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14e2:	01 97       	sbiw	r24, 0x01	; 1
    14e4:	f1 f7       	brne	.-4      	; 0x14e2 <deleteOfflineUser+0x136>
    14e6:	9c 8f       	std	Y+28, r25	; 0x1c
    14e8:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14ea:	89 8d       	ldd	r24, Y+25	; 0x19
    14ec:	9a 8d       	ldd	r25, Y+26	; 0x1a
    14ee:	01 97       	sbiw	r24, 0x01	; 1
    14f0:	9a 8f       	std	Y+26, r25	; 0x1a
    14f2:	89 8f       	std	Y+25, r24	; 0x19
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14f4:	89 8d       	ldd	r24, Y+25	; 0x19
    14f6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    14f8:	89 2b       	or	r24, r25
    14fa:	69 f7       	brne	.-38     	; 0x14d6 <deleteOfflineUser+0x12a>
    14fc:	14 c0       	rjmp	.+40     	; 0x1526 <deleteOfflineUser+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14fe:	6d 89       	ldd	r22, Y+21	; 0x15
    1500:	7e 89       	ldd	r23, Y+22	; 0x16
    1502:	8f 89       	ldd	r24, Y+23	; 0x17
    1504:	98 8d       	ldd	r25, Y+24	; 0x18
    1506:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__fixunssfsi>
    150a:	dc 01       	movw	r26, r24
    150c:	cb 01       	movw	r24, r22
    150e:	9a 8f       	std	Y+26, r25	; 0x1a
    1510:	89 8f       	std	Y+25, r24	; 0x19
    1512:	89 8d       	ldd	r24, Y+25	; 0x19
    1514:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1516:	9e 8f       	std	Y+30, r25	; 0x1e
    1518:	8d 8f       	std	Y+29, r24	; 0x1d
    151a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    151c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    151e:	01 97       	sbiw	r24, 0x01	; 1
    1520:	f1 f7       	brne	.-4      	; 0x151e <deleteOfflineUser+0x172>
    1522:	9e 8f       	std	Y+30, r25	; 0x1e
    1524:	8d 8f       	std	Y+29, r24	; 0x1d
							_delay_ms(300);
							flag=1;
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	8b 83       	std	Y+3, r24	; 0x03
							break;
    152a:	0d c0       	rjmp	.+26     	; 0x1546 <deleteOfflineUser+0x19a>
						}
					}
				}
				else
				{
					correct=0;
    152c:	1a 82       	std	Y+2, r1	; 0x02
	adminInput(user);
	for (u8 i=11;i<100;i+=20)
	{
		if(EEPROM_readData(i)!=255)
		{
			for(u8 l=0,j=i; l<charCounter; j++,l++)
    152e:	8e 81       	ldd	r24, Y+6	; 0x06
    1530:	8f 5f       	subi	r24, 0xFF	; 255
    1532:	8e 83       	std	Y+6, r24	; 0x06
    1534:	8d 81       	ldd	r24, Y+5	; 0x05
    1536:	8f 5f       	subi	r24, 0xFF	; 255
    1538:	8d 83       	std	Y+5, r24	; 0x05
    153a:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <__data_end>
    153e:	9d 81       	ldd	r25, Y+5	; 0x05
    1540:	98 17       	cp	r25, r24
    1542:	08 f4       	brcc	.+2      	; 0x1546 <deleteOfflineUser+0x19a>
    1544:	58 cf       	rjmp	.-336    	; 0x13f6 <deleteOfflineUser+0x4a>
				{
					correct=0;
				}
			}
		}
		if(flag==1){break;}
    1546:	8b 81       	ldd	r24, Y+3	; 0x03
    1548:	81 30       	cpi	r24, 0x01	; 1
    154a:	41 f0       	breq	.+16     	; 0x155c <deleteOfflineUser+0x1b0>
	u8 location=0;
	u8 correct=0;
	u8 flag=0;
	UART_sendString("user You wish to delete= ");
	adminInput(user);
	for (u8 i=11;i<100;i+=20)
    154c:	8c 81       	ldd	r24, Y+4	; 0x04
    154e:	8c 5e       	subi	r24, 0xEC	; 236
    1550:	8c 83       	std	Y+4, r24	; 0x04
    1552:	8c 81       	ldd	r24, Y+4	; 0x04
    1554:	84 36       	cpi	r24, 0x64	; 100
    1556:	08 f4       	brcc	.+2      	; 0x155a <deleteOfflineUser+0x1ae>
    1558:	42 cf       	rjmp	.-380    	; 0x13de <deleteOfflineUser+0x32>
    155a:	01 c0       	rjmp	.+2      	; 0x155e <deleteOfflineUser+0x1b2>
				{
					correct=0;
				}
			}
		}
		if(flag==1){break;}
    155c:	00 00       	nop
	}
	if (location!=0)
    155e:	89 81       	ldd	r24, Y+1	; 0x01
    1560:	88 23       	and	r24, r24
    1562:	09 f4       	brne	.+2      	; 0x1566 <deleteOfflineUser+0x1ba>
    1564:	03 c1       	rjmp	.+518    	; 0x176c <deleteOfflineUser+0x3c0>
	{
		for(u8 l=0,j=location; l<10; j++,l++)
    1566:	1f 82       	std	Y+7, r1	; 0x07
    1568:	89 81       	ldd	r24, Y+1	; 0x01
    156a:	88 87       	std	Y+8, r24	; 0x08
    156c:	f9 c0       	rjmp	.+498    	; 0x1760 <deleteOfflineUser+0x3b4>
		{
			EEPROM_writeData(255,j);
    156e:	88 85       	ldd	r24, Y+8	; 0x08
    1570:	88 2f       	mov	r24, r24
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	bc 01       	movw	r22, r24
    1576:	8f ef       	ldi	r24, 0xFF	; 255
    1578:	0e 94 2a 0c 	call	0x1854	; 0x1854 <EEPROM_writeData>
    157c:	80 e0       	ldi	r24, 0x00	; 0
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	a0 ea       	ldi	r26, 0xA0	; 160
    1582:	b1 e4       	ldi	r27, 0x41	; 65
    1584:	8d 87       	std	Y+13, r24	; 0x0d
    1586:	9e 87       	std	Y+14, r25	; 0x0e
    1588:	af 87       	std	Y+15, r26	; 0x0f
    158a:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    158c:	20 e0       	ldi	r18, 0x00	; 0
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	4a e7       	ldi	r20, 0x7A	; 122
    1592:	55 e4       	ldi	r21, 0x45	; 69
    1594:	6d 85       	ldd	r22, Y+13	; 0x0d
    1596:	7e 85       	ldd	r23, Y+14	; 0x0e
    1598:	8f 85       	ldd	r24, Y+15	; 0x0f
    159a:	98 89       	ldd	r25, Y+16	; 0x10
    159c:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__mulsf3>
    15a0:	dc 01       	movw	r26, r24
    15a2:	cb 01       	movw	r24, r22
    15a4:	89 a7       	std	Y+41, r24	; 0x29
    15a6:	9a a7       	std	Y+42, r25	; 0x2a
    15a8:	ab a7       	std	Y+43, r26	; 0x2b
    15aa:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    15ac:	20 e0       	ldi	r18, 0x00	; 0
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	40 e8       	ldi	r20, 0x80	; 128
    15b2:	5f e3       	ldi	r21, 0x3F	; 63
    15b4:	69 a5       	ldd	r22, Y+41	; 0x29
    15b6:	7a a5       	ldd	r23, Y+42	; 0x2a
    15b8:	8b a5       	ldd	r24, Y+43	; 0x2b
    15ba:	9c a5       	ldd	r25, Y+44	; 0x2c
    15bc:	0e 94 45 1b 	call	0x368a	; 0x368a <__cmpsf2>
    15c0:	88 23       	and	r24, r24
    15c2:	2c f4       	brge	.+10     	; 0x15ce <deleteOfflineUser+0x222>
		__ticks = 1;
    15c4:	81 e0       	ldi	r24, 0x01	; 1
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	9e a7       	std	Y+46, r25	; 0x2e
    15ca:	8d a7       	std	Y+45, r24	; 0x2d
    15cc:	3f c0       	rjmp	.+126    	; 0x164c <deleteOfflineUser+0x2a0>
	else if (__tmp > 65535)
    15ce:	20 e0       	ldi	r18, 0x00	; 0
    15d0:	3f ef       	ldi	r19, 0xFF	; 255
    15d2:	4f e7       	ldi	r20, 0x7F	; 127
    15d4:	57 e4       	ldi	r21, 0x47	; 71
    15d6:	69 a5       	ldd	r22, Y+41	; 0x29
    15d8:	7a a5       	ldd	r23, Y+42	; 0x2a
    15da:	8b a5       	ldd	r24, Y+43	; 0x2b
    15dc:	9c a5       	ldd	r25, Y+44	; 0x2c
    15de:	0e 94 9d 1c 	call	0x393a	; 0x393a <__gesf2>
    15e2:	18 16       	cp	r1, r24
    15e4:	4c f5       	brge	.+82     	; 0x1638 <deleteOfflineUser+0x28c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15e6:	20 e0       	ldi	r18, 0x00	; 0
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	40 e2       	ldi	r20, 0x20	; 32
    15ec:	51 e4       	ldi	r21, 0x41	; 65
    15ee:	6d 85       	ldd	r22, Y+13	; 0x0d
    15f0:	7e 85       	ldd	r23, Y+14	; 0x0e
    15f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    15f4:	98 89       	ldd	r25, Y+16	; 0x10
    15f6:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__mulsf3>
    15fa:	dc 01       	movw	r26, r24
    15fc:	cb 01       	movw	r24, r22
    15fe:	bc 01       	movw	r22, r24
    1600:	cd 01       	movw	r24, r26
    1602:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__fixunssfsi>
    1606:	dc 01       	movw	r26, r24
    1608:	cb 01       	movw	r24, r22
    160a:	9e a7       	std	Y+46, r25	; 0x2e
    160c:	8d a7       	std	Y+45, r24	; 0x2d
    160e:	0f c0       	rjmp	.+30     	; 0x162e <deleteOfflineUser+0x282>
    1610:	80 e9       	ldi	r24, 0x90	; 144
    1612:	91 e0       	ldi	r25, 0x01	; 1
    1614:	98 ab       	std	Y+48, r25	; 0x30
    1616:	8f a7       	std	Y+47, r24	; 0x2f
    1618:	8f a5       	ldd	r24, Y+47	; 0x2f
    161a:	98 a9       	ldd	r25, Y+48	; 0x30
    161c:	01 97       	sbiw	r24, 0x01	; 1
    161e:	f1 f7       	brne	.-4      	; 0x161c <deleteOfflineUser+0x270>
    1620:	98 ab       	std	Y+48, r25	; 0x30
    1622:	8f a7       	std	Y+47, r24	; 0x2f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1624:	8d a5       	ldd	r24, Y+45	; 0x2d
    1626:	9e a5       	ldd	r25, Y+46	; 0x2e
    1628:	01 97       	sbiw	r24, 0x01	; 1
    162a:	9e a7       	std	Y+46, r25	; 0x2e
    162c:	8d a7       	std	Y+45, r24	; 0x2d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    162e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1630:	9e a5       	ldd	r25, Y+46	; 0x2e
    1632:	89 2b       	or	r24, r25
    1634:	69 f7       	brne	.-38     	; 0x1610 <deleteOfflineUser+0x264>
    1636:	14 c0       	rjmp	.+40     	; 0x1660 <deleteOfflineUser+0x2b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1638:	69 a5       	ldd	r22, Y+41	; 0x29
    163a:	7a a5       	ldd	r23, Y+42	; 0x2a
    163c:	8b a5       	ldd	r24, Y+43	; 0x2b
    163e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1640:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__fixunssfsi>
    1644:	dc 01       	movw	r26, r24
    1646:	cb 01       	movw	r24, r22
    1648:	9e a7       	std	Y+46, r25	; 0x2e
    164a:	8d a7       	std	Y+45, r24	; 0x2d
    164c:	8d a5       	ldd	r24, Y+45	; 0x2d
    164e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1650:	9a ab       	std	Y+50, r25	; 0x32
    1652:	89 ab       	std	Y+49, r24	; 0x31
    1654:	89 a9       	ldd	r24, Y+49	; 0x31
    1656:	9a a9       	ldd	r25, Y+50	; 0x32
    1658:	01 97       	sbiw	r24, 0x01	; 1
    165a:	f1 f7       	brne	.-4      	; 0x1658 <deleteOfflineUser+0x2ac>
    165c:	9a ab       	std	Y+50, r25	; 0x32
    165e:	89 ab       	std	Y+49, r24	; 0x31
			_delay_ms(20);
			EEPROM_writeData(255,j+10);
    1660:	88 85       	ldd	r24, Y+8	; 0x08
    1662:	88 2f       	mov	r24, r24
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	0a 96       	adiw	r24, 0x0a	; 10
    1668:	bc 01       	movw	r22, r24
    166a:	8f ef       	ldi	r24, 0xFF	; 255
    166c:	0e 94 2a 0c 	call	0x1854	; 0x1854 <EEPROM_writeData>
    1670:	80 e0       	ldi	r24, 0x00	; 0
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	a0 ea       	ldi	r26, 0xA0	; 160
    1676:	b1 e4       	ldi	r27, 0x41	; 65
    1678:	89 87       	std	Y+9, r24	; 0x09
    167a:	9a 87       	std	Y+10, r25	; 0x0a
    167c:	ab 87       	std	Y+11, r26	; 0x0b
    167e:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1680:	20 e0       	ldi	r18, 0x00	; 0
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	4a e7       	ldi	r20, 0x7A	; 122
    1686:	55 e4       	ldi	r21, 0x45	; 69
    1688:	69 85       	ldd	r22, Y+9	; 0x09
    168a:	7a 85       	ldd	r23, Y+10	; 0x0a
    168c:	8b 85       	ldd	r24, Y+11	; 0x0b
    168e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1690:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__mulsf3>
    1694:	dc 01       	movw	r26, r24
    1696:	cb 01       	movw	r24, r22
    1698:	8f 8f       	std	Y+31, r24	; 0x1f
    169a:	98 a3       	std	Y+32, r25	; 0x20
    169c:	a9 a3       	std	Y+33, r26	; 0x21
    169e:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    16a0:	20 e0       	ldi	r18, 0x00	; 0
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	40 e8       	ldi	r20, 0x80	; 128
    16a6:	5f e3       	ldi	r21, 0x3F	; 63
    16a8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    16aa:	78 a1       	ldd	r23, Y+32	; 0x20
    16ac:	89 a1       	ldd	r24, Y+33	; 0x21
    16ae:	9a a1       	ldd	r25, Y+34	; 0x22
    16b0:	0e 94 45 1b 	call	0x368a	; 0x368a <__cmpsf2>
    16b4:	88 23       	and	r24, r24
    16b6:	2c f4       	brge	.+10     	; 0x16c2 <deleteOfflineUser+0x316>
		__ticks = 1;
    16b8:	81 e0       	ldi	r24, 0x01	; 1
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	9c a3       	std	Y+36, r25	; 0x24
    16be:	8b a3       	std	Y+35, r24	; 0x23
    16c0:	3f c0       	rjmp	.+126    	; 0x1740 <deleteOfflineUser+0x394>
	else if (__tmp > 65535)
    16c2:	20 e0       	ldi	r18, 0x00	; 0
    16c4:	3f ef       	ldi	r19, 0xFF	; 255
    16c6:	4f e7       	ldi	r20, 0x7F	; 127
    16c8:	57 e4       	ldi	r21, 0x47	; 71
    16ca:	6f 8d       	ldd	r22, Y+31	; 0x1f
    16cc:	78 a1       	ldd	r23, Y+32	; 0x20
    16ce:	89 a1       	ldd	r24, Y+33	; 0x21
    16d0:	9a a1       	ldd	r25, Y+34	; 0x22
    16d2:	0e 94 9d 1c 	call	0x393a	; 0x393a <__gesf2>
    16d6:	18 16       	cp	r1, r24
    16d8:	4c f5       	brge	.+82     	; 0x172c <deleteOfflineUser+0x380>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16da:	20 e0       	ldi	r18, 0x00	; 0
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	40 e2       	ldi	r20, 0x20	; 32
    16e0:	51 e4       	ldi	r21, 0x41	; 65
    16e2:	69 85       	ldd	r22, Y+9	; 0x09
    16e4:	7a 85       	ldd	r23, Y+10	; 0x0a
    16e6:	8b 85       	ldd	r24, Y+11	; 0x0b
    16e8:	9c 85       	ldd	r25, Y+12	; 0x0c
    16ea:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__mulsf3>
    16ee:	dc 01       	movw	r26, r24
    16f0:	cb 01       	movw	r24, r22
    16f2:	bc 01       	movw	r22, r24
    16f4:	cd 01       	movw	r24, r26
    16f6:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__fixunssfsi>
    16fa:	dc 01       	movw	r26, r24
    16fc:	cb 01       	movw	r24, r22
    16fe:	9c a3       	std	Y+36, r25	; 0x24
    1700:	8b a3       	std	Y+35, r24	; 0x23
    1702:	0f c0       	rjmp	.+30     	; 0x1722 <deleteOfflineUser+0x376>
    1704:	80 e9       	ldi	r24, 0x90	; 144
    1706:	91 e0       	ldi	r25, 0x01	; 1
    1708:	9e a3       	std	Y+38, r25	; 0x26
    170a:	8d a3       	std	Y+37, r24	; 0x25
    170c:	8d a1       	ldd	r24, Y+37	; 0x25
    170e:	9e a1       	ldd	r25, Y+38	; 0x26
    1710:	01 97       	sbiw	r24, 0x01	; 1
    1712:	f1 f7       	brne	.-4      	; 0x1710 <deleteOfflineUser+0x364>
    1714:	9e a3       	std	Y+38, r25	; 0x26
    1716:	8d a3       	std	Y+37, r24	; 0x25
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1718:	8b a1       	ldd	r24, Y+35	; 0x23
    171a:	9c a1       	ldd	r25, Y+36	; 0x24
    171c:	01 97       	sbiw	r24, 0x01	; 1
    171e:	9c a3       	std	Y+36, r25	; 0x24
    1720:	8b a3       	std	Y+35, r24	; 0x23
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1722:	8b a1       	ldd	r24, Y+35	; 0x23
    1724:	9c a1       	ldd	r25, Y+36	; 0x24
    1726:	89 2b       	or	r24, r25
    1728:	69 f7       	brne	.-38     	; 0x1704 <deleteOfflineUser+0x358>
    172a:	14 c0       	rjmp	.+40     	; 0x1754 <deleteOfflineUser+0x3a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    172c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    172e:	78 a1       	ldd	r23, Y+32	; 0x20
    1730:	89 a1       	ldd	r24, Y+33	; 0x21
    1732:	9a a1       	ldd	r25, Y+34	; 0x22
    1734:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__fixunssfsi>
    1738:	dc 01       	movw	r26, r24
    173a:	cb 01       	movw	r24, r22
    173c:	9c a3       	std	Y+36, r25	; 0x24
    173e:	8b a3       	std	Y+35, r24	; 0x23
    1740:	8b a1       	ldd	r24, Y+35	; 0x23
    1742:	9c a1       	ldd	r25, Y+36	; 0x24
    1744:	98 a7       	std	Y+40, r25	; 0x28
    1746:	8f a3       	std	Y+39, r24	; 0x27
    1748:	8f a1       	ldd	r24, Y+39	; 0x27
    174a:	98 a5       	ldd	r25, Y+40	; 0x28
    174c:	01 97       	sbiw	r24, 0x01	; 1
    174e:	f1 f7       	brne	.-4      	; 0x174c <deleteOfflineUser+0x3a0>
    1750:	98 a7       	std	Y+40, r25	; 0x28
    1752:	8f a3       	std	Y+39, r24	; 0x27
		}
		if(flag==1){break;}
	}
	if (location!=0)
	{
		for(u8 l=0,j=location; l<10; j++,l++)
    1754:	88 85       	ldd	r24, Y+8	; 0x08
    1756:	8f 5f       	subi	r24, 0xFF	; 255
    1758:	88 87       	std	Y+8, r24	; 0x08
    175a:	8f 81       	ldd	r24, Y+7	; 0x07
    175c:	8f 5f       	subi	r24, 0xFF	; 255
    175e:	8f 83       	std	Y+7, r24	; 0x07
    1760:	8f 81       	ldd	r24, Y+7	; 0x07
    1762:	8a 30       	cpi	r24, 0x0A	; 10
    1764:	08 f4       	brcc	.+2      	; 0x1768 <deleteOfflineUser+0x3bc>
    1766:	03 cf       	rjmp	.-506    	; 0x156e <deleteOfflineUser+0x1c2>
			EEPROM_writeData(255,j);
			_delay_ms(20);
			EEPROM_writeData(255,j+10);
			_delay_ms(20);
		}
		return 1;
    1768:	81 e0       	ldi	r24, 0x01	; 1
    176a:	01 c0       	rjmp	.+2      	; 0x176e <deleteOfflineUser+0x3c2>
	}
	return 0;
    176c:	80 e0       	ldi	r24, 0x00	; 0

}
    176e:	ec 96       	adiw	r28, 0x3c	; 60
    1770:	0f b6       	in	r0, 0x3f	; 63
    1772:	f8 94       	cli
    1774:	de bf       	out	0x3e, r29	; 62
    1776:	0f be       	out	0x3f, r0	; 63
    1778:	cd bf       	out	0x3d, r28	; 61
    177a:	df 91       	pop	r29
    177c:	cf 91       	pop	r28
    177e:	1f 91       	pop	r17
    1780:	08 95       	ret

00001782 <Door>:
		    
u8 Door (u8 val)
{
    1782:	cf 93       	push	r28
    1784:	df 93       	push	r29
    1786:	1f 92       	push	r1
    1788:	cd b7       	in	r28, 0x3d	; 61
    178a:	de b7       	in	r29, 0x3e	; 62
    178c:	89 83       	std	Y+1, r24	; 0x01
        //the door is being controlled by a servo motor using timer1 fast pwm
		TIMER1_initFastPwmMod14();
    178e:	0e 94 39 19 	call	0x3272	; 0x3272 <TIMER1_initFastPwmMod14>
		GI_enable();
    1792:	0e 94 d7 15 	call	0x2bae	; 0x2bae <GI_enable>
		DIO_setPinDir(DIO_PIND5, DIO_OUTPUT);
    1796:	61 e0       	ldi	r22, 0x01	; 1
    1798:	8d e1       	ldi	r24, 0x1D	; 29
    179a:	0e 94 b6 12 	call	0x256c	; 0x256c <DIO_setPinDir>
		TIMER1_setFrequency(50);
    179e:	82 e3       	ldi	r24, 0x32	; 50
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	0e 94 cd 19 	call	0x339a	; 0x339a <TIMER1_setFrequency>
			UART_sendString("\r");
    17a6:	8d e8       	ldi	r24, 0x8D	; 141
    17a8:	93 e0       	ldi	r25, 0x03	; 3
    17aa:	0e 94 8b 1a 	call	0x3516	; 0x3516 <UART_sendString>
			if(val==1)
    17ae:	89 81       	ldd	r24, Y+1	; 0x01
    17b0:	81 30       	cpi	r24, 0x01	; 1
    17b2:	71 f4       	brne	.+28     	; 0x17d0 <Door+0x4e>
			{
				LCD_clearDis();
    17b4:	0e 94 1c 11 	call	0x2238	; 0x2238 <LCD_clearDis>
				LCD_writeStr("OPEN  DOOR\r");
    17b8:	8f e8       	ldi	r24, 0x8F	; 143
    17ba:	93 e0       	ldi	r25, 0x03	; 3
    17bc:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <LCD_writeStr>
				
				TIMER1_setDuty(10);
    17c0:	60 e0       	ldi	r22, 0x00	; 0
    17c2:	70 e0       	ldi	r23, 0x00	; 0
    17c4:	80 e2       	ldi	r24, 0x20	; 32
    17c6:	91 e4       	ldi	r25, 0x41	; 65
    17c8:	0e 94 80 19 	call	0x3300	; 0x3300 <TIMER1_setDuty>
				return 1;
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	12 c0       	rjmp	.+36     	; 0x17f4 <Door+0x72>
			}
			else if(val==0)
    17d0:	89 81       	ldd	r24, Y+1	; 0x01
    17d2:	88 23       	and	r24, r24
    17d4:	71 f4       	brne	.+28     	; 0x17f2 <Door+0x70>
			{
				LCD_clearDis();
    17d6:	0e 94 1c 11 	call	0x2238	; 0x2238 <LCD_clearDis>
				LCD_writeStr("Close  DOOR\r");
    17da:	8b e9       	ldi	r24, 0x9B	; 155
    17dc:	93 e0       	ldi	r25, 0x03	; 3
    17de:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <LCD_writeStr>
				TIMER1_setDuty(5);
    17e2:	60 e0       	ldi	r22, 0x00	; 0
    17e4:	70 e0       	ldi	r23, 0x00	; 0
    17e6:	80 ea       	ldi	r24, 0xA0	; 160
    17e8:	90 e4       	ldi	r25, 0x40	; 64
    17ea:	0e 94 80 19 	call	0x3300	; 0x3300 <TIMER1_setDuty>
				return 1;
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	01 c0       	rjmp	.+2      	; 0x17f4 <Door+0x72>
			}
		
	return 0;
    17f2:	80 e0       	ldi	r24, 0x00	; 0


}		    
    17f4:	0f 90       	pop	r0
    17f6:	df 91       	pop	r29
    17f8:	cf 91       	pop	r28
    17fa:	08 95       	ret

000017fc <LED_DIMMER>:
void LED_DIMMER(u8 x)
{
    17fc:	cf 93       	push	r28
    17fe:	df 93       	push	r29
    1800:	00 d0       	rcall	.+0      	; 0x1802 <LED_DIMMER+0x6>
    1802:	cd b7       	in	r28, 0x3d	; 61
    1804:	de b7       	in	r29, 0x3e	; 62
    1806:	8a 83       	std	Y+2, r24	; 0x02
	//This function is used to set the dimmer level using timer0 fast pwm 
	DIO_setPinDir(DIO_PINB3,DIO_OUTPUT);
    1808:	61 e0       	ldi	r22, 0x01	; 1
    180a:	8b e0       	ldi	r24, 0x0B	; 11
    180c:	0e 94 b6 12 	call	0x256c	; 0x256c <DIO_setPinDir>
	u8 y;
	if (x==0)
    1810:	8a 81       	ldd	r24, Y+2	; 0x02
    1812:	88 23       	and	r24, r24
    1814:	19 f4       	brne	.+6      	; 0x181c <LED_DIMMER+0x20>
	{
	TIMER0_stop();
    1816:	0e 94 81 18 	call	0x3102	; 0x3102 <TIMER0_stop>
	
	TIMER0_setFrequency(PWM_FREQUENCY_7812);
	 y=x*20;
	 TIMER0_setDuty(y);
	}
}
    181a:	16 c0       	rjmp	.+44     	; 0x1848 <LED_DIMMER+0x4c>
	u8 y;
	if (x==0)
	{
	TIMER0_stop();
	 }
 	else if (x>0 &&x<=5)
    181c:	8a 81       	ldd	r24, Y+2	; 0x02
    181e:	88 23       	and	r24, r24
    1820:	99 f0       	breq	.+38     	; 0x1848 <LED_DIMMER+0x4c>
    1822:	8a 81       	ldd	r24, Y+2	; 0x02
    1824:	86 30       	cpi	r24, 0x06	; 6
    1826:	80 f4       	brcc	.+32     	; 0x1848 <LED_DIMMER+0x4c>
 	{
	TIMER0_initFastPwm();
    1828:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <TIMER0_initFastPwm>
	
	TIMER0_setFrequency(PWM_FREQUENCY_7812);
    182c:	81 e0       	ldi	r24, 0x01	; 1
    182e:	0e 94 21 19 	call	0x3242	; 0x3242 <TIMER0_setFrequency>
	 y=x*20;
    1832:	8a 81       	ldd	r24, Y+2	; 0x02
    1834:	88 0f       	add	r24, r24
    1836:	88 0f       	add	r24, r24
    1838:	98 2f       	mov	r25, r24
    183a:	99 0f       	add	r25, r25
    183c:	99 0f       	add	r25, r25
    183e:	89 0f       	add	r24, r25
    1840:	89 83       	std	Y+1, r24	; 0x01
	 TIMER0_setDuty(y);
    1842:	89 81       	ldd	r24, Y+1	; 0x01
    1844:	0e 94 06 19 	call	0x320c	; 0x320c <TIMER0_setDuty>
	}
}
    1848:	00 00       	nop
    184a:	0f 90       	pop	r0
    184c:	0f 90       	pop	r0
    184e:	df 91       	pop	r29
    1850:	cf 91       	pop	r28
    1852:	08 95       	ret

00001854 <EEPROM_writeData>:
#include "BIT_MATH.h"
#include "STD_TYPES.h"
#include "I2C_INT.h"
#include "EEPROM_INT.h"
void EEPROM_writeData(u8 data, u16 location)
{
    1854:	cf 93       	push	r28
    1856:	df 93       	push	r29
    1858:	cd b7       	in	r28, 0x3d	; 61
    185a:	de b7       	in	r29, 0x3e	; 62
    185c:	27 97       	sbiw	r28, 0x07	; 7
    185e:	0f b6       	in	r0, 0x3f	; 63
    1860:	f8 94       	cli
    1862:	de bf       	out	0x3e, r29	; 62
    1864:	0f be       	out	0x3f, r0	; 63
    1866:	cd bf       	out	0x3d, r28	; 61
    1868:	8d 83       	std	Y+5, r24	; 0x05
    186a:	7f 83       	std	Y+7, r23	; 0x07
    186c:	6e 83       	std	Y+6, r22	; 0x06
	//send start
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    186e:	86 e5       	ldi	r24, 0x56	; 86
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	24 ea       	ldi	r18, 0xA4	; 164
    1874:	fc 01       	movw	r30, r24
    1876:	20 83       	st	Z, r18
	while( GET_BIT(TWCR,TWINT) ==0 );
    1878:	00 00       	nop
    187a:	86 e5       	ldi	r24, 0x56	; 86
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	fc 01       	movw	r30, r24
    1880:	80 81       	ld	r24, Z
    1882:	88 1f       	adc	r24, r24
    1884:	88 27       	eor	r24, r24
    1886:	88 1f       	adc	r24, r24
    1888:	88 2f       	mov	r24, r24
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	81 70       	andi	r24, 0x01	; 1
    188e:	99 27       	eor	r25, r25
    1890:	89 2b       	or	r24, r25
    1892:	99 f3       	breq	.-26     	; 0x187a <EEPROM_writeData+0x26>
	
	//address(1010)_3bitLocation_w
	u16 x = location & (0b11100000000);
    1894:	8e 81       	ldd	r24, Y+6	; 0x06
    1896:	9f 81       	ldd	r25, Y+7	; 0x07
    1898:	88 27       	eor	r24, r24
    189a:	97 70       	andi	r25, 0x07	; 7
    189c:	9a 83       	std	Y+2, r25	; 0x02
    189e:	89 83       	std	Y+1, r24	; 0x01
	u8 y = x>>7;
    18a0:	89 81       	ldd	r24, Y+1	; 0x01
    18a2:	9a 81       	ldd	r25, Y+2	; 0x02
    18a4:	88 0f       	add	r24, r24
    18a6:	89 2f       	mov	r24, r25
    18a8:	88 1f       	adc	r24, r24
    18aa:	99 0b       	sbc	r25, r25
    18ac:	91 95       	neg	r25
    18ae:	8b 83       	std	Y+3, r24	; 0x03
	u8 result  = y | 0b10100000;
    18b0:	8b 81       	ldd	r24, Y+3	; 0x03
    18b2:	80 6a       	ori	r24, 0xA0	; 160
    18b4:	8c 83       	std	Y+4, r24	; 0x04
	TWDR = result;
    18b6:	83 e2       	ldi	r24, 0x23	; 35
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	2c 81       	ldd	r18, Y+4	; 0x04
    18bc:	fc 01       	movw	r30, r24
    18be:	20 83       	st	Z, r18
	
	TWCR = (1<<TWINT) | (1<<TWEN);
    18c0:	86 e5       	ldi	r24, 0x56	; 86
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	24 e8       	ldi	r18, 0x84	; 132
    18c6:	fc 01       	movw	r30, r24
    18c8:	20 83       	st	Z, r18
	while( GET_BIT(TWCR,TWINT) ==0 );
    18ca:	00 00       	nop
    18cc:	86 e5       	ldi	r24, 0x56	; 86
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	fc 01       	movw	r30, r24
    18d2:	80 81       	ld	r24, Z
    18d4:	88 1f       	adc	r24, r24
    18d6:	88 27       	eor	r24, r24
    18d8:	88 1f       	adc	r24, r24
    18da:	88 2f       	mov	r24, r24
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	81 70       	andi	r24, 0x01	; 1
    18e0:	99 27       	eor	r25, r25
    18e2:	89 2b       	or	r24, r25
    18e4:	99 f3       	breq	.-26     	; 0x18cc <EEPROM_writeData+0x78>
	
	//8bitLocation
	TWDR = (u8)location;
    18e6:	83 e2       	ldi	r24, 0x23	; 35
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	2e 81       	ldd	r18, Y+6	; 0x06
    18ec:	fc 01       	movw	r30, r24
    18ee:	20 83       	st	Z, r18
	TWCR = (1<<TWINT) | (1<<TWEN);
    18f0:	86 e5       	ldi	r24, 0x56	; 86
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	24 e8       	ldi	r18, 0x84	; 132
    18f6:	fc 01       	movw	r30, r24
    18f8:	20 83       	st	Z, r18
	while( GET_BIT(TWCR,TWINT) ==0 );
    18fa:	00 00       	nop
    18fc:	86 e5       	ldi	r24, 0x56	; 86
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	fc 01       	movw	r30, r24
    1902:	80 81       	ld	r24, Z
    1904:	88 1f       	adc	r24, r24
    1906:	88 27       	eor	r24, r24
    1908:	88 1f       	adc	r24, r24
    190a:	88 2f       	mov	r24, r24
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	81 70       	andi	r24, 0x01	; 1
    1910:	99 27       	eor	r25, r25
    1912:	89 2b       	or	r24, r25
    1914:	99 f3       	breq	.-26     	; 0x18fc <EEPROM_writeData+0xa8>
	
	//send data
	TWDR = data;
    1916:	83 e2       	ldi	r24, 0x23	; 35
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	2d 81       	ldd	r18, Y+5	; 0x05
    191c:	fc 01       	movw	r30, r24
    191e:	20 83       	st	Z, r18
	TWCR = (1<<TWINT) | (1<<TWEN);
    1920:	86 e5       	ldi	r24, 0x56	; 86
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	24 e8       	ldi	r18, 0x84	; 132
    1926:	fc 01       	movw	r30, r24
    1928:	20 83       	st	Z, r18
	while( GET_BIT(TWCR,TWINT) ==0 );
    192a:	00 00       	nop
    192c:	86 e5       	ldi	r24, 0x56	; 86
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	fc 01       	movw	r30, r24
    1932:	80 81       	ld	r24, Z
    1934:	88 1f       	adc	r24, r24
    1936:	88 27       	eor	r24, r24
    1938:	88 1f       	adc	r24, r24
    193a:	88 2f       	mov	r24, r24
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	81 70       	andi	r24, 0x01	; 1
    1940:	99 27       	eor	r25, r25
    1942:	89 2b       	or	r24, r25
    1944:	99 f3       	breq	.-26     	; 0x192c <EEPROM_writeData+0xd8>
	
	//send stop
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    1946:	86 e5       	ldi	r24, 0x56	; 86
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	24 e9       	ldi	r18, 0x94	; 148
    194c:	fc 01       	movw	r30, r24
    194e:	20 83       	st	Z, r18
}
    1950:	00 00       	nop
    1952:	27 96       	adiw	r28, 0x07	; 7
    1954:	0f b6       	in	r0, 0x3f	; 63
    1956:	f8 94       	cli
    1958:	de bf       	out	0x3e, r29	; 62
    195a:	0f be       	out	0x3f, r0	; 63
    195c:	cd bf       	out	0x3d, r28	; 61
    195e:	df 91       	pop	r29
    1960:	cf 91       	pop	r28
    1962:	08 95       	ret

00001964 <EEPROM_readData>:
u8 EEPROM_readData(u16 location)
{
    1964:	cf 93       	push	r28
    1966:	df 93       	push	r29
    1968:	cd b7       	in	r28, 0x3d	; 61
    196a:	de b7       	in	r29, 0x3e	; 62
    196c:	27 97       	sbiw	r28, 0x07	; 7
    196e:	0f b6       	in	r0, 0x3f	; 63
    1970:	f8 94       	cli
    1972:	de bf       	out	0x3e, r29	; 62
    1974:	0f be       	out	0x3f, r0	; 63
    1976:	cd bf       	out	0x3d, r28	; 61
    1978:	9f 83       	std	Y+7, r25	; 0x07
    197a:	8e 83       	std	Y+6, r24	; 0x06
	/////dummy write/////
	//send start
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    197c:	86 e5       	ldi	r24, 0x56	; 86
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	24 ea       	ldi	r18, 0xA4	; 164
    1982:	fc 01       	movw	r30, r24
    1984:	20 83       	st	Z, r18
	while( GET_BIT(TWCR,TWINT) ==0 );
    1986:	00 00       	nop
    1988:	86 e5       	ldi	r24, 0x56	; 86
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	fc 01       	movw	r30, r24
    198e:	80 81       	ld	r24, Z
    1990:	88 1f       	adc	r24, r24
    1992:	88 27       	eor	r24, r24
    1994:	88 1f       	adc	r24, r24
    1996:	88 2f       	mov	r24, r24
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	81 70       	andi	r24, 0x01	; 1
    199c:	99 27       	eor	r25, r25
    199e:	89 2b       	or	r24, r25
    19a0:	99 f3       	breq	.-26     	; 0x1988 <EEPROM_readData+0x24>
	
	//address(1010)_3bitLocation_w
	u16 x = location & (0b11100000000);
    19a2:	8e 81       	ldd	r24, Y+6	; 0x06
    19a4:	9f 81       	ldd	r25, Y+7	; 0x07
    19a6:	88 27       	eor	r24, r24
    19a8:	97 70       	andi	r25, 0x07	; 7
    19aa:	9a 83       	std	Y+2, r25	; 0x02
    19ac:	89 83       	std	Y+1, r24	; 0x01
	u8 y = x>>7;
    19ae:	89 81       	ldd	r24, Y+1	; 0x01
    19b0:	9a 81       	ldd	r25, Y+2	; 0x02
    19b2:	88 0f       	add	r24, r24
    19b4:	89 2f       	mov	r24, r25
    19b6:	88 1f       	adc	r24, r24
    19b8:	99 0b       	sbc	r25, r25
    19ba:	91 95       	neg	r25
    19bc:	8b 83       	std	Y+3, r24	; 0x03
	u8 result  = y | 0b10100000;
    19be:	8b 81       	ldd	r24, Y+3	; 0x03
    19c0:	80 6a       	ori	r24, 0xA0	; 160
    19c2:	8c 83       	std	Y+4, r24	; 0x04
	TWDR = result;
    19c4:	83 e2       	ldi	r24, 0x23	; 35
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	2c 81       	ldd	r18, Y+4	; 0x04
    19ca:	fc 01       	movw	r30, r24
    19cc:	20 83       	st	Z, r18
	
	TWCR = (1<<TWINT) | (1<<TWEN);
    19ce:	86 e5       	ldi	r24, 0x56	; 86
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	24 e8       	ldi	r18, 0x84	; 132
    19d4:	fc 01       	movw	r30, r24
    19d6:	20 83       	st	Z, r18
	while( GET_BIT(TWCR,TWINT) ==0 );
    19d8:	00 00       	nop
    19da:	86 e5       	ldi	r24, 0x56	; 86
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	fc 01       	movw	r30, r24
    19e0:	80 81       	ld	r24, Z
    19e2:	88 1f       	adc	r24, r24
    19e4:	88 27       	eor	r24, r24
    19e6:	88 1f       	adc	r24, r24
    19e8:	88 2f       	mov	r24, r24
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	81 70       	andi	r24, 0x01	; 1
    19ee:	99 27       	eor	r25, r25
    19f0:	89 2b       	or	r24, r25
    19f2:	99 f3       	breq	.-26     	; 0x19da <EEPROM_readData+0x76>
	
	//8bitLocation
	TWDR = (u8)location;
    19f4:	83 e2       	ldi	r24, 0x23	; 35
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	2e 81       	ldd	r18, Y+6	; 0x06
    19fa:	fc 01       	movw	r30, r24
    19fc:	20 83       	st	Z, r18
	TWCR = (1<<TWINT) | (1<<TWEN);
    19fe:	86 e5       	ldi	r24, 0x56	; 86
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	24 e8       	ldi	r18, 0x84	; 132
    1a04:	fc 01       	movw	r30, r24
    1a06:	20 83       	st	Z, r18
	while( GET_BIT(TWCR,TWINT) ==0 );
    1a08:	00 00       	nop
    1a0a:	86 e5       	ldi	r24, 0x56	; 86
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	fc 01       	movw	r30, r24
    1a10:	80 81       	ld	r24, Z
    1a12:	88 1f       	adc	r24, r24
    1a14:	88 27       	eor	r24, r24
    1a16:	88 1f       	adc	r24, r24
    1a18:	88 2f       	mov	r24, r24
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	81 70       	andi	r24, 0x01	; 1
    1a1e:	99 27       	eor	r25, r25
    1a20:	89 2b       	or	r24, r25
    1a22:	99 f3       	breq	.-26     	; 0x1a0a <EEPROM_readData+0xa6>
	
	//send start
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    1a24:	86 e5       	ldi	r24, 0x56	; 86
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	24 ea       	ldi	r18, 0xA4	; 164
    1a2a:	fc 01       	movw	r30, r24
    1a2c:	20 83       	st	Z, r18
	while( GET_BIT(TWCR,TWINT) ==0 );
    1a2e:	00 00       	nop
    1a30:	86 e5       	ldi	r24, 0x56	; 86
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	fc 01       	movw	r30, r24
    1a36:	80 81       	ld	r24, Z
    1a38:	88 1f       	adc	r24, r24
    1a3a:	88 27       	eor	r24, r24
    1a3c:	88 1f       	adc	r24, r24
    1a3e:	88 2f       	mov	r24, r24
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	81 70       	andi	r24, 0x01	; 1
    1a44:	99 27       	eor	r25, r25
    1a46:	89 2b       	or	r24, r25
    1a48:	99 f3       	breq	.-26     	; 0x1a30 <EEPROM_readData+0xcc>
	
	//address(1010_3bitLocation_r
	x = location & (0b11100000000);
    1a4a:	8e 81       	ldd	r24, Y+6	; 0x06
    1a4c:	9f 81       	ldd	r25, Y+7	; 0x07
    1a4e:	88 27       	eor	r24, r24
    1a50:	97 70       	andi	r25, 0x07	; 7
    1a52:	9a 83       	std	Y+2, r25	; 0x02
    1a54:	89 83       	std	Y+1, r24	; 0x01
	y = x>>7;
    1a56:	89 81       	ldd	r24, Y+1	; 0x01
    1a58:	9a 81       	ldd	r25, Y+2	; 0x02
    1a5a:	88 0f       	add	r24, r24
    1a5c:	89 2f       	mov	r24, r25
    1a5e:	88 1f       	adc	r24, r24
    1a60:	99 0b       	sbc	r25, r25
    1a62:	91 95       	neg	r25
    1a64:	8b 83       	std	Y+3, r24	; 0x03
	result  = y | 0b10100001;
    1a66:	8b 81       	ldd	r24, Y+3	; 0x03
    1a68:	81 6a       	ori	r24, 0xA1	; 161
    1a6a:	8c 83       	std	Y+4, r24	; 0x04
	TWDR = result;
    1a6c:	83 e2       	ldi	r24, 0x23	; 35
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	2c 81       	ldd	r18, Y+4	; 0x04
    1a72:	fc 01       	movw	r30, r24
    1a74:	20 83       	st	Z, r18
	TWCR = (1<<TWINT) | (1<<TWEN);
    1a76:	86 e5       	ldi	r24, 0x56	; 86
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	24 e8       	ldi	r18, 0x84	; 132
    1a7c:	fc 01       	movw	r30, r24
    1a7e:	20 83       	st	Z, r18
	while( GET_BIT(TWCR,TWINT) ==0 );
    1a80:	00 00       	nop
    1a82:	86 e5       	ldi	r24, 0x56	; 86
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	fc 01       	movw	r30, r24
    1a88:	80 81       	ld	r24, Z
    1a8a:	88 1f       	adc	r24, r24
    1a8c:	88 27       	eor	r24, r24
    1a8e:	88 1f       	adc	r24, r24
    1a90:	88 2f       	mov	r24, r24
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	81 70       	andi	r24, 0x01	; 1
    1a96:	99 27       	eor	r25, r25
    1a98:	89 2b       	or	r24, r25
    1a9a:	99 f3       	breq	.-26     	; 0x1a82 <EEPROM_readData+0x11e>
	
	//read data -> NACK
	TWCR = (1<<TWINT) | (1<<TWEN);
    1a9c:	86 e5       	ldi	r24, 0x56	; 86
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	24 e8       	ldi	r18, 0x84	; 132
    1aa2:	fc 01       	movw	r30, r24
    1aa4:	20 83       	st	Z, r18
	while( GET_BIT(TWCR,TWINT) ==0 );
    1aa6:	00 00       	nop
    1aa8:	86 e5       	ldi	r24, 0x56	; 86
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	fc 01       	movw	r30, r24
    1aae:	80 81       	ld	r24, Z
    1ab0:	88 1f       	adc	r24, r24
    1ab2:	88 27       	eor	r24, r24
    1ab4:	88 1f       	adc	r24, r24
    1ab6:	88 2f       	mov	r24, r24
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	81 70       	andi	r24, 0x01	; 1
    1abc:	99 27       	eor	r25, r25
    1abe:	89 2b       	or	r24, r25
    1ac0:	99 f3       	breq	.-26     	; 0x1aa8 <EEPROM_readData+0x144>
	u8 data = TWDR;
    1ac2:	83 e2       	ldi	r24, 0x23	; 35
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	fc 01       	movw	r30, r24
    1ac8:	80 81       	ld	r24, Z
    1aca:	8d 83       	std	Y+5, r24	; 0x05
	
	//send stop
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    1acc:	86 e5       	ldi	r24, 0x56	; 86
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	24 e9       	ldi	r18, 0x94	; 148
    1ad2:	fc 01       	movw	r30, r24
    1ad4:	20 83       	st	Z, r18
	
	return data;
    1ad6:	8d 81       	ldd	r24, Y+5	; 0x05

    1ad8:	27 96       	adiw	r28, 0x07	; 7
    1ada:	0f b6       	in	r0, 0x3f	; 63
    1adc:	f8 94       	cli
    1ade:	de bf       	out	0x3e, r29	; 62
    1ae0:	0f be       	out	0x3f, r0	; 63
    1ae2:	cd bf       	out	0x3d, r28	; 61
    1ae4:	df 91       	pop	r29
    1ae6:	cf 91       	pop	r28
    1ae8:	08 95       	ret

00001aea <LCD_init>:
	s32 k;
	for(k=i-1; k>=0; k--)
	{
		LCD_writeChar(arr[k]);
	}
}
    1aea:	cf 93       	push	r28
    1aec:	df 93       	push	r29
    1aee:	cd b7       	in	r28, 0x3d	; 61
    1af0:	de b7       	in	r29, 0x3e	; 62
    1af2:	e8 97       	sbiw	r28, 0x38	; 56
    1af4:	0f b6       	in	r0, 0x3f	; 63
    1af6:	f8 94       	cli
    1af8:	de bf       	out	0x3e, r29	; 62
    1afa:	0f be       	out	0x3f, r0	; 63
    1afc:	cd bf       	out	0x3d, r28	; 61
    1afe:	61 e0       	ldi	r22, 0x01	; 1
    1b00:	82 e1       	ldi	r24, 0x12	; 18
    1b02:	0e 94 b6 12 	call	0x256c	; 0x256c <DIO_setPinDir>
    1b06:	61 e0       	ldi	r22, 0x01	; 1
    1b08:	83 e1       	ldi	r24, 0x13	; 19
    1b0a:	0e 94 b6 12 	call	0x256c	; 0x256c <DIO_setPinDir>
    1b0e:	61 e0       	ldi	r22, 0x01	; 1
    1b10:	84 e1       	ldi	r24, 0x14	; 20
    1b12:	0e 94 b6 12 	call	0x256c	; 0x256c <DIO_setPinDir>
    1b16:	61 e0       	ldi	r22, 0x01	; 1
    1b18:	85 e1       	ldi	r24, 0x15	; 21
    1b1a:	0e 94 b6 12 	call	0x256c	; 0x256c <DIO_setPinDir>
    1b1e:	61 e0       	ldi	r22, 0x01	; 1
    1b20:	86 e1       	ldi	r24, 0x16	; 22
    1b22:	0e 94 b6 12 	call	0x256c	; 0x256c <DIO_setPinDir>
    1b26:	61 e0       	ldi	r22, 0x01	; 1
    1b28:	87 e1       	ldi	r24, 0x17	; 23
    1b2a:	0e 94 b6 12 	call	0x256c	; 0x256c <DIO_setPinDir>
    1b2e:	61 e0       	ldi	r22, 0x01	; 1
    1b30:	8e e1       	ldi	r24, 0x1E	; 30
    1b32:	0e 94 b6 12 	call	0x256c	; 0x256c <DIO_setPinDir>
    1b36:	82 e0       	ldi	r24, 0x02	; 2
    1b38:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <LCD_writeCmd>
    1b3c:	80 e0       	ldi	r24, 0x00	; 0
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	a8 e4       	ldi	r26, 0x48	; 72
    1b42:	b2 e4       	ldi	r27, 0x42	; 66
    1b44:	89 83       	std	Y+1, r24	; 0x01
    1b46:	9a 83       	std	Y+2, r25	; 0x02
    1b48:	ab 83       	std	Y+3, r26	; 0x03
    1b4a:	bc 83       	std	Y+4, r27	; 0x04
    1b4c:	20 e0       	ldi	r18, 0x00	; 0
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	4a e7       	ldi	r20, 0x7A	; 122
    1b52:	55 e4       	ldi	r21, 0x45	; 69
    1b54:	69 81       	ldd	r22, Y+1	; 0x01
    1b56:	7a 81       	ldd	r23, Y+2	; 0x02
    1b58:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b5c:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__mulsf3>
    1b60:	dc 01       	movw	r26, r24
    1b62:	cb 01       	movw	r24, r22
    1b64:	8f a7       	std	Y+47, r24	; 0x2f
    1b66:	98 ab       	std	Y+48, r25	; 0x30
    1b68:	a9 ab       	std	Y+49, r26	; 0x31
    1b6a:	ba ab       	std	Y+50, r27	; 0x32
    1b6c:	20 e0       	ldi	r18, 0x00	; 0
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	40 e8       	ldi	r20, 0x80	; 128
    1b72:	5f e3       	ldi	r21, 0x3F	; 63
    1b74:	6f a5       	ldd	r22, Y+47	; 0x2f
    1b76:	78 a9       	ldd	r23, Y+48	; 0x30
    1b78:	89 a9       	ldd	r24, Y+49	; 0x31
    1b7a:	9a a9       	ldd	r25, Y+50	; 0x32
    1b7c:	0e 94 45 1b 	call	0x368a	; 0x368a <__cmpsf2>
    1b80:	88 23       	and	r24, r24
    1b82:	2c f4       	brge	.+10     	; 0x1b8e <LCD_init+0xa4>
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	9c ab       	std	Y+52, r25	; 0x34
    1b8a:	8b ab       	std	Y+51, r24	; 0x33
    1b8c:	3f c0       	rjmp	.+126    	; 0x1c0c <LCD_init+0x122>
    1b8e:	20 e0       	ldi	r18, 0x00	; 0
    1b90:	3f ef       	ldi	r19, 0xFF	; 255
    1b92:	4f e7       	ldi	r20, 0x7F	; 127
    1b94:	57 e4       	ldi	r21, 0x47	; 71
    1b96:	6f a5       	ldd	r22, Y+47	; 0x2f
    1b98:	78 a9       	ldd	r23, Y+48	; 0x30
    1b9a:	89 a9       	ldd	r24, Y+49	; 0x31
    1b9c:	9a a9       	ldd	r25, Y+50	; 0x32
    1b9e:	0e 94 9d 1c 	call	0x393a	; 0x393a <__gesf2>
    1ba2:	18 16       	cp	r1, r24
    1ba4:	4c f5       	brge	.+82     	; 0x1bf8 <LCD_init+0x10e>
    1ba6:	20 e0       	ldi	r18, 0x00	; 0
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	40 e2       	ldi	r20, 0x20	; 32
    1bac:	51 e4       	ldi	r21, 0x41	; 65
    1bae:	69 81       	ldd	r22, Y+1	; 0x01
    1bb0:	7a 81       	ldd	r23, Y+2	; 0x02
    1bb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb6:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__mulsf3>
    1bba:	dc 01       	movw	r26, r24
    1bbc:	cb 01       	movw	r24, r22
    1bbe:	bc 01       	movw	r22, r24
    1bc0:	cd 01       	movw	r24, r26
    1bc2:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__fixunssfsi>
    1bc6:	dc 01       	movw	r26, r24
    1bc8:	cb 01       	movw	r24, r22
    1bca:	9c ab       	std	Y+52, r25	; 0x34
    1bcc:	8b ab       	std	Y+51, r24	; 0x33
    1bce:	0f c0       	rjmp	.+30     	; 0x1bee <LCD_init+0x104>
    1bd0:	80 e9       	ldi	r24, 0x90	; 144
    1bd2:	91 e0       	ldi	r25, 0x01	; 1
    1bd4:	9e ab       	std	Y+54, r25	; 0x36
    1bd6:	8d ab       	std	Y+53, r24	; 0x35
    1bd8:	8d a9       	ldd	r24, Y+53	; 0x35
    1bda:	9e a9       	ldd	r25, Y+54	; 0x36
    1bdc:	01 97       	sbiw	r24, 0x01	; 1
    1bde:	f1 f7       	brne	.-4      	; 0x1bdc <LCD_init+0xf2>
    1be0:	9e ab       	std	Y+54, r25	; 0x36
    1be2:	8d ab       	std	Y+53, r24	; 0x35
    1be4:	8b a9       	ldd	r24, Y+51	; 0x33
    1be6:	9c a9       	ldd	r25, Y+52	; 0x34
    1be8:	01 97       	sbiw	r24, 0x01	; 1
    1bea:	9c ab       	std	Y+52, r25	; 0x34
    1bec:	8b ab       	std	Y+51, r24	; 0x33
    1bee:	8b a9       	ldd	r24, Y+51	; 0x33
    1bf0:	9c a9       	ldd	r25, Y+52	; 0x34
    1bf2:	89 2b       	or	r24, r25
    1bf4:	69 f7       	brne	.-38     	; 0x1bd0 <LCD_init+0xe6>
    1bf6:	14 c0       	rjmp	.+40     	; 0x1c20 <LCD_init+0x136>
    1bf8:	6f a5       	ldd	r22, Y+47	; 0x2f
    1bfa:	78 a9       	ldd	r23, Y+48	; 0x30
    1bfc:	89 a9       	ldd	r24, Y+49	; 0x31
    1bfe:	9a a9       	ldd	r25, Y+50	; 0x32
    1c00:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__fixunssfsi>
    1c04:	dc 01       	movw	r26, r24
    1c06:	cb 01       	movw	r24, r22
    1c08:	9c ab       	std	Y+52, r25	; 0x34
    1c0a:	8b ab       	std	Y+51, r24	; 0x33
    1c0c:	8b a9       	ldd	r24, Y+51	; 0x33
    1c0e:	9c a9       	ldd	r25, Y+52	; 0x34
    1c10:	98 af       	std	Y+56, r25	; 0x38
    1c12:	8f ab       	std	Y+55, r24	; 0x37
    1c14:	8f a9       	ldd	r24, Y+55	; 0x37
    1c16:	98 ad       	ldd	r25, Y+56	; 0x38
    1c18:	01 97       	sbiw	r24, 0x01	; 1
    1c1a:	f1 f7       	brne	.-4      	; 0x1c18 <LCD_init+0x12e>
    1c1c:	98 af       	std	Y+56, r25	; 0x38
    1c1e:	8f ab       	std	Y+55, r24	; 0x37
    1c20:	88 e2       	ldi	r24, 0x28	; 40
    1c22:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <LCD_writeCmd>
    1c26:	80 e0       	ldi	r24, 0x00	; 0
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	a0 e8       	ldi	r26, 0x80	; 128
    1c2c:	bf e3       	ldi	r27, 0x3F	; 63
    1c2e:	8d 83       	std	Y+5, r24	; 0x05
    1c30:	9e 83       	std	Y+6, r25	; 0x06
    1c32:	af 83       	std	Y+7, r26	; 0x07
    1c34:	b8 87       	std	Y+8, r27	; 0x08
    1c36:	20 e0       	ldi	r18, 0x00	; 0
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	4a e7       	ldi	r20, 0x7A	; 122
    1c3c:	55 e4       	ldi	r21, 0x45	; 69
    1c3e:	6d 81       	ldd	r22, Y+5	; 0x05
    1c40:	7e 81       	ldd	r23, Y+6	; 0x06
    1c42:	8f 81       	ldd	r24, Y+7	; 0x07
    1c44:	98 85       	ldd	r25, Y+8	; 0x08
    1c46:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__mulsf3>
    1c4a:	dc 01       	movw	r26, r24
    1c4c:	cb 01       	movw	r24, r22
    1c4e:	8d a3       	std	Y+37, r24	; 0x25
    1c50:	9e a3       	std	Y+38, r25	; 0x26
    1c52:	af a3       	std	Y+39, r26	; 0x27
    1c54:	b8 a7       	std	Y+40, r27	; 0x28
    1c56:	20 e0       	ldi	r18, 0x00	; 0
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	40 e8       	ldi	r20, 0x80	; 128
    1c5c:	5f e3       	ldi	r21, 0x3F	; 63
    1c5e:	6d a1       	ldd	r22, Y+37	; 0x25
    1c60:	7e a1       	ldd	r23, Y+38	; 0x26
    1c62:	8f a1       	ldd	r24, Y+39	; 0x27
    1c64:	98 a5       	ldd	r25, Y+40	; 0x28
    1c66:	0e 94 45 1b 	call	0x368a	; 0x368a <__cmpsf2>
    1c6a:	88 23       	and	r24, r24
    1c6c:	2c f4       	brge	.+10     	; 0x1c78 <LCD_init+0x18e>
    1c6e:	81 e0       	ldi	r24, 0x01	; 1
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	9a a7       	std	Y+42, r25	; 0x2a
    1c74:	89 a7       	std	Y+41, r24	; 0x29
    1c76:	3f c0       	rjmp	.+126    	; 0x1cf6 <LCD_init+0x20c>
    1c78:	20 e0       	ldi	r18, 0x00	; 0
    1c7a:	3f ef       	ldi	r19, 0xFF	; 255
    1c7c:	4f e7       	ldi	r20, 0x7F	; 127
    1c7e:	57 e4       	ldi	r21, 0x47	; 71
    1c80:	6d a1       	ldd	r22, Y+37	; 0x25
    1c82:	7e a1       	ldd	r23, Y+38	; 0x26
    1c84:	8f a1       	ldd	r24, Y+39	; 0x27
    1c86:	98 a5       	ldd	r25, Y+40	; 0x28
    1c88:	0e 94 9d 1c 	call	0x393a	; 0x393a <__gesf2>
    1c8c:	18 16       	cp	r1, r24
    1c8e:	4c f5       	brge	.+82     	; 0x1ce2 <LCD_init+0x1f8>
    1c90:	20 e0       	ldi	r18, 0x00	; 0
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	40 e2       	ldi	r20, 0x20	; 32
    1c96:	51 e4       	ldi	r21, 0x41	; 65
    1c98:	6d 81       	ldd	r22, Y+5	; 0x05
    1c9a:	7e 81       	ldd	r23, Y+6	; 0x06
    1c9c:	8f 81       	ldd	r24, Y+7	; 0x07
    1c9e:	98 85       	ldd	r25, Y+8	; 0x08
    1ca0:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__mulsf3>
    1ca4:	dc 01       	movw	r26, r24
    1ca6:	cb 01       	movw	r24, r22
    1ca8:	bc 01       	movw	r22, r24
    1caa:	cd 01       	movw	r24, r26
    1cac:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__fixunssfsi>
    1cb0:	dc 01       	movw	r26, r24
    1cb2:	cb 01       	movw	r24, r22
    1cb4:	9a a7       	std	Y+42, r25	; 0x2a
    1cb6:	89 a7       	std	Y+41, r24	; 0x29
    1cb8:	0f c0       	rjmp	.+30     	; 0x1cd8 <LCD_init+0x1ee>
    1cba:	80 e9       	ldi	r24, 0x90	; 144
    1cbc:	91 e0       	ldi	r25, 0x01	; 1
    1cbe:	9c a7       	std	Y+44, r25	; 0x2c
    1cc0:	8b a7       	std	Y+43, r24	; 0x2b
    1cc2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cc4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1cc6:	01 97       	sbiw	r24, 0x01	; 1
    1cc8:	f1 f7       	brne	.-4      	; 0x1cc6 <LCD_init+0x1dc>
    1cca:	9c a7       	std	Y+44, r25	; 0x2c
    1ccc:	8b a7       	std	Y+43, r24	; 0x2b
    1cce:	89 a5       	ldd	r24, Y+41	; 0x29
    1cd0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cd2:	01 97       	sbiw	r24, 0x01	; 1
    1cd4:	9a a7       	std	Y+42, r25	; 0x2a
    1cd6:	89 a7       	std	Y+41, r24	; 0x29
    1cd8:	89 a5       	ldd	r24, Y+41	; 0x29
    1cda:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cdc:	89 2b       	or	r24, r25
    1cde:	69 f7       	brne	.-38     	; 0x1cba <LCD_init+0x1d0>
    1ce0:	14 c0       	rjmp	.+40     	; 0x1d0a <LCD_init+0x220>
    1ce2:	6d a1       	ldd	r22, Y+37	; 0x25
    1ce4:	7e a1       	ldd	r23, Y+38	; 0x26
    1ce6:	8f a1       	ldd	r24, Y+39	; 0x27
    1ce8:	98 a5       	ldd	r25, Y+40	; 0x28
    1cea:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__fixunssfsi>
    1cee:	dc 01       	movw	r26, r24
    1cf0:	cb 01       	movw	r24, r22
    1cf2:	9a a7       	std	Y+42, r25	; 0x2a
    1cf4:	89 a7       	std	Y+41, r24	; 0x29
    1cf6:	89 a5       	ldd	r24, Y+41	; 0x29
    1cf8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cfa:	9e a7       	std	Y+46, r25	; 0x2e
    1cfc:	8d a7       	std	Y+45, r24	; 0x2d
    1cfe:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d00:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d02:	01 97       	sbiw	r24, 0x01	; 1
    1d04:	f1 f7       	brne	.-4      	; 0x1d02 <LCD_init+0x218>
    1d06:	9e a7       	std	Y+46, r25	; 0x2e
    1d08:	8d a7       	std	Y+45, r24	; 0x2d
    1d0a:	8e e0       	ldi	r24, 0x0E	; 14
    1d0c:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <LCD_writeCmd>
    1d10:	80 e0       	ldi	r24, 0x00	; 0
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	a0 e8       	ldi	r26, 0x80	; 128
    1d16:	bf e3       	ldi	r27, 0x3F	; 63
    1d18:	89 87       	std	Y+9, r24	; 0x09
    1d1a:	9a 87       	std	Y+10, r25	; 0x0a
    1d1c:	ab 87       	std	Y+11, r26	; 0x0b
    1d1e:	bc 87       	std	Y+12, r27	; 0x0c
    1d20:	20 e0       	ldi	r18, 0x00	; 0
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	4a e7       	ldi	r20, 0x7A	; 122
    1d26:	55 e4       	ldi	r21, 0x45	; 69
    1d28:	69 85       	ldd	r22, Y+9	; 0x09
    1d2a:	7a 85       	ldd	r23, Y+10	; 0x0a
    1d2c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d2e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d30:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__mulsf3>
    1d34:	dc 01       	movw	r26, r24
    1d36:	cb 01       	movw	r24, r22
    1d38:	8b 8f       	std	Y+27, r24	; 0x1b
    1d3a:	9c 8f       	std	Y+28, r25	; 0x1c
    1d3c:	ad 8f       	std	Y+29, r26	; 0x1d
    1d3e:	be 8f       	std	Y+30, r27	; 0x1e
    1d40:	20 e0       	ldi	r18, 0x00	; 0
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	40 e8       	ldi	r20, 0x80	; 128
    1d46:	5f e3       	ldi	r21, 0x3F	; 63
    1d48:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1d4a:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1d4c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d4e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d50:	0e 94 45 1b 	call	0x368a	; 0x368a <__cmpsf2>
    1d54:	88 23       	and	r24, r24
    1d56:	2c f4       	brge	.+10     	; 0x1d62 <LCD_init+0x278>
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	98 a3       	std	Y+32, r25	; 0x20
    1d5e:	8f 8f       	std	Y+31, r24	; 0x1f
    1d60:	3f c0       	rjmp	.+126    	; 0x1de0 <LCD_init+0x2f6>
    1d62:	20 e0       	ldi	r18, 0x00	; 0
    1d64:	3f ef       	ldi	r19, 0xFF	; 255
    1d66:	4f e7       	ldi	r20, 0x7F	; 127
    1d68:	57 e4       	ldi	r21, 0x47	; 71
    1d6a:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1d6c:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1d6e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d70:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d72:	0e 94 9d 1c 	call	0x393a	; 0x393a <__gesf2>
    1d76:	18 16       	cp	r1, r24
    1d78:	4c f5       	brge	.+82     	; 0x1dcc <LCD_init+0x2e2>
    1d7a:	20 e0       	ldi	r18, 0x00	; 0
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	40 e2       	ldi	r20, 0x20	; 32
    1d80:	51 e4       	ldi	r21, 0x41	; 65
    1d82:	69 85       	ldd	r22, Y+9	; 0x09
    1d84:	7a 85       	ldd	r23, Y+10	; 0x0a
    1d86:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d88:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d8a:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__mulsf3>
    1d8e:	dc 01       	movw	r26, r24
    1d90:	cb 01       	movw	r24, r22
    1d92:	bc 01       	movw	r22, r24
    1d94:	cd 01       	movw	r24, r26
    1d96:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__fixunssfsi>
    1d9a:	dc 01       	movw	r26, r24
    1d9c:	cb 01       	movw	r24, r22
    1d9e:	98 a3       	std	Y+32, r25	; 0x20
    1da0:	8f 8f       	std	Y+31, r24	; 0x1f
    1da2:	0f c0       	rjmp	.+30     	; 0x1dc2 <LCD_init+0x2d8>
    1da4:	80 e9       	ldi	r24, 0x90	; 144
    1da6:	91 e0       	ldi	r25, 0x01	; 1
    1da8:	9a a3       	std	Y+34, r25	; 0x22
    1daa:	89 a3       	std	Y+33, r24	; 0x21
    1dac:	89 a1       	ldd	r24, Y+33	; 0x21
    1dae:	9a a1       	ldd	r25, Y+34	; 0x22
    1db0:	01 97       	sbiw	r24, 0x01	; 1
    1db2:	f1 f7       	brne	.-4      	; 0x1db0 <LCD_init+0x2c6>
    1db4:	9a a3       	std	Y+34, r25	; 0x22
    1db6:	89 a3       	std	Y+33, r24	; 0x21
    1db8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1dba:	98 a1       	ldd	r25, Y+32	; 0x20
    1dbc:	01 97       	sbiw	r24, 0x01	; 1
    1dbe:	98 a3       	std	Y+32, r25	; 0x20
    1dc0:	8f 8f       	std	Y+31, r24	; 0x1f
    1dc2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1dc4:	98 a1       	ldd	r25, Y+32	; 0x20
    1dc6:	89 2b       	or	r24, r25
    1dc8:	69 f7       	brne	.-38     	; 0x1da4 <LCD_init+0x2ba>
    1dca:	14 c0       	rjmp	.+40     	; 0x1df4 <LCD_init+0x30a>
    1dcc:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1dce:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1dd0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1dd2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1dd4:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__fixunssfsi>
    1dd8:	dc 01       	movw	r26, r24
    1dda:	cb 01       	movw	r24, r22
    1ddc:	98 a3       	std	Y+32, r25	; 0x20
    1dde:	8f 8f       	std	Y+31, r24	; 0x1f
    1de0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1de2:	98 a1       	ldd	r25, Y+32	; 0x20
    1de4:	9c a3       	std	Y+36, r25	; 0x24
    1de6:	8b a3       	std	Y+35, r24	; 0x23
    1de8:	8b a1       	ldd	r24, Y+35	; 0x23
    1dea:	9c a1       	ldd	r25, Y+36	; 0x24
    1dec:	01 97       	sbiw	r24, 0x01	; 1
    1dee:	f1 f7       	brne	.-4      	; 0x1dec <LCD_init+0x302>
    1df0:	9c a3       	std	Y+36, r25	; 0x24
    1df2:	8b a3       	std	Y+35, r24	; 0x23
    1df4:	81 e0       	ldi	r24, 0x01	; 1
    1df6:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <LCD_writeCmd>
    1dfa:	80 e0       	ldi	r24, 0x00	; 0
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	a0 ea       	ldi	r26, 0xA0	; 160
    1e00:	b0 e4       	ldi	r27, 0x40	; 64
    1e02:	8d 87       	std	Y+13, r24	; 0x0d
    1e04:	9e 87       	std	Y+14, r25	; 0x0e
    1e06:	af 87       	std	Y+15, r26	; 0x0f
    1e08:	b8 8b       	std	Y+16, r27	; 0x10
    1e0a:	20 e0       	ldi	r18, 0x00	; 0
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	4a e7       	ldi	r20, 0x7A	; 122
    1e10:	55 e4       	ldi	r21, 0x45	; 69
    1e12:	6d 85       	ldd	r22, Y+13	; 0x0d
    1e14:	7e 85       	ldd	r23, Y+14	; 0x0e
    1e16:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e18:	98 89       	ldd	r25, Y+16	; 0x10
    1e1a:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__mulsf3>
    1e1e:	dc 01       	movw	r26, r24
    1e20:	cb 01       	movw	r24, r22
    1e22:	89 8b       	std	Y+17, r24	; 0x11
    1e24:	9a 8b       	std	Y+18, r25	; 0x12
    1e26:	ab 8b       	std	Y+19, r26	; 0x13
    1e28:	bc 8b       	std	Y+20, r27	; 0x14
    1e2a:	20 e0       	ldi	r18, 0x00	; 0
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	40 e8       	ldi	r20, 0x80	; 128
    1e30:	5f e3       	ldi	r21, 0x3F	; 63
    1e32:	69 89       	ldd	r22, Y+17	; 0x11
    1e34:	7a 89       	ldd	r23, Y+18	; 0x12
    1e36:	8b 89       	ldd	r24, Y+19	; 0x13
    1e38:	9c 89       	ldd	r25, Y+20	; 0x14
    1e3a:	0e 94 45 1b 	call	0x368a	; 0x368a <__cmpsf2>
    1e3e:	88 23       	and	r24, r24
    1e40:	2c f4       	brge	.+10     	; 0x1e4c <LCD_init+0x362>
    1e42:	81 e0       	ldi	r24, 0x01	; 1
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	9e 8b       	std	Y+22, r25	; 0x16
    1e48:	8d 8b       	std	Y+21, r24	; 0x15
    1e4a:	3f c0       	rjmp	.+126    	; 0x1eca <LCD_init+0x3e0>
    1e4c:	20 e0       	ldi	r18, 0x00	; 0
    1e4e:	3f ef       	ldi	r19, 0xFF	; 255
    1e50:	4f e7       	ldi	r20, 0x7F	; 127
    1e52:	57 e4       	ldi	r21, 0x47	; 71
    1e54:	69 89       	ldd	r22, Y+17	; 0x11
    1e56:	7a 89       	ldd	r23, Y+18	; 0x12
    1e58:	8b 89       	ldd	r24, Y+19	; 0x13
    1e5a:	9c 89       	ldd	r25, Y+20	; 0x14
    1e5c:	0e 94 9d 1c 	call	0x393a	; 0x393a <__gesf2>
    1e60:	18 16       	cp	r1, r24
    1e62:	4c f5       	brge	.+82     	; 0x1eb6 <LCD_init+0x3cc>
    1e64:	20 e0       	ldi	r18, 0x00	; 0
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	40 e2       	ldi	r20, 0x20	; 32
    1e6a:	51 e4       	ldi	r21, 0x41	; 65
    1e6c:	6d 85       	ldd	r22, Y+13	; 0x0d
    1e6e:	7e 85       	ldd	r23, Y+14	; 0x0e
    1e70:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e72:	98 89       	ldd	r25, Y+16	; 0x10
    1e74:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__mulsf3>
    1e78:	dc 01       	movw	r26, r24
    1e7a:	cb 01       	movw	r24, r22
    1e7c:	bc 01       	movw	r22, r24
    1e7e:	cd 01       	movw	r24, r26
    1e80:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__fixunssfsi>
    1e84:	dc 01       	movw	r26, r24
    1e86:	cb 01       	movw	r24, r22
    1e88:	9e 8b       	std	Y+22, r25	; 0x16
    1e8a:	8d 8b       	std	Y+21, r24	; 0x15
    1e8c:	0f c0       	rjmp	.+30     	; 0x1eac <LCD_init+0x3c2>
    1e8e:	80 e9       	ldi	r24, 0x90	; 144
    1e90:	91 e0       	ldi	r25, 0x01	; 1
    1e92:	98 8f       	std	Y+24, r25	; 0x18
    1e94:	8f 8b       	std	Y+23, r24	; 0x17
    1e96:	8f 89       	ldd	r24, Y+23	; 0x17
    1e98:	98 8d       	ldd	r25, Y+24	; 0x18
    1e9a:	01 97       	sbiw	r24, 0x01	; 1
    1e9c:	f1 f7       	brne	.-4      	; 0x1e9a <LCD_init+0x3b0>
    1e9e:	98 8f       	std	Y+24, r25	; 0x18
    1ea0:	8f 8b       	std	Y+23, r24	; 0x17
    1ea2:	8d 89       	ldd	r24, Y+21	; 0x15
    1ea4:	9e 89       	ldd	r25, Y+22	; 0x16
    1ea6:	01 97       	sbiw	r24, 0x01	; 1
    1ea8:	9e 8b       	std	Y+22, r25	; 0x16
    1eaa:	8d 8b       	std	Y+21, r24	; 0x15
    1eac:	8d 89       	ldd	r24, Y+21	; 0x15
    1eae:	9e 89       	ldd	r25, Y+22	; 0x16
    1eb0:	89 2b       	or	r24, r25
    1eb2:	69 f7       	brne	.-38     	; 0x1e8e <LCD_init+0x3a4>
    1eb4:	14 c0       	rjmp	.+40     	; 0x1ede <LCD_init+0x3f4>
    1eb6:	69 89       	ldd	r22, Y+17	; 0x11
    1eb8:	7a 89       	ldd	r23, Y+18	; 0x12
    1eba:	8b 89       	ldd	r24, Y+19	; 0x13
    1ebc:	9c 89       	ldd	r25, Y+20	; 0x14
    1ebe:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__fixunssfsi>
    1ec2:	dc 01       	movw	r26, r24
    1ec4:	cb 01       	movw	r24, r22
    1ec6:	9e 8b       	std	Y+22, r25	; 0x16
    1ec8:	8d 8b       	std	Y+21, r24	; 0x15
    1eca:	8d 89       	ldd	r24, Y+21	; 0x15
    1ecc:	9e 89       	ldd	r25, Y+22	; 0x16
    1ece:	9a 8f       	std	Y+26, r25	; 0x1a
    1ed0:	89 8f       	std	Y+25, r24	; 0x19
    1ed2:	89 8d       	ldd	r24, Y+25	; 0x19
    1ed4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1ed6:	01 97       	sbiw	r24, 0x01	; 1
    1ed8:	f1 f7       	brne	.-4      	; 0x1ed6 <LCD_init+0x3ec>
    1eda:	9a 8f       	std	Y+26, r25	; 0x1a
    1edc:	89 8f       	std	Y+25, r24	; 0x19
    1ede:	86 e0       	ldi	r24, 0x06	; 6
    1ee0:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <LCD_writeCmd>
    1ee4:	00 00       	nop
    1ee6:	e8 96       	adiw	r28, 0x38	; 56
    1ee8:	0f b6       	in	r0, 0x3f	; 63
    1eea:	f8 94       	cli
    1eec:	de bf       	out	0x3e, r29	; 62
    1eee:	0f be       	out	0x3f, r0	; 63
    1ef0:	cd bf       	out	0x3d, r28	; 61
    1ef2:	df 91       	pop	r29
    1ef4:	cf 91       	pop	r28
    1ef6:	08 95       	ret

00001ef8 <LCD_sendData>:
    1ef8:	cf 93       	push	r28
    1efa:	df 93       	push	r29
    1efc:	cd b7       	in	r28, 0x3d	; 61
    1efe:	de b7       	in	r29, 0x3e	; 62
    1f00:	6d 97       	sbiw	r28, 0x1d	; 29
    1f02:	0f b6       	in	r0, 0x3f	; 63
    1f04:	f8 94       	cli
    1f06:	de bf       	out	0x3e, r29	; 62
    1f08:	0f be       	out	0x3f, r0	; 63
    1f0a:	cd bf       	out	0x3d, r28	; 61
    1f0c:	8d 8f       	std	Y+29, r24	; 0x1d
    1f0e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f10:	82 95       	swap	r24
    1f12:	8f 70       	andi	r24, 0x0F	; 15
    1f14:	81 70       	andi	r24, 0x01	; 1
    1f16:	68 2f       	mov	r22, r24
    1f18:	82 e1       	ldi	r24, 0x12	; 18
    1f1a:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_setPinValue>
    1f1e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f20:	82 95       	swap	r24
    1f22:	86 95       	lsr	r24
    1f24:	87 70       	andi	r24, 0x07	; 7
    1f26:	81 70       	andi	r24, 0x01	; 1
    1f28:	68 2f       	mov	r22, r24
    1f2a:	83 e1       	ldi	r24, 0x13	; 19
    1f2c:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_setPinValue>
    1f30:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f32:	82 95       	swap	r24
    1f34:	86 95       	lsr	r24
    1f36:	86 95       	lsr	r24
    1f38:	83 70       	andi	r24, 0x03	; 3
    1f3a:	81 70       	andi	r24, 0x01	; 1
    1f3c:	68 2f       	mov	r22, r24
    1f3e:	84 e1       	ldi	r24, 0x14	; 20
    1f40:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_setPinValue>
    1f44:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f46:	88 1f       	adc	r24, r24
    1f48:	88 27       	eor	r24, r24
    1f4a:	88 1f       	adc	r24, r24
    1f4c:	68 2f       	mov	r22, r24
    1f4e:	85 e1       	ldi	r24, 0x15	; 21
    1f50:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_setPinValue>
    1f54:	61 e0       	ldi	r22, 0x01	; 1
    1f56:	8e e1       	ldi	r24, 0x1E	; 30
    1f58:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_setPinValue>
    1f5c:	80 e0       	ldi	r24, 0x00	; 0
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	a0 e8       	ldi	r26, 0x80	; 128
    1f62:	bf e3       	ldi	r27, 0x3F	; 63
    1f64:	89 83       	std	Y+1, r24	; 0x01
    1f66:	9a 83       	std	Y+2, r25	; 0x02
    1f68:	ab 83       	std	Y+3, r26	; 0x03
    1f6a:	bc 83       	std	Y+4, r27	; 0x04
    1f6c:	20 e0       	ldi	r18, 0x00	; 0
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	4a e7       	ldi	r20, 0x7A	; 122
    1f72:	55 e4       	ldi	r21, 0x45	; 69
    1f74:	69 81       	ldd	r22, Y+1	; 0x01
    1f76:	7a 81       	ldd	r23, Y+2	; 0x02
    1f78:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f7c:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__mulsf3>
    1f80:	dc 01       	movw	r26, r24
    1f82:	cb 01       	movw	r24, r22
    1f84:	8b 8b       	std	Y+19, r24	; 0x13
    1f86:	9c 8b       	std	Y+20, r25	; 0x14
    1f88:	ad 8b       	std	Y+21, r26	; 0x15
    1f8a:	be 8b       	std	Y+22, r27	; 0x16
    1f8c:	20 e0       	ldi	r18, 0x00	; 0
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	40 e8       	ldi	r20, 0x80	; 128
    1f92:	5f e3       	ldi	r21, 0x3F	; 63
    1f94:	6b 89       	ldd	r22, Y+19	; 0x13
    1f96:	7c 89       	ldd	r23, Y+20	; 0x14
    1f98:	8d 89       	ldd	r24, Y+21	; 0x15
    1f9a:	9e 89       	ldd	r25, Y+22	; 0x16
    1f9c:	0e 94 45 1b 	call	0x368a	; 0x368a <__cmpsf2>
    1fa0:	88 23       	and	r24, r24
    1fa2:	2c f4       	brge	.+10     	; 0x1fae <LCD_sendData+0xb6>
    1fa4:	81 e0       	ldi	r24, 0x01	; 1
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	98 8f       	std	Y+24, r25	; 0x18
    1faa:	8f 8b       	std	Y+23, r24	; 0x17
    1fac:	3f c0       	rjmp	.+126    	; 0x202c <LCD_sendData+0x134>
    1fae:	20 e0       	ldi	r18, 0x00	; 0
    1fb0:	3f ef       	ldi	r19, 0xFF	; 255
    1fb2:	4f e7       	ldi	r20, 0x7F	; 127
    1fb4:	57 e4       	ldi	r21, 0x47	; 71
    1fb6:	6b 89       	ldd	r22, Y+19	; 0x13
    1fb8:	7c 89       	ldd	r23, Y+20	; 0x14
    1fba:	8d 89       	ldd	r24, Y+21	; 0x15
    1fbc:	9e 89       	ldd	r25, Y+22	; 0x16
    1fbe:	0e 94 9d 1c 	call	0x393a	; 0x393a <__gesf2>
    1fc2:	18 16       	cp	r1, r24
    1fc4:	4c f5       	brge	.+82     	; 0x2018 <LCD_sendData+0x120>
    1fc6:	20 e0       	ldi	r18, 0x00	; 0
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	40 e2       	ldi	r20, 0x20	; 32
    1fcc:	51 e4       	ldi	r21, 0x41	; 65
    1fce:	69 81       	ldd	r22, Y+1	; 0x01
    1fd0:	7a 81       	ldd	r23, Y+2	; 0x02
    1fd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd4:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd6:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__mulsf3>
    1fda:	dc 01       	movw	r26, r24
    1fdc:	cb 01       	movw	r24, r22
    1fde:	bc 01       	movw	r22, r24
    1fe0:	cd 01       	movw	r24, r26
    1fe2:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__fixunssfsi>
    1fe6:	dc 01       	movw	r26, r24
    1fe8:	cb 01       	movw	r24, r22
    1fea:	98 8f       	std	Y+24, r25	; 0x18
    1fec:	8f 8b       	std	Y+23, r24	; 0x17
    1fee:	0f c0       	rjmp	.+30     	; 0x200e <LCD_sendData+0x116>
    1ff0:	80 e9       	ldi	r24, 0x90	; 144
    1ff2:	91 e0       	ldi	r25, 0x01	; 1
    1ff4:	9a 8f       	std	Y+26, r25	; 0x1a
    1ff6:	89 8f       	std	Y+25, r24	; 0x19
    1ff8:	89 8d       	ldd	r24, Y+25	; 0x19
    1ffa:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1ffc:	01 97       	sbiw	r24, 0x01	; 1
    1ffe:	f1 f7       	brne	.-4      	; 0x1ffc <LCD_sendData+0x104>
    2000:	9a 8f       	std	Y+26, r25	; 0x1a
    2002:	89 8f       	std	Y+25, r24	; 0x19
    2004:	8f 89       	ldd	r24, Y+23	; 0x17
    2006:	98 8d       	ldd	r25, Y+24	; 0x18
    2008:	01 97       	sbiw	r24, 0x01	; 1
    200a:	98 8f       	std	Y+24, r25	; 0x18
    200c:	8f 8b       	std	Y+23, r24	; 0x17
    200e:	8f 89       	ldd	r24, Y+23	; 0x17
    2010:	98 8d       	ldd	r25, Y+24	; 0x18
    2012:	89 2b       	or	r24, r25
    2014:	69 f7       	brne	.-38     	; 0x1ff0 <LCD_sendData+0xf8>
    2016:	14 c0       	rjmp	.+40     	; 0x2040 <LCD_sendData+0x148>
    2018:	6b 89       	ldd	r22, Y+19	; 0x13
    201a:	7c 89       	ldd	r23, Y+20	; 0x14
    201c:	8d 89       	ldd	r24, Y+21	; 0x15
    201e:	9e 89       	ldd	r25, Y+22	; 0x16
    2020:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__fixunssfsi>
    2024:	dc 01       	movw	r26, r24
    2026:	cb 01       	movw	r24, r22
    2028:	98 8f       	std	Y+24, r25	; 0x18
    202a:	8f 8b       	std	Y+23, r24	; 0x17
    202c:	8f 89       	ldd	r24, Y+23	; 0x17
    202e:	98 8d       	ldd	r25, Y+24	; 0x18
    2030:	9c 8f       	std	Y+28, r25	; 0x1c
    2032:	8b 8f       	std	Y+27, r24	; 0x1b
    2034:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2036:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2038:	01 97       	sbiw	r24, 0x01	; 1
    203a:	f1 f7       	brne	.-4      	; 0x2038 <LCD_sendData+0x140>
    203c:	9c 8f       	std	Y+28, r25	; 0x1c
    203e:	8b 8f       	std	Y+27, r24	; 0x1b
    2040:	60 e0       	ldi	r22, 0x00	; 0
    2042:	8e e1       	ldi	r24, 0x1E	; 30
    2044:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_setPinValue>
    2048:	8d 8d       	ldd	r24, Y+29	; 0x1d
    204a:	81 70       	andi	r24, 0x01	; 1
    204c:	68 2f       	mov	r22, r24
    204e:	82 e1       	ldi	r24, 0x12	; 18
    2050:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_setPinValue>
    2054:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2056:	86 95       	lsr	r24
    2058:	81 70       	andi	r24, 0x01	; 1
    205a:	68 2f       	mov	r22, r24
    205c:	83 e1       	ldi	r24, 0x13	; 19
    205e:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_setPinValue>
    2062:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2064:	86 95       	lsr	r24
    2066:	86 95       	lsr	r24
    2068:	81 70       	andi	r24, 0x01	; 1
    206a:	68 2f       	mov	r22, r24
    206c:	84 e1       	ldi	r24, 0x14	; 20
    206e:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_setPinValue>
    2072:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2074:	86 95       	lsr	r24
    2076:	86 95       	lsr	r24
    2078:	86 95       	lsr	r24
    207a:	81 70       	andi	r24, 0x01	; 1
    207c:	68 2f       	mov	r22, r24
    207e:	85 e1       	ldi	r24, 0x15	; 21
    2080:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_setPinValue>
    2084:	61 e0       	ldi	r22, 0x01	; 1
    2086:	8e e1       	ldi	r24, 0x1E	; 30
    2088:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_setPinValue>
    208c:	80 e0       	ldi	r24, 0x00	; 0
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	a0 e8       	ldi	r26, 0x80	; 128
    2092:	bf e3       	ldi	r27, 0x3F	; 63
    2094:	8d 83       	std	Y+5, r24	; 0x05
    2096:	9e 83       	std	Y+6, r25	; 0x06
    2098:	af 83       	std	Y+7, r26	; 0x07
    209a:	b8 87       	std	Y+8, r27	; 0x08
    209c:	20 e0       	ldi	r18, 0x00	; 0
    209e:	30 e0       	ldi	r19, 0x00	; 0
    20a0:	4a e7       	ldi	r20, 0x7A	; 122
    20a2:	55 e4       	ldi	r21, 0x45	; 69
    20a4:	6d 81       	ldd	r22, Y+5	; 0x05
    20a6:	7e 81       	ldd	r23, Y+6	; 0x06
    20a8:	8f 81       	ldd	r24, Y+7	; 0x07
    20aa:	98 85       	ldd	r25, Y+8	; 0x08
    20ac:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__mulsf3>
    20b0:	dc 01       	movw	r26, r24
    20b2:	cb 01       	movw	r24, r22
    20b4:	89 87       	std	Y+9, r24	; 0x09
    20b6:	9a 87       	std	Y+10, r25	; 0x0a
    20b8:	ab 87       	std	Y+11, r26	; 0x0b
    20ba:	bc 87       	std	Y+12, r27	; 0x0c
    20bc:	20 e0       	ldi	r18, 0x00	; 0
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	40 e8       	ldi	r20, 0x80	; 128
    20c2:	5f e3       	ldi	r21, 0x3F	; 63
    20c4:	69 85       	ldd	r22, Y+9	; 0x09
    20c6:	7a 85       	ldd	r23, Y+10	; 0x0a
    20c8:	8b 85       	ldd	r24, Y+11	; 0x0b
    20ca:	9c 85       	ldd	r25, Y+12	; 0x0c
    20cc:	0e 94 45 1b 	call	0x368a	; 0x368a <__cmpsf2>
    20d0:	88 23       	and	r24, r24
    20d2:	2c f4       	brge	.+10     	; 0x20de <LCD_sendData+0x1e6>
    20d4:	81 e0       	ldi	r24, 0x01	; 1
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	9e 87       	std	Y+14, r25	; 0x0e
    20da:	8d 87       	std	Y+13, r24	; 0x0d
    20dc:	3f c0       	rjmp	.+126    	; 0x215c <LCD_sendData+0x264>
    20de:	20 e0       	ldi	r18, 0x00	; 0
    20e0:	3f ef       	ldi	r19, 0xFF	; 255
    20e2:	4f e7       	ldi	r20, 0x7F	; 127
    20e4:	57 e4       	ldi	r21, 0x47	; 71
    20e6:	69 85       	ldd	r22, Y+9	; 0x09
    20e8:	7a 85       	ldd	r23, Y+10	; 0x0a
    20ea:	8b 85       	ldd	r24, Y+11	; 0x0b
    20ec:	9c 85       	ldd	r25, Y+12	; 0x0c
    20ee:	0e 94 9d 1c 	call	0x393a	; 0x393a <__gesf2>
    20f2:	18 16       	cp	r1, r24
    20f4:	4c f5       	brge	.+82     	; 0x2148 <LCD_sendData+0x250>
    20f6:	20 e0       	ldi	r18, 0x00	; 0
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	40 e2       	ldi	r20, 0x20	; 32
    20fc:	51 e4       	ldi	r21, 0x41	; 65
    20fe:	6d 81       	ldd	r22, Y+5	; 0x05
    2100:	7e 81       	ldd	r23, Y+6	; 0x06
    2102:	8f 81       	ldd	r24, Y+7	; 0x07
    2104:	98 85       	ldd	r25, Y+8	; 0x08
    2106:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__mulsf3>
    210a:	dc 01       	movw	r26, r24
    210c:	cb 01       	movw	r24, r22
    210e:	bc 01       	movw	r22, r24
    2110:	cd 01       	movw	r24, r26
    2112:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__fixunssfsi>
    2116:	dc 01       	movw	r26, r24
    2118:	cb 01       	movw	r24, r22
    211a:	9e 87       	std	Y+14, r25	; 0x0e
    211c:	8d 87       	std	Y+13, r24	; 0x0d
    211e:	0f c0       	rjmp	.+30     	; 0x213e <LCD_sendData+0x246>
    2120:	80 e9       	ldi	r24, 0x90	; 144
    2122:	91 e0       	ldi	r25, 0x01	; 1
    2124:	98 8b       	std	Y+16, r25	; 0x10
    2126:	8f 87       	std	Y+15, r24	; 0x0f
    2128:	8f 85       	ldd	r24, Y+15	; 0x0f
    212a:	98 89       	ldd	r25, Y+16	; 0x10
    212c:	01 97       	sbiw	r24, 0x01	; 1
    212e:	f1 f7       	brne	.-4      	; 0x212c <LCD_sendData+0x234>
    2130:	98 8b       	std	Y+16, r25	; 0x10
    2132:	8f 87       	std	Y+15, r24	; 0x0f
    2134:	8d 85       	ldd	r24, Y+13	; 0x0d
    2136:	9e 85       	ldd	r25, Y+14	; 0x0e
    2138:	01 97       	sbiw	r24, 0x01	; 1
    213a:	9e 87       	std	Y+14, r25	; 0x0e
    213c:	8d 87       	std	Y+13, r24	; 0x0d
    213e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2140:	9e 85       	ldd	r25, Y+14	; 0x0e
    2142:	89 2b       	or	r24, r25
    2144:	69 f7       	brne	.-38     	; 0x2120 <LCD_sendData+0x228>
    2146:	14 c0       	rjmp	.+40     	; 0x2170 <LCD_sendData+0x278>
    2148:	69 85       	ldd	r22, Y+9	; 0x09
    214a:	7a 85       	ldd	r23, Y+10	; 0x0a
    214c:	8b 85       	ldd	r24, Y+11	; 0x0b
    214e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2150:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__fixunssfsi>
    2154:	dc 01       	movw	r26, r24
    2156:	cb 01       	movw	r24, r22
    2158:	9e 87       	std	Y+14, r25	; 0x0e
    215a:	8d 87       	std	Y+13, r24	; 0x0d
    215c:	8d 85       	ldd	r24, Y+13	; 0x0d
    215e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2160:	9a 8b       	std	Y+18, r25	; 0x12
    2162:	89 8b       	std	Y+17, r24	; 0x11
    2164:	89 89       	ldd	r24, Y+17	; 0x11
    2166:	9a 89       	ldd	r25, Y+18	; 0x12
    2168:	01 97       	sbiw	r24, 0x01	; 1
    216a:	f1 f7       	brne	.-4      	; 0x2168 <LCD_sendData+0x270>
    216c:	9a 8b       	std	Y+18, r25	; 0x12
    216e:	89 8b       	std	Y+17, r24	; 0x11
    2170:	60 e0       	ldi	r22, 0x00	; 0
    2172:	8e e1       	ldi	r24, 0x1E	; 30
    2174:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_setPinValue>
    2178:	00 00       	nop
    217a:	6d 96       	adiw	r28, 0x1d	; 29
    217c:	0f b6       	in	r0, 0x3f	; 63
    217e:	f8 94       	cli
    2180:	de bf       	out	0x3e, r29	; 62
    2182:	0f be       	out	0x3f, r0	; 63
    2184:	cd bf       	out	0x3d, r28	; 61
    2186:	df 91       	pop	r29
    2188:	cf 91       	pop	r28
    218a:	08 95       	ret

0000218c <LCD_writeChar>:
    218c:	cf 93       	push	r28
    218e:	df 93       	push	r29
    2190:	1f 92       	push	r1
    2192:	cd b7       	in	r28, 0x3d	; 61
    2194:	de b7       	in	r29, 0x3e	; 62
    2196:	89 83       	std	Y+1, r24	; 0x01
    2198:	60 e0       	ldi	r22, 0x00	; 0
    219a:	87 e1       	ldi	r24, 0x17	; 23
    219c:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_setPinValue>
    21a0:	61 e0       	ldi	r22, 0x01	; 1
    21a2:	86 e1       	ldi	r24, 0x16	; 22
    21a4:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_setPinValue>
    21a8:	89 81       	ldd	r24, Y+1	; 0x01
    21aa:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <LCD_sendData>
    21ae:	00 00       	nop
    21b0:	0f 90       	pop	r0
    21b2:	df 91       	pop	r29
    21b4:	cf 91       	pop	r28
    21b6:	08 95       	ret

000021b8 <LCD_writeCmd>:
    21b8:	cf 93       	push	r28
    21ba:	df 93       	push	r29
    21bc:	1f 92       	push	r1
    21be:	cd b7       	in	r28, 0x3d	; 61
    21c0:	de b7       	in	r29, 0x3e	; 62
    21c2:	89 83       	std	Y+1, r24	; 0x01
    21c4:	60 e0       	ldi	r22, 0x00	; 0
    21c6:	87 e1       	ldi	r24, 0x17	; 23
    21c8:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_setPinValue>
    21cc:	60 e0       	ldi	r22, 0x00	; 0
    21ce:	86 e1       	ldi	r24, 0x16	; 22
    21d0:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_setPinValue>
    21d4:	89 81       	ldd	r24, Y+1	; 0x01
    21d6:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <LCD_sendData>
    21da:	00 00       	nop
    21dc:	0f 90       	pop	r0
    21de:	df 91       	pop	r29
    21e0:	cf 91       	pop	r28
    21e2:	08 95       	ret

000021e4 <LCD_writeStr>:
    21e4:	cf 93       	push	r28
    21e6:	df 93       	push	r29
    21e8:	00 d0       	rcall	.+0      	; 0x21ea <LCD_writeStr+0x6>
    21ea:	1f 92       	push	r1
    21ec:	cd b7       	in	r28, 0x3d	; 61
    21ee:	de b7       	in	r29, 0x3e	; 62
    21f0:	9b 83       	std	Y+3, r25	; 0x03
    21f2:	8a 83       	std	Y+2, r24	; 0x02
    21f4:	19 82       	std	Y+1, r1	; 0x01
    21f6:	0e c0       	rjmp	.+28     	; 0x2214 <LCD_writeStr+0x30>
    21f8:	89 81       	ldd	r24, Y+1	; 0x01
    21fa:	88 2f       	mov	r24, r24
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	2a 81       	ldd	r18, Y+2	; 0x02
    2200:	3b 81       	ldd	r19, Y+3	; 0x03
    2202:	82 0f       	add	r24, r18
    2204:	93 1f       	adc	r25, r19
    2206:	fc 01       	movw	r30, r24
    2208:	80 81       	ld	r24, Z
    220a:	0e 94 c6 10 	call	0x218c	; 0x218c <LCD_writeChar>
    220e:	89 81       	ldd	r24, Y+1	; 0x01
    2210:	8f 5f       	subi	r24, 0xFF	; 255
    2212:	89 83       	std	Y+1, r24	; 0x01
    2214:	89 81       	ldd	r24, Y+1	; 0x01
    2216:	88 2f       	mov	r24, r24
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	2a 81       	ldd	r18, Y+2	; 0x02
    221c:	3b 81       	ldd	r19, Y+3	; 0x03
    221e:	82 0f       	add	r24, r18
    2220:	93 1f       	adc	r25, r19
    2222:	fc 01       	movw	r30, r24
    2224:	80 81       	ld	r24, Z
    2226:	88 23       	and	r24, r24
    2228:	39 f7       	brne	.-50     	; 0x21f8 <LCD_writeStr+0x14>
    222a:	00 00       	nop
    222c:	0f 90       	pop	r0
    222e:	0f 90       	pop	r0
    2230:	0f 90       	pop	r0
    2232:	df 91       	pop	r29
    2234:	cf 91       	pop	r28
    2236:	08 95       	ret

00002238 <LCD_clearDis>:

void LCD_clearDis()
{
    2238:	cf 93       	push	r28
    223a:	df 93       	push	r29
    223c:	cd b7       	in	r28, 0x3d	; 61
    223e:	de b7       	in	r29, 0x3e	; 62
    2240:	2e 97       	sbiw	r28, 0x0e	; 14
    2242:	0f b6       	in	r0, 0x3f	; 63
    2244:	f8 94       	cli
    2246:	de bf       	out	0x3e, r29	; 62
    2248:	0f be       	out	0x3f, r0	; 63
    224a:	cd bf       	out	0x3d, r28	; 61
	LCD_writeCmd(0b00000001);
    224c:	81 e0       	ldi	r24, 0x01	; 1
    224e:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <LCD_writeCmd>
    2252:	80 e0       	ldi	r24, 0x00	; 0
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	a0 e8       	ldi	r26, 0x80	; 128
    2258:	bf e3       	ldi	r27, 0x3F	; 63
    225a:	89 83       	std	Y+1, r24	; 0x01
    225c:	9a 83       	std	Y+2, r25	; 0x02
    225e:	ab 83       	std	Y+3, r26	; 0x03
    2260:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2262:	20 e0       	ldi	r18, 0x00	; 0
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	4a e7       	ldi	r20, 0x7A	; 122
    2268:	55 e4       	ldi	r21, 0x45	; 69
    226a:	69 81       	ldd	r22, Y+1	; 0x01
    226c:	7a 81       	ldd	r23, Y+2	; 0x02
    226e:	8b 81       	ldd	r24, Y+3	; 0x03
    2270:	9c 81       	ldd	r25, Y+4	; 0x04
    2272:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__mulsf3>
    2276:	dc 01       	movw	r26, r24
    2278:	cb 01       	movw	r24, r22
    227a:	8d 83       	std	Y+5, r24	; 0x05
    227c:	9e 83       	std	Y+6, r25	; 0x06
    227e:	af 83       	std	Y+7, r26	; 0x07
    2280:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2282:	20 e0       	ldi	r18, 0x00	; 0
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	40 e8       	ldi	r20, 0x80	; 128
    2288:	5f e3       	ldi	r21, 0x3F	; 63
    228a:	6d 81       	ldd	r22, Y+5	; 0x05
    228c:	7e 81       	ldd	r23, Y+6	; 0x06
    228e:	8f 81       	ldd	r24, Y+7	; 0x07
    2290:	98 85       	ldd	r25, Y+8	; 0x08
    2292:	0e 94 45 1b 	call	0x368a	; 0x368a <__cmpsf2>
    2296:	88 23       	and	r24, r24
    2298:	2c f4       	brge	.+10     	; 0x22a4 <LCD_clearDis+0x6c>
		__ticks = 1;
    229a:	81 e0       	ldi	r24, 0x01	; 1
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	9a 87       	std	Y+10, r25	; 0x0a
    22a0:	89 87       	std	Y+9, r24	; 0x09
    22a2:	3f c0       	rjmp	.+126    	; 0x2322 <LCD_clearDis+0xea>
	else if (__tmp > 65535)
    22a4:	20 e0       	ldi	r18, 0x00	; 0
    22a6:	3f ef       	ldi	r19, 0xFF	; 255
    22a8:	4f e7       	ldi	r20, 0x7F	; 127
    22aa:	57 e4       	ldi	r21, 0x47	; 71
    22ac:	6d 81       	ldd	r22, Y+5	; 0x05
    22ae:	7e 81       	ldd	r23, Y+6	; 0x06
    22b0:	8f 81       	ldd	r24, Y+7	; 0x07
    22b2:	98 85       	ldd	r25, Y+8	; 0x08
    22b4:	0e 94 9d 1c 	call	0x393a	; 0x393a <__gesf2>
    22b8:	18 16       	cp	r1, r24
    22ba:	4c f5       	brge	.+82     	; 0x230e <LCD_clearDis+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22bc:	20 e0       	ldi	r18, 0x00	; 0
    22be:	30 e0       	ldi	r19, 0x00	; 0
    22c0:	40 e2       	ldi	r20, 0x20	; 32
    22c2:	51 e4       	ldi	r21, 0x41	; 65
    22c4:	69 81       	ldd	r22, Y+1	; 0x01
    22c6:	7a 81       	ldd	r23, Y+2	; 0x02
    22c8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ca:	9c 81       	ldd	r25, Y+4	; 0x04
    22cc:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__mulsf3>
    22d0:	dc 01       	movw	r26, r24
    22d2:	cb 01       	movw	r24, r22
    22d4:	bc 01       	movw	r22, r24
    22d6:	cd 01       	movw	r24, r26
    22d8:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__fixunssfsi>
    22dc:	dc 01       	movw	r26, r24
    22de:	cb 01       	movw	r24, r22
    22e0:	9a 87       	std	Y+10, r25	; 0x0a
    22e2:	89 87       	std	Y+9, r24	; 0x09
    22e4:	0f c0       	rjmp	.+30     	; 0x2304 <LCD_clearDis+0xcc>
    22e6:	80 e9       	ldi	r24, 0x90	; 144
    22e8:	91 e0       	ldi	r25, 0x01	; 1
    22ea:	9c 87       	std	Y+12, r25	; 0x0c
    22ec:	8b 87       	std	Y+11, r24	; 0x0b
    22ee:	8b 85       	ldd	r24, Y+11	; 0x0b
    22f0:	9c 85       	ldd	r25, Y+12	; 0x0c
    22f2:	01 97       	sbiw	r24, 0x01	; 1
    22f4:	f1 f7       	brne	.-4      	; 0x22f2 <LCD_clearDis+0xba>
    22f6:	9c 87       	std	Y+12, r25	; 0x0c
    22f8:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22fa:	89 85       	ldd	r24, Y+9	; 0x09
    22fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    22fe:	01 97       	sbiw	r24, 0x01	; 1
    2300:	9a 87       	std	Y+10, r25	; 0x0a
    2302:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2304:	89 85       	ldd	r24, Y+9	; 0x09
    2306:	9a 85       	ldd	r25, Y+10	; 0x0a
    2308:	89 2b       	or	r24, r25
    230a:	69 f7       	brne	.-38     	; 0x22e6 <LCD_clearDis+0xae>
	_delay_ms(1);
}
    230c:	14 c0       	rjmp	.+40     	; 0x2336 <LCD_clearDis+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    230e:	6d 81       	ldd	r22, Y+5	; 0x05
    2310:	7e 81       	ldd	r23, Y+6	; 0x06
    2312:	8f 81       	ldd	r24, Y+7	; 0x07
    2314:	98 85       	ldd	r25, Y+8	; 0x08
    2316:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__fixunssfsi>
    231a:	dc 01       	movw	r26, r24
    231c:	cb 01       	movw	r24, r22
    231e:	9a 87       	std	Y+10, r25	; 0x0a
    2320:	89 87       	std	Y+9, r24	; 0x09
    2322:	89 85       	ldd	r24, Y+9	; 0x09
    2324:	9a 85       	ldd	r25, Y+10	; 0x0a
    2326:	9e 87       	std	Y+14, r25	; 0x0e
    2328:	8d 87       	std	Y+13, r24	; 0x0d
    232a:	8d 85       	ldd	r24, Y+13	; 0x0d
    232c:	9e 85       	ldd	r25, Y+14	; 0x0e
    232e:	01 97       	sbiw	r24, 0x01	; 1
    2330:	f1 f7       	brne	.-4      	; 0x232e <LCD_clearDis+0xf6>
    2332:	9e 87       	std	Y+14, r25	; 0x0e
    2334:	8d 87       	std	Y+13, r24	; 0x0d
    2336:	00 00       	nop
    2338:	2e 96       	adiw	r28, 0x0e	; 14
    233a:	0f b6       	in	r0, 0x3f	; 63
    233c:	f8 94       	cli
    233e:	de bf       	out	0x3e, r29	; 62
    2340:	0f be       	out	0x3f, r0	; 63
    2342:	cd bf       	out	0x3d, r28	; 61
    2344:	df 91       	pop	r29
    2346:	cf 91       	pop	r28
    2348:	08 95       	ret

0000234a <LCD_goto>:

void LCD_goto(u8 x, u8 y)
{
    234a:	cf 93       	push	r28
    234c:	df 93       	push	r29
    234e:	00 d0       	rcall	.+0      	; 0x2350 <LCD_goto+0x6>
    2350:	cd b7       	in	r28, 0x3d	; 61
    2352:	de b7       	in	r29, 0x3e	; 62
    2354:	89 83       	std	Y+1, r24	; 0x01
    2356:	6a 83       	std	Y+2, r22	; 0x02
	if(y==1)
    2358:	8a 81       	ldd	r24, Y+2	; 0x02
    235a:	81 30       	cpi	r24, 0x01	; 1
    235c:	29 f4       	brne	.+10     	; 0x2368 <LCD_goto+0x1e>
	{
	//line 1
	LCD_writeCmd(0b10000000+x);
    235e:	89 81       	ldd	r24, Y+1	; 0x01
    2360:	80 58       	subi	r24, 0x80	; 128
    2362:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <LCD_writeCmd>
	else if(y==2)
	{
	//line 2
	LCD_writeCmd(0b10000000+0x40+x);
	}
}
    2366:	07 c0       	rjmp	.+14     	; 0x2376 <LCD_goto+0x2c>
	if(y==1)
	{
	//line 1
	LCD_writeCmd(0b10000000+x);
	}
	else if(y==2)
    2368:	8a 81       	ldd	r24, Y+2	; 0x02
    236a:	82 30       	cpi	r24, 0x02	; 2
    236c:	21 f4       	brne	.+8      	; 0x2376 <LCD_goto+0x2c>
	{
	//line 2
	LCD_writeCmd(0b10000000+0x40+x);
    236e:	89 81       	ldd	r24, Y+1	; 0x01
    2370:	80 54       	subi	r24, 0x40	; 64
    2372:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <LCD_writeCmd>
	}
}
    2376:	00 00       	nop
    2378:	0f 90       	pop	r0
    237a:	0f 90       	pop	r0
    237c:	df 91       	pop	r29
    237e:	cf 91       	pop	r28
    2380:	08 95       	ret

00002382 <DIO_setPinValue>:
 */ 
#include "DIO_INT.h"
#include "STD_TYPES.h"
#include "BIT_MATH.h"
void DIO_setPinValue(u8 pinNum,u8 level)
{
    2382:	cf 93       	push	r28
    2384:	df 93       	push	r29
    2386:	00 d0       	rcall	.+0      	; 0x2388 <DIO_setPinValue+0x6>
    2388:	cd b7       	in	r28, 0x3d	; 61
    238a:	de b7       	in	r29, 0x3e	; 62
    238c:	89 83       	std	Y+1, r24	; 0x01
    238e:	6a 83       	std	Y+2, r22	; 0x02
	if (pinNum>=0 && pinNum<=7)
    2390:	89 81       	ldd	r24, Y+1	; 0x01
    2392:	88 30       	cpi	r24, 0x08	; 8
    2394:	90 f5       	brcc	.+100    	; 0x23fa <DIO_setPinValue+0x78>
	{
		if (level==DIO_HIGH)
    2396:	8a 81       	ldd	r24, Y+2	; 0x02
    2398:	81 30       	cpi	r24, 0x01	; 1
    239a:	a9 f4       	brne	.+42     	; 0x23c6 <DIO_setPinValue+0x44>
		{
			SET_BIT(PORTA,pinNum);
    239c:	8b e3       	ldi	r24, 0x3B	; 59
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	2b e3       	ldi	r18, 0x3B	; 59
    23a2:	30 e0       	ldi	r19, 0x00	; 0
    23a4:	f9 01       	movw	r30, r18
    23a6:	20 81       	ld	r18, Z
    23a8:	62 2f       	mov	r22, r18
    23aa:	29 81       	ldd	r18, Y+1	; 0x01
    23ac:	42 2f       	mov	r20, r18
    23ae:	50 e0       	ldi	r21, 0x00	; 0
    23b0:	21 e0       	ldi	r18, 0x01	; 1
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	02 c0       	rjmp	.+4      	; 0x23ba <DIO_setPinValue+0x38>
    23b6:	22 0f       	add	r18, r18
    23b8:	33 1f       	adc	r19, r19
    23ba:	4a 95       	dec	r20
    23bc:	e2 f7       	brpl	.-8      	; 0x23b6 <DIO_setPinValue+0x34>
    23be:	26 2b       	or	r18, r22
    23c0:	fc 01       	movw	r30, r24
    23c2:	20 83       	st	Z, r18
	  	{
		  	CLEAR_BIT(PORTD,pinNum);
	  	}
  	}
	
}
    23c4:	cd c0       	rjmp	.+410    	; 0x2560 <DIO_setPinValue+0x1de>
	{
		if (level==DIO_HIGH)
		{
			SET_BIT(PORTA,pinNum);
		}
		else if (level==DIO_LOW)
    23c6:	8a 81       	ldd	r24, Y+2	; 0x02
    23c8:	88 23       	and	r24, r24
    23ca:	09 f0       	breq	.+2      	; 0x23ce <DIO_setPinValue+0x4c>
    23cc:	c9 c0       	rjmp	.+402    	; 0x2560 <DIO_setPinValue+0x1de>
		{
			CLEAR_BIT(PORTA,pinNum);
    23ce:	8b e3       	ldi	r24, 0x3B	; 59
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	2b e3       	ldi	r18, 0x3B	; 59
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	f9 01       	movw	r30, r18
    23d8:	20 81       	ld	r18, Z
    23da:	62 2f       	mov	r22, r18
    23dc:	29 81       	ldd	r18, Y+1	; 0x01
    23de:	42 2f       	mov	r20, r18
    23e0:	50 e0       	ldi	r21, 0x00	; 0
    23e2:	21 e0       	ldi	r18, 0x01	; 1
    23e4:	30 e0       	ldi	r19, 0x00	; 0
    23e6:	02 c0       	rjmp	.+4      	; 0x23ec <DIO_setPinValue+0x6a>
    23e8:	22 0f       	add	r18, r18
    23ea:	33 1f       	adc	r19, r19
    23ec:	4a 95       	dec	r20
    23ee:	e2 f7       	brpl	.-8      	; 0x23e8 <DIO_setPinValue+0x66>
    23f0:	20 95       	com	r18
    23f2:	26 23       	and	r18, r22
    23f4:	fc 01       	movw	r30, r24
    23f6:	20 83       	st	Z, r18
	  	{
		  	CLEAR_BIT(PORTD,pinNum);
	  	}
  	}
	
}
    23f8:	b3 c0       	rjmp	.+358    	; 0x2560 <DIO_setPinValue+0x1de>
		else if (level==DIO_LOW)
		{
			CLEAR_BIT(PORTA,pinNum);
		}
	}
	else if (pinNum>=8 && pinNum<=15)
    23fa:	89 81       	ldd	r24, Y+1	; 0x01
    23fc:	88 30       	cpi	r24, 0x08	; 8
    23fe:	c0 f1       	brcs	.+112    	; 0x2470 <DIO_setPinValue+0xee>
    2400:	89 81       	ldd	r24, Y+1	; 0x01
    2402:	80 31       	cpi	r24, 0x10	; 16
    2404:	a8 f5       	brcc	.+106    	; 0x2470 <DIO_setPinValue+0xee>
	{
		pinNum-=8;
    2406:	89 81       	ldd	r24, Y+1	; 0x01
    2408:	88 50       	subi	r24, 0x08	; 8
    240a:	89 83       	std	Y+1, r24	; 0x01
				if (level==DIO_HIGH)
    240c:	8a 81       	ldd	r24, Y+2	; 0x02
    240e:	81 30       	cpi	r24, 0x01	; 1
    2410:	a9 f4       	brne	.+42     	; 0x243c <DIO_setPinValue+0xba>
		{
			SET_BIT(PORTB,pinNum);
    2412:	88 e3       	ldi	r24, 0x38	; 56
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	28 e3       	ldi	r18, 0x38	; 56
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	f9 01       	movw	r30, r18
    241c:	20 81       	ld	r18, Z
    241e:	62 2f       	mov	r22, r18
    2420:	29 81       	ldd	r18, Y+1	; 0x01
    2422:	42 2f       	mov	r20, r18
    2424:	50 e0       	ldi	r21, 0x00	; 0
    2426:	21 e0       	ldi	r18, 0x01	; 1
    2428:	30 e0       	ldi	r19, 0x00	; 0
    242a:	02 c0       	rjmp	.+4      	; 0x2430 <DIO_setPinValue+0xae>
    242c:	22 0f       	add	r18, r18
    242e:	33 1f       	adc	r19, r19
    2430:	4a 95       	dec	r20
    2432:	e2 f7       	brpl	.-8      	; 0x242c <DIO_setPinValue+0xaa>
    2434:	26 2b       	or	r18, r22
    2436:	fc 01       	movw	r30, r24
    2438:	20 83       	st	Z, r18
		}
	}
	else if (pinNum>=8 && pinNum<=15)
	{
		pinNum-=8;
				if (level==DIO_HIGH)
    243a:	8f c0       	rjmp	.+286    	; 0x255a <DIO_setPinValue+0x1d8>
		{
			SET_BIT(PORTB,pinNum);
		}
		else if (level==DIO_LOW)
    243c:	8a 81       	ldd	r24, Y+2	; 0x02
    243e:	88 23       	and	r24, r24
    2440:	09 f0       	breq	.+2      	; 0x2444 <DIO_setPinValue+0xc2>
    2442:	8b c0       	rjmp	.+278    	; 0x255a <DIO_setPinValue+0x1d8>
		{
			CLEAR_BIT(PORTB,pinNum);
    2444:	88 e3       	ldi	r24, 0x38	; 56
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	28 e3       	ldi	r18, 0x38	; 56
    244a:	30 e0       	ldi	r19, 0x00	; 0
    244c:	f9 01       	movw	r30, r18
    244e:	20 81       	ld	r18, Z
    2450:	62 2f       	mov	r22, r18
    2452:	29 81       	ldd	r18, Y+1	; 0x01
    2454:	42 2f       	mov	r20, r18
    2456:	50 e0       	ldi	r21, 0x00	; 0
    2458:	21 e0       	ldi	r18, 0x01	; 1
    245a:	30 e0       	ldi	r19, 0x00	; 0
    245c:	02 c0       	rjmp	.+4      	; 0x2462 <DIO_setPinValue+0xe0>
    245e:	22 0f       	add	r18, r18
    2460:	33 1f       	adc	r19, r19
    2462:	4a 95       	dec	r20
    2464:	e2 f7       	brpl	.-8      	; 0x245e <DIO_setPinValue+0xdc>
    2466:	20 95       	com	r18
    2468:	26 23       	and	r18, r22
    246a:	fc 01       	movw	r30, r24
    246c:	20 83       	st	Z, r18
		}
	}
	else if (pinNum>=8 && pinNum<=15)
	{
		pinNum-=8;
				if (level==DIO_HIGH)
    246e:	75 c0       	rjmp	.+234    	; 0x255a <DIO_setPinValue+0x1d8>
		else if (level==DIO_LOW)
		{
			CLEAR_BIT(PORTB,pinNum);
		}
	}
  	else if (pinNum>=16 && pinNum<=24)
    2470:	89 81       	ldd	r24, Y+1	; 0x01
    2472:	80 31       	cpi	r24, 0x10	; 16
    2474:	c0 f1       	brcs	.+112    	; 0x24e6 <DIO_setPinValue+0x164>
    2476:	89 81       	ldd	r24, Y+1	; 0x01
    2478:	89 31       	cpi	r24, 0x19	; 25
    247a:	a8 f5       	brcc	.+106    	; 0x24e6 <DIO_setPinValue+0x164>
  	{
	  	pinNum-=16;
    247c:	89 81       	ldd	r24, Y+1	; 0x01
    247e:	80 51       	subi	r24, 0x10	; 16
    2480:	89 83       	std	Y+1, r24	; 0x01
	  	if (level==DIO_HIGH)
    2482:	8a 81       	ldd	r24, Y+2	; 0x02
    2484:	81 30       	cpi	r24, 0x01	; 1
    2486:	a9 f4       	brne	.+42     	; 0x24b2 <DIO_setPinValue+0x130>
	  	{
		  	SET_BIT(PORTC,pinNum);
    2488:	85 e3       	ldi	r24, 0x35	; 53
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	25 e3       	ldi	r18, 0x35	; 53
    248e:	30 e0       	ldi	r19, 0x00	; 0
    2490:	f9 01       	movw	r30, r18
    2492:	20 81       	ld	r18, Z
    2494:	62 2f       	mov	r22, r18
    2496:	29 81       	ldd	r18, Y+1	; 0x01
    2498:	42 2f       	mov	r20, r18
    249a:	50 e0       	ldi	r21, 0x00	; 0
    249c:	21 e0       	ldi	r18, 0x01	; 1
    249e:	30 e0       	ldi	r19, 0x00	; 0
    24a0:	02 c0       	rjmp	.+4      	; 0x24a6 <DIO_setPinValue+0x124>
    24a2:	22 0f       	add	r18, r18
    24a4:	33 1f       	adc	r19, r19
    24a6:	4a 95       	dec	r20
    24a8:	e2 f7       	brpl	.-8      	; 0x24a2 <DIO_setPinValue+0x120>
    24aa:	26 2b       	or	r18, r22
    24ac:	fc 01       	movw	r30, r24
    24ae:	20 83       	st	Z, r18
		}
	}
  	else if (pinNum>=16 && pinNum<=24)
  	{
	  	pinNum-=16;
	  	if (level==DIO_HIGH)
    24b0:	56 c0       	rjmp	.+172    	; 0x255e <DIO_setPinValue+0x1dc>
	  	{
		  	SET_BIT(PORTC,pinNum);
	  	}
	  	else if (level==DIO_LOW)
    24b2:	8a 81       	ldd	r24, Y+2	; 0x02
    24b4:	88 23       	and	r24, r24
    24b6:	09 f0       	breq	.+2      	; 0x24ba <DIO_setPinValue+0x138>
    24b8:	52 c0       	rjmp	.+164    	; 0x255e <DIO_setPinValue+0x1dc>
	  	{
		  	CLEAR_BIT(PORTC,pinNum);
    24ba:	85 e3       	ldi	r24, 0x35	; 53
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	25 e3       	ldi	r18, 0x35	; 53
    24c0:	30 e0       	ldi	r19, 0x00	; 0
    24c2:	f9 01       	movw	r30, r18
    24c4:	20 81       	ld	r18, Z
    24c6:	62 2f       	mov	r22, r18
    24c8:	29 81       	ldd	r18, Y+1	; 0x01
    24ca:	42 2f       	mov	r20, r18
    24cc:	50 e0       	ldi	r21, 0x00	; 0
    24ce:	21 e0       	ldi	r18, 0x01	; 1
    24d0:	30 e0       	ldi	r19, 0x00	; 0
    24d2:	02 c0       	rjmp	.+4      	; 0x24d8 <DIO_setPinValue+0x156>
    24d4:	22 0f       	add	r18, r18
    24d6:	33 1f       	adc	r19, r19
    24d8:	4a 95       	dec	r20
    24da:	e2 f7       	brpl	.-8      	; 0x24d4 <DIO_setPinValue+0x152>
    24dc:	20 95       	com	r18
    24de:	26 23       	and	r18, r22
    24e0:	fc 01       	movw	r30, r24
    24e2:	20 83       	st	Z, r18
		}
	}
  	else if (pinNum>=16 && pinNum<=24)
  	{
	  	pinNum-=16;
	  	if (level==DIO_HIGH)
    24e4:	3c c0       	rjmp	.+120    	; 0x255e <DIO_setPinValue+0x1dc>
	  	else if (level==DIO_LOW)
	  	{
		  	CLEAR_BIT(PORTC,pinNum);
	  	}
  	}
  	else if (pinNum>=24 && pinNum<=31)
    24e6:	89 81       	ldd	r24, Y+1	; 0x01
    24e8:	88 31       	cpi	r24, 0x18	; 24
    24ea:	d0 f1       	brcs	.+116    	; 0x2560 <DIO_setPinValue+0x1de>
    24ec:	89 81       	ldd	r24, Y+1	; 0x01
    24ee:	80 32       	cpi	r24, 0x20	; 32
    24f0:	b8 f5       	brcc	.+110    	; 0x2560 <DIO_setPinValue+0x1de>
  	{
	  	pinNum-=24;
    24f2:	89 81       	ldd	r24, Y+1	; 0x01
    24f4:	88 51       	subi	r24, 0x18	; 24
    24f6:	89 83       	std	Y+1, r24	; 0x01
	  	if (level==DIO_HIGH)
    24f8:	8a 81       	ldd	r24, Y+2	; 0x02
    24fa:	81 30       	cpi	r24, 0x01	; 1
    24fc:	a9 f4       	brne	.+42     	; 0x2528 <DIO_setPinValue+0x1a6>
	  	{
		  	SET_BIT(PORTD,pinNum);
    24fe:	82 e3       	ldi	r24, 0x32	; 50
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	22 e3       	ldi	r18, 0x32	; 50
    2504:	30 e0       	ldi	r19, 0x00	; 0
    2506:	f9 01       	movw	r30, r18
    2508:	20 81       	ld	r18, Z
    250a:	62 2f       	mov	r22, r18
    250c:	29 81       	ldd	r18, Y+1	; 0x01
    250e:	42 2f       	mov	r20, r18
    2510:	50 e0       	ldi	r21, 0x00	; 0
    2512:	21 e0       	ldi	r18, 0x01	; 1
    2514:	30 e0       	ldi	r19, 0x00	; 0
    2516:	02 c0       	rjmp	.+4      	; 0x251c <DIO_setPinValue+0x19a>
    2518:	22 0f       	add	r18, r18
    251a:	33 1f       	adc	r19, r19
    251c:	4a 95       	dec	r20
    251e:	e2 f7       	brpl	.-8      	; 0x2518 <DIO_setPinValue+0x196>
    2520:	26 2b       	or	r18, r22
    2522:	fc 01       	movw	r30, r24
    2524:	20 83       	st	Z, r18
	  	{
		  	CLEAR_BIT(PORTD,pinNum);
	  	}
  	}
	
}
    2526:	1c c0       	rjmp	.+56     	; 0x2560 <DIO_setPinValue+0x1de>
	  	pinNum-=24;
	  	if (level==DIO_HIGH)
	  	{
		  	SET_BIT(PORTD,pinNum);
	  	}
	  	else if (level==DIO_LOW)
    2528:	8a 81       	ldd	r24, Y+2	; 0x02
    252a:	88 23       	and	r24, r24
    252c:	c9 f4       	brne	.+50     	; 0x2560 <DIO_setPinValue+0x1de>
	  	{
		  	CLEAR_BIT(PORTD,pinNum);
    252e:	82 e3       	ldi	r24, 0x32	; 50
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	22 e3       	ldi	r18, 0x32	; 50
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	f9 01       	movw	r30, r18
    2538:	20 81       	ld	r18, Z
    253a:	62 2f       	mov	r22, r18
    253c:	29 81       	ldd	r18, Y+1	; 0x01
    253e:	42 2f       	mov	r20, r18
    2540:	50 e0       	ldi	r21, 0x00	; 0
    2542:	21 e0       	ldi	r18, 0x01	; 1
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	02 c0       	rjmp	.+4      	; 0x254c <DIO_setPinValue+0x1ca>
    2548:	22 0f       	add	r18, r18
    254a:	33 1f       	adc	r19, r19
    254c:	4a 95       	dec	r20
    254e:	e2 f7       	brpl	.-8      	; 0x2548 <DIO_setPinValue+0x1c6>
    2550:	20 95       	com	r18
    2552:	26 23       	and	r18, r22
    2554:	fc 01       	movw	r30, r24
    2556:	20 83       	st	Z, r18
	  	}
  	}
	
}
    2558:	03 c0       	rjmp	.+6      	; 0x2560 <DIO_setPinValue+0x1de>
		}
	}
	else if (pinNum>=8 && pinNum<=15)
	{
		pinNum-=8;
				if (level==DIO_HIGH)
    255a:	00 00       	nop
    255c:	01 c0       	rjmp	.+2      	; 0x2560 <DIO_setPinValue+0x1de>
		}
	}
  	else if (pinNum>=16 && pinNum<=24)
  	{
	  	pinNum-=16;
	  	if (level==DIO_HIGH)
    255e:	00 00       	nop
	  	{
		  	CLEAR_BIT(PORTD,pinNum);
	  	}
  	}
	
}
    2560:	00 00       	nop
    2562:	0f 90       	pop	r0
    2564:	0f 90       	pop	r0
    2566:	df 91       	pop	r29
    2568:	cf 91       	pop	r28
    256a:	08 95       	ret

0000256c <DIO_setPinDir>:
void DIO_setPinDir(u8 pinNum, u8 state){
    256c:	cf 93       	push	r28
    256e:	df 93       	push	r29
    2570:	00 d0       	rcall	.+0      	; 0x2572 <DIO_setPinDir+0x6>
    2572:	cd b7       	in	r28, 0x3d	; 61
    2574:	de b7       	in	r29, 0x3e	; 62
    2576:	89 83       	std	Y+1, r24	; 0x01
    2578:	6a 83       	std	Y+2, r22	; 0x02
		if (pinNum>=0 && pinNum<=7)
    257a:	89 81       	ldd	r24, Y+1	; 0x01
    257c:	88 30       	cpi	r24, 0x08	; 8
    257e:	90 f5       	brcc	.+100    	; 0x25e4 <DIO_setPinDir+0x78>
	{
		if (state==DIO_OUTPUT)
    2580:	8a 81       	ldd	r24, Y+2	; 0x02
    2582:	81 30       	cpi	r24, 0x01	; 1
    2584:	a9 f4       	brne	.+42     	; 0x25b0 <DIO_setPinDir+0x44>
		{
			SET_BIT(DDRA,pinNum);
    2586:	8a e3       	ldi	r24, 0x3A	; 58
    2588:	90 e0       	ldi	r25, 0x00	; 0
    258a:	2a e3       	ldi	r18, 0x3A	; 58
    258c:	30 e0       	ldi	r19, 0x00	; 0
    258e:	f9 01       	movw	r30, r18
    2590:	20 81       	ld	r18, Z
    2592:	62 2f       	mov	r22, r18
    2594:	29 81       	ldd	r18, Y+1	; 0x01
    2596:	42 2f       	mov	r20, r18
    2598:	50 e0       	ldi	r21, 0x00	; 0
    259a:	21 e0       	ldi	r18, 0x01	; 1
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	02 c0       	rjmp	.+4      	; 0x25a4 <DIO_setPinDir+0x38>
    25a0:	22 0f       	add	r18, r18
    25a2:	33 1f       	adc	r19, r19
    25a4:	4a 95       	dec	r20
    25a6:	e2 f7       	brpl	.-8      	; 0x25a0 <DIO_setPinDir+0x34>
    25a8:	26 2b       	or	r18, r22
    25aa:	fc 01       	movw	r30, r24
    25ac:	20 83       	st	Z, r18
		else if (state==DIO_INPUT)
		{
			CLEAR_BIT(DDRD,pinNum);
		}
	}
}
    25ae:	cd c0       	rjmp	.+410    	; 0x274a <DIO_setPinDir+0x1de>
	{
		if (state==DIO_OUTPUT)
		{
			SET_BIT(DDRA,pinNum);
		}
		else if (state==DIO_INPUT)
    25b0:	8a 81       	ldd	r24, Y+2	; 0x02
    25b2:	88 23       	and	r24, r24
    25b4:	09 f0       	breq	.+2      	; 0x25b8 <DIO_setPinDir+0x4c>
    25b6:	c9 c0       	rjmp	.+402    	; 0x274a <DIO_setPinDir+0x1de>
		{
			CLEAR_BIT(DDRA,pinNum);
    25b8:	8a e3       	ldi	r24, 0x3A	; 58
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	2a e3       	ldi	r18, 0x3A	; 58
    25be:	30 e0       	ldi	r19, 0x00	; 0
    25c0:	f9 01       	movw	r30, r18
    25c2:	20 81       	ld	r18, Z
    25c4:	62 2f       	mov	r22, r18
    25c6:	29 81       	ldd	r18, Y+1	; 0x01
    25c8:	42 2f       	mov	r20, r18
    25ca:	50 e0       	ldi	r21, 0x00	; 0
    25cc:	21 e0       	ldi	r18, 0x01	; 1
    25ce:	30 e0       	ldi	r19, 0x00	; 0
    25d0:	02 c0       	rjmp	.+4      	; 0x25d6 <DIO_setPinDir+0x6a>
    25d2:	22 0f       	add	r18, r18
    25d4:	33 1f       	adc	r19, r19
    25d6:	4a 95       	dec	r20
    25d8:	e2 f7       	brpl	.-8      	; 0x25d2 <DIO_setPinDir+0x66>
    25da:	20 95       	com	r18
    25dc:	26 23       	and	r18, r22
    25de:	fc 01       	movw	r30, r24
    25e0:	20 83       	st	Z, r18
		else if (state==DIO_INPUT)
		{
			CLEAR_BIT(DDRD,pinNum);
		}
	}
}
    25e2:	b3 c0       	rjmp	.+358    	; 0x274a <DIO_setPinDir+0x1de>
		else if (state==DIO_INPUT)
		{
			CLEAR_BIT(DDRA,pinNum);
		}
	}
	else if (pinNum>=8 && pinNum<=15)
    25e4:	89 81       	ldd	r24, Y+1	; 0x01
    25e6:	88 30       	cpi	r24, 0x08	; 8
    25e8:	c0 f1       	brcs	.+112    	; 0x265a <DIO_setPinDir+0xee>
    25ea:	89 81       	ldd	r24, Y+1	; 0x01
    25ec:	80 31       	cpi	r24, 0x10	; 16
    25ee:	a8 f5       	brcc	.+106    	; 0x265a <DIO_setPinDir+0xee>
	{
		pinNum-=8;
    25f0:	89 81       	ldd	r24, Y+1	; 0x01
    25f2:	88 50       	subi	r24, 0x08	; 8
    25f4:	89 83       	std	Y+1, r24	; 0x01
				if (state==DIO_OUTPUT)
    25f6:	8a 81       	ldd	r24, Y+2	; 0x02
    25f8:	81 30       	cpi	r24, 0x01	; 1
    25fa:	a9 f4       	brne	.+42     	; 0x2626 <DIO_setPinDir+0xba>
		{
			SET_BIT(DDRB,pinNum);
    25fc:	87 e3       	ldi	r24, 0x37	; 55
    25fe:	90 e0       	ldi	r25, 0x00	; 0
    2600:	27 e3       	ldi	r18, 0x37	; 55
    2602:	30 e0       	ldi	r19, 0x00	; 0
    2604:	f9 01       	movw	r30, r18
    2606:	20 81       	ld	r18, Z
    2608:	62 2f       	mov	r22, r18
    260a:	29 81       	ldd	r18, Y+1	; 0x01
    260c:	42 2f       	mov	r20, r18
    260e:	50 e0       	ldi	r21, 0x00	; 0
    2610:	21 e0       	ldi	r18, 0x01	; 1
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	02 c0       	rjmp	.+4      	; 0x261a <DIO_setPinDir+0xae>
    2616:	22 0f       	add	r18, r18
    2618:	33 1f       	adc	r19, r19
    261a:	4a 95       	dec	r20
    261c:	e2 f7       	brpl	.-8      	; 0x2616 <DIO_setPinDir+0xaa>
    261e:	26 2b       	or	r18, r22
    2620:	fc 01       	movw	r30, r24
    2622:	20 83       	st	Z, r18
		}
	}
	else if (pinNum>=8 && pinNum<=15)
	{
		pinNum-=8;
				if (state==DIO_OUTPUT)
    2624:	8f c0       	rjmp	.+286    	; 0x2744 <DIO_setPinDir+0x1d8>
		{
			SET_BIT(DDRB,pinNum);
		}
		else if (state==DIO_INPUT)
    2626:	8a 81       	ldd	r24, Y+2	; 0x02
    2628:	88 23       	and	r24, r24
    262a:	09 f0       	breq	.+2      	; 0x262e <DIO_setPinDir+0xc2>
    262c:	8b c0       	rjmp	.+278    	; 0x2744 <DIO_setPinDir+0x1d8>
		{
			CLEAR_BIT(DDRB,pinNum);
    262e:	87 e3       	ldi	r24, 0x37	; 55
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	27 e3       	ldi	r18, 0x37	; 55
    2634:	30 e0       	ldi	r19, 0x00	; 0
    2636:	f9 01       	movw	r30, r18
    2638:	20 81       	ld	r18, Z
    263a:	62 2f       	mov	r22, r18
    263c:	29 81       	ldd	r18, Y+1	; 0x01
    263e:	42 2f       	mov	r20, r18
    2640:	50 e0       	ldi	r21, 0x00	; 0
    2642:	21 e0       	ldi	r18, 0x01	; 1
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	02 c0       	rjmp	.+4      	; 0x264c <DIO_setPinDir+0xe0>
    2648:	22 0f       	add	r18, r18
    264a:	33 1f       	adc	r19, r19
    264c:	4a 95       	dec	r20
    264e:	e2 f7       	brpl	.-8      	; 0x2648 <DIO_setPinDir+0xdc>
    2650:	20 95       	com	r18
    2652:	26 23       	and	r18, r22
    2654:	fc 01       	movw	r30, r24
    2656:	20 83       	st	Z, r18
		}
	}
	else if (pinNum>=8 && pinNum<=15)
	{
		pinNum-=8;
				if (state==DIO_OUTPUT)
    2658:	75 c0       	rjmp	.+234    	; 0x2744 <DIO_setPinDir+0x1d8>
		else if (state==DIO_INPUT)
		{
			CLEAR_BIT(DDRB,pinNum);
		}
	}
	else if (pinNum>=16 && pinNum<=23)
    265a:	89 81       	ldd	r24, Y+1	; 0x01
    265c:	80 31       	cpi	r24, 0x10	; 16
    265e:	c0 f1       	brcs	.+112    	; 0x26d0 <DIO_setPinDir+0x164>
    2660:	89 81       	ldd	r24, Y+1	; 0x01
    2662:	88 31       	cpi	r24, 0x18	; 24
    2664:	a8 f5       	brcc	.+106    	; 0x26d0 <DIO_setPinDir+0x164>
	{
		pinNum-=16;
    2666:	89 81       	ldd	r24, Y+1	; 0x01
    2668:	80 51       	subi	r24, 0x10	; 16
    266a:	89 83       	std	Y+1, r24	; 0x01
		if (state==DIO_OUTPUT)
    266c:	8a 81       	ldd	r24, Y+2	; 0x02
    266e:	81 30       	cpi	r24, 0x01	; 1
    2670:	a9 f4       	brne	.+42     	; 0x269c <DIO_setPinDir+0x130>
		{
			SET_BIT(DDRC,pinNum);
    2672:	84 e3       	ldi	r24, 0x34	; 52
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	24 e3       	ldi	r18, 0x34	; 52
    2678:	30 e0       	ldi	r19, 0x00	; 0
    267a:	f9 01       	movw	r30, r18
    267c:	20 81       	ld	r18, Z
    267e:	62 2f       	mov	r22, r18
    2680:	29 81       	ldd	r18, Y+1	; 0x01
    2682:	42 2f       	mov	r20, r18
    2684:	50 e0       	ldi	r21, 0x00	; 0
    2686:	21 e0       	ldi	r18, 0x01	; 1
    2688:	30 e0       	ldi	r19, 0x00	; 0
    268a:	02 c0       	rjmp	.+4      	; 0x2690 <DIO_setPinDir+0x124>
    268c:	22 0f       	add	r18, r18
    268e:	33 1f       	adc	r19, r19
    2690:	4a 95       	dec	r20
    2692:	e2 f7       	brpl	.-8      	; 0x268c <DIO_setPinDir+0x120>
    2694:	26 2b       	or	r18, r22
    2696:	fc 01       	movw	r30, r24
    2698:	20 83       	st	Z, r18
		}
	}
	else if (pinNum>=16 && pinNum<=23)
	{
		pinNum-=16;
		if (state==DIO_OUTPUT)
    269a:	56 c0       	rjmp	.+172    	; 0x2748 <DIO_setPinDir+0x1dc>
		{
			SET_BIT(DDRC,pinNum);
		}
		else if (state==DIO_INPUT)
    269c:	8a 81       	ldd	r24, Y+2	; 0x02
    269e:	88 23       	and	r24, r24
    26a0:	09 f0       	breq	.+2      	; 0x26a4 <DIO_setPinDir+0x138>
    26a2:	52 c0       	rjmp	.+164    	; 0x2748 <DIO_setPinDir+0x1dc>
		{
			CLEAR_BIT(DDRC,pinNum);
    26a4:	84 e3       	ldi	r24, 0x34	; 52
    26a6:	90 e0       	ldi	r25, 0x00	; 0
    26a8:	24 e3       	ldi	r18, 0x34	; 52
    26aa:	30 e0       	ldi	r19, 0x00	; 0
    26ac:	f9 01       	movw	r30, r18
    26ae:	20 81       	ld	r18, Z
    26b0:	62 2f       	mov	r22, r18
    26b2:	29 81       	ldd	r18, Y+1	; 0x01
    26b4:	42 2f       	mov	r20, r18
    26b6:	50 e0       	ldi	r21, 0x00	; 0
    26b8:	21 e0       	ldi	r18, 0x01	; 1
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	02 c0       	rjmp	.+4      	; 0x26c2 <DIO_setPinDir+0x156>
    26be:	22 0f       	add	r18, r18
    26c0:	33 1f       	adc	r19, r19
    26c2:	4a 95       	dec	r20
    26c4:	e2 f7       	brpl	.-8      	; 0x26be <DIO_setPinDir+0x152>
    26c6:	20 95       	com	r18
    26c8:	26 23       	and	r18, r22
    26ca:	fc 01       	movw	r30, r24
    26cc:	20 83       	st	Z, r18
		}
	}
	else if (pinNum>=16 && pinNum<=23)
	{
		pinNum-=16;
		if (state==DIO_OUTPUT)
    26ce:	3c c0       	rjmp	.+120    	; 0x2748 <DIO_setPinDir+0x1dc>
		else if (state==DIO_INPUT)
		{
			CLEAR_BIT(DDRC,pinNum);
		}
	}
	else if (pinNum>=24 && pinNum<=31)
    26d0:	89 81       	ldd	r24, Y+1	; 0x01
    26d2:	88 31       	cpi	r24, 0x18	; 24
    26d4:	d0 f1       	brcs	.+116    	; 0x274a <DIO_setPinDir+0x1de>
    26d6:	89 81       	ldd	r24, Y+1	; 0x01
    26d8:	80 32       	cpi	r24, 0x20	; 32
    26da:	b8 f5       	brcc	.+110    	; 0x274a <DIO_setPinDir+0x1de>
	{
		pinNum-=24;
    26dc:	89 81       	ldd	r24, Y+1	; 0x01
    26de:	88 51       	subi	r24, 0x18	; 24
    26e0:	89 83       	std	Y+1, r24	; 0x01
		if (state==DIO_OUTPUT)
    26e2:	8a 81       	ldd	r24, Y+2	; 0x02
    26e4:	81 30       	cpi	r24, 0x01	; 1
    26e6:	a9 f4       	brne	.+42     	; 0x2712 <DIO_setPinDir+0x1a6>
		{
			SET_BIT(DDRD,pinNum);
    26e8:	81 e3       	ldi	r24, 0x31	; 49
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	21 e3       	ldi	r18, 0x31	; 49
    26ee:	30 e0       	ldi	r19, 0x00	; 0
    26f0:	f9 01       	movw	r30, r18
    26f2:	20 81       	ld	r18, Z
    26f4:	62 2f       	mov	r22, r18
    26f6:	29 81       	ldd	r18, Y+1	; 0x01
    26f8:	42 2f       	mov	r20, r18
    26fa:	50 e0       	ldi	r21, 0x00	; 0
    26fc:	21 e0       	ldi	r18, 0x01	; 1
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	02 c0       	rjmp	.+4      	; 0x2706 <DIO_setPinDir+0x19a>
    2702:	22 0f       	add	r18, r18
    2704:	33 1f       	adc	r19, r19
    2706:	4a 95       	dec	r20
    2708:	e2 f7       	brpl	.-8      	; 0x2702 <DIO_setPinDir+0x196>
    270a:	26 2b       	or	r18, r22
    270c:	fc 01       	movw	r30, r24
    270e:	20 83       	st	Z, r18
		else if (state==DIO_INPUT)
		{
			CLEAR_BIT(DDRD,pinNum);
		}
	}
}
    2710:	1c c0       	rjmp	.+56     	; 0x274a <DIO_setPinDir+0x1de>
		pinNum-=24;
		if (state==DIO_OUTPUT)
		{
			SET_BIT(DDRD,pinNum);
		}
		else if (state==DIO_INPUT)
    2712:	8a 81       	ldd	r24, Y+2	; 0x02
    2714:	88 23       	and	r24, r24
    2716:	c9 f4       	brne	.+50     	; 0x274a <DIO_setPinDir+0x1de>
		{
			CLEAR_BIT(DDRD,pinNum);
    2718:	81 e3       	ldi	r24, 0x31	; 49
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	21 e3       	ldi	r18, 0x31	; 49
    271e:	30 e0       	ldi	r19, 0x00	; 0
    2720:	f9 01       	movw	r30, r18
    2722:	20 81       	ld	r18, Z
    2724:	62 2f       	mov	r22, r18
    2726:	29 81       	ldd	r18, Y+1	; 0x01
    2728:	42 2f       	mov	r20, r18
    272a:	50 e0       	ldi	r21, 0x00	; 0
    272c:	21 e0       	ldi	r18, 0x01	; 1
    272e:	30 e0       	ldi	r19, 0x00	; 0
    2730:	02 c0       	rjmp	.+4      	; 0x2736 <DIO_setPinDir+0x1ca>
    2732:	22 0f       	add	r18, r18
    2734:	33 1f       	adc	r19, r19
    2736:	4a 95       	dec	r20
    2738:	e2 f7       	brpl	.-8      	; 0x2732 <DIO_setPinDir+0x1c6>
    273a:	20 95       	com	r18
    273c:	26 23       	and	r18, r22
    273e:	fc 01       	movw	r30, r24
    2740:	20 83       	st	Z, r18
		}
	}
}
    2742:	03 c0       	rjmp	.+6      	; 0x274a <DIO_setPinDir+0x1de>
		}
	}
	else if (pinNum>=8 && pinNum<=15)
	{
		pinNum-=8;
				if (state==DIO_OUTPUT)
    2744:	00 00       	nop
    2746:	01 c0       	rjmp	.+2      	; 0x274a <DIO_setPinDir+0x1de>
		}
	}
	else if (pinNum>=16 && pinNum<=23)
	{
		pinNum-=16;
		if (state==DIO_OUTPUT)
    2748:	00 00       	nop
		else if (state==DIO_INPUT)
		{
			CLEAR_BIT(DDRD,pinNum);
		}
	}
}
    274a:	00 00       	nop
    274c:	0f 90       	pop	r0
    274e:	0f 90       	pop	r0
    2750:	df 91       	pop	r29
    2752:	cf 91       	pop	r28
    2754:	08 95       	ret

00002756 <EXT0_init>:

void EXT_setCallbackInt2(void (*ptr)())
{
	//INT0_ptr = APP_func;
	INT2_ptr = ptr;
}
    2756:	cf 93       	push	r28
    2758:	df 93       	push	r29
    275a:	1f 92       	push	r1
    275c:	cd b7       	in	r28, 0x3d	; 61
    275e:	de b7       	in	r29, 0x3e	; 62
    2760:	89 83       	std	Y+1, r24	; 0x01
    2762:	89 81       	ldd	r24, Y+1	; 0x01
    2764:	88 23       	and	r24, r24
    2766:	99 f4       	brne	.+38     	; 0x278e <EXT0_init+0x38>
    2768:	85 e5       	ldi	r24, 0x55	; 85
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	25 e5       	ldi	r18, 0x55	; 85
    276e:	30 e0       	ldi	r19, 0x00	; 0
    2770:	f9 01       	movw	r30, r18
    2772:	20 81       	ld	r18, Z
    2774:	2e 7f       	andi	r18, 0xFE	; 254
    2776:	fc 01       	movw	r30, r24
    2778:	20 83       	st	Z, r18
    277a:	85 e5       	ldi	r24, 0x55	; 85
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	25 e5       	ldi	r18, 0x55	; 85
    2780:	30 e0       	ldi	r19, 0x00	; 0
    2782:	f9 01       	movw	r30, r18
    2784:	20 81       	ld	r18, Z
    2786:	2d 7f       	andi	r18, 0xFD	; 253
    2788:	fc 01       	movw	r30, r24
    278a:	20 83       	st	Z, r18
    278c:	41 c0       	rjmp	.+130    	; 0x2810 <EXT0_init+0xba>
    278e:	89 81       	ldd	r24, Y+1	; 0x01
    2790:	81 30       	cpi	r24, 0x01	; 1
    2792:	99 f4       	brne	.+38     	; 0x27ba <EXT0_init+0x64>
    2794:	85 e5       	ldi	r24, 0x55	; 85
    2796:	90 e0       	ldi	r25, 0x00	; 0
    2798:	25 e5       	ldi	r18, 0x55	; 85
    279a:	30 e0       	ldi	r19, 0x00	; 0
    279c:	f9 01       	movw	r30, r18
    279e:	20 81       	ld	r18, Z
    27a0:	21 60       	ori	r18, 0x01	; 1
    27a2:	fc 01       	movw	r30, r24
    27a4:	20 83       	st	Z, r18
    27a6:	85 e5       	ldi	r24, 0x55	; 85
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	25 e5       	ldi	r18, 0x55	; 85
    27ac:	30 e0       	ldi	r19, 0x00	; 0
    27ae:	f9 01       	movw	r30, r18
    27b0:	20 81       	ld	r18, Z
    27b2:	2d 7f       	andi	r18, 0xFD	; 253
    27b4:	fc 01       	movw	r30, r24
    27b6:	20 83       	st	Z, r18
    27b8:	2b c0       	rjmp	.+86     	; 0x2810 <EXT0_init+0xba>
    27ba:	89 81       	ldd	r24, Y+1	; 0x01
    27bc:	82 30       	cpi	r24, 0x02	; 2
    27be:	99 f4       	brne	.+38     	; 0x27e6 <EXT0_init+0x90>
    27c0:	85 e5       	ldi	r24, 0x55	; 85
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	25 e5       	ldi	r18, 0x55	; 85
    27c6:	30 e0       	ldi	r19, 0x00	; 0
    27c8:	f9 01       	movw	r30, r18
    27ca:	20 81       	ld	r18, Z
    27cc:	2e 7f       	andi	r18, 0xFE	; 254
    27ce:	fc 01       	movw	r30, r24
    27d0:	20 83       	st	Z, r18
    27d2:	85 e5       	ldi	r24, 0x55	; 85
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	25 e5       	ldi	r18, 0x55	; 85
    27d8:	30 e0       	ldi	r19, 0x00	; 0
    27da:	f9 01       	movw	r30, r18
    27dc:	20 81       	ld	r18, Z
    27de:	22 60       	ori	r18, 0x02	; 2
    27e0:	fc 01       	movw	r30, r24
    27e2:	20 83       	st	Z, r18
    27e4:	15 c0       	rjmp	.+42     	; 0x2810 <EXT0_init+0xba>
    27e6:	89 81       	ldd	r24, Y+1	; 0x01
    27e8:	83 30       	cpi	r24, 0x03	; 3
    27ea:	91 f4       	brne	.+36     	; 0x2810 <EXT0_init+0xba>
    27ec:	85 e5       	ldi	r24, 0x55	; 85
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	25 e5       	ldi	r18, 0x55	; 85
    27f2:	30 e0       	ldi	r19, 0x00	; 0
    27f4:	f9 01       	movw	r30, r18
    27f6:	20 81       	ld	r18, Z
    27f8:	21 60       	ori	r18, 0x01	; 1
    27fa:	fc 01       	movw	r30, r24
    27fc:	20 83       	st	Z, r18
    27fe:	85 e5       	ldi	r24, 0x55	; 85
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	25 e5       	ldi	r18, 0x55	; 85
    2804:	30 e0       	ldi	r19, 0x00	; 0
    2806:	f9 01       	movw	r30, r18
    2808:	20 81       	ld	r18, Z
    280a:	22 60       	ori	r18, 0x02	; 2
    280c:	fc 01       	movw	r30, r24
    280e:	20 83       	st	Z, r18
    2810:	8b e5       	ldi	r24, 0x5B	; 91
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	2b e5       	ldi	r18, 0x5B	; 91
    2816:	30 e0       	ldi	r19, 0x00	; 0
    2818:	f9 01       	movw	r30, r18
    281a:	20 81       	ld	r18, Z
    281c:	20 64       	ori	r18, 0x40	; 64
    281e:	fc 01       	movw	r30, r24
    2820:	20 83       	st	Z, r18
    2822:	00 00       	nop
    2824:	0f 90       	pop	r0
    2826:	df 91       	pop	r29
    2828:	cf 91       	pop	r28
    282a:	08 95       	ret

0000282c <__vector_1>:
    282c:	1f 92       	push	r1
    282e:	0f 92       	push	r0
    2830:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    2834:	0f 92       	push	r0
    2836:	11 24       	eor	r1, r1
    2838:	2f 93       	push	r18
    283a:	3f 93       	push	r19
    283c:	4f 93       	push	r20
    283e:	5f 93       	push	r21
    2840:	6f 93       	push	r22
    2842:	7f 93       	push	r23
    2844:	8f 93       	push	r24
    2846:	9f 93       	push	r25
    2848:	af 93       	push	r26
    284a:	bf 93       	push	r27
    284c:	ef 93       	push	r30
    284e:	ff 93       	push	r31
    2850:	cf 93       	push	r28
    2852:	df 93       	push	r29
    2854:	cd b7       	in	r28, 0x3d	; 61
    2856:	de b7       	in	r29, 0x3e	; 62
    2858:	c1 55       	subi	r28, 0x51	; 81
    285a:	d1 09       	sbc	r29, r1
    285c:	de bf       	out	0x3e, r29	; 62
    285e:	cd bf       	out	0x3d, r28	; 61
    2860:	61 e0       	ldi	r22, 0x01	; 1
    2862:	87 e0       	ldi	r24, 0x07	; 7
    2864:	0e 94 b6 12 	call	0x256c	; 0x256c <DIO_setPinDir>
    2868:	61 e0       	ldi	r22, 0x01	; 1
    286a:	86 e0       	ldi	r24, 0x06	; 6
    286c:	0e 94 b6 12 	call	0x256c	; 0x256c <DIO_setPinDir>
    2870:	61 e0       	ldi	r22, 0x01	; 1
    2872:	85 e0       	ldi	r24, 0x05	; 5
    2874:	0e 94 b6 12 	call	0x256c	; 0x256c <DIO_setPinDir>
    2878:	84 e3       	ldi	r24, 0x34	; 52
    287a:	ea ea       	ldi	r30, 0xAA	; 170
    287c:	f3 e0       	ldi	r31, 0x03	; 3
    287e:	de 01       	movw	r26, r28
    2880:	5e 96       	adiw	r26, 0x1e	; 30
    2882:	01 90       	ld	r0, Z+
    2884:	0d 92       	st	X+, r0
    2886:	8a 95       	dec	r24
    2888:	e1 f7       	brne	.-8      	; 0x2882 <__vector_1+0x56>
    288a:	ce 01       	movw	r24, r28
    288c:	4e 96       	adiw	r24, 0x1e	; 30
    288e:	0e 94 8b 1a 	call	0x3516	; 0x3516 <UART_sendString>
    2892:	0e 94 b5 1a 	call	0x356a	; 0x356a <UART_receiveData>
    2896:	89 83       	std	Y+1, r24	; 0x01
    2898:	88 ea       	ldi	r24, 0xA8	; 168
    289a:	93 e0       	ldi	r25, 0x03	; 3
    289c:	0e 94 8b 1a 	call	0x3516	; 0x3516 <UART_sendString>
    28a0:	89 81       	ldd	r24, Y+1	; 0x01
    28a2:	8b 36       	cpi	r24, 0x6B	; 107
    28a4:	09 f0       	breq	.+2      	; 0x28a8 <__vector_1+0x7c>
    28a6:	83 c0       	rjmp	.+262    	; 0x29ae <__vector_1+0x182>
    28a8:	61 e0       	ldi	r22, 0x01	; 1
    28aa:	86 e0       	ldi	r24, 0x06	; 6
    28ac:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_setPinValue>
    28b0:	61 e0       	ldi	r22, 0x01	; 1
    28b2:	85 e0       	ldi	r24, 0x05	; 5
    28b4:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_setPinValue>
    28b8:	80 e0       	ldi	r24, 0x00	; 0
    28ba:	90 e0       	ldi	r25, 0x00	; 0
    28bc:	a8 ec       	ldi	r26, 0xC8	; 200
    28be:	b2 e4       	ldi	r27, 0x42	; 66
    28c0:	8e 83       	std	Y+6, r24	; 0x06
    28c2:	9f 83       	std	Y+7, r25	; 0x07
    28c4:	a8 87       	std	Y+8, r26	; 0x08
    28c6:	b9 87       	std	Y+9, r27	; 0x09
    28c8:	20 e0       	ldi	r18, 0x00	; 0
    28ca:	30 e0       	ldi	r19, 0x00	; 0
    28cc:	4a e7       	ldi	r20, 0x7A	; 122
    28ce:	55 e4       	ldi	r21, 0x45	; 69
    28d0:	6e 81       	ldd	r22, Y+6	; 0x06
    28d2:	7f 81       	ldd	r23, Y+7	; 0x07
    28d4:	88 85       	ldd	r24, Y+8	; 0x08
    28d6:	99 85       	ldd	r25, Y+9	; 0x09
    28d8:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__mulsf3>
    28dc:	dc 01       	movw	r26, r24
    28de:	cb 01       	movw	r24, r22
    28e0:	8a 87       	std	Y+10, r24	; 0x0a
    28e2:	9b 87       	std	Y+11, r25	; 0x0b
    28e4:	ac 87       	std	Y+12, r26	; 0x0c
    28e6:	bd 87       	std	Y+13, r27	; 0x0d
    28e8:	20 e0       	ldi	r18, 0x00	; 0
    28ea:	30 e0       	ldi	r19, 0x00	; 0
    28ec:	40 e8       	ldi	r20, 0x80	; 128
    28ee:	5f e3       	ldi	r21, 0x3F	; 63
    28f0:	6a 85       	ldd	r22, Y+10	; 0x0a
    28f2:	7b 85       	ldd	r23, Y+11	; 0x0b
    28f4:	8c 85       	ldd	r24, Y+12	; 0x0c
    28f6:	9d 85       	ldd	r25, Y+13	; 0x0d
    28f8:	0e 94 45 1b 	call	0x368a	; 0x368a <__cmpsf2>
    28fc:	88 23       	and	r24, r24
    28fe:	2c f4       	brge	.+10     	; 0x290a <__vector_1+0xde>
    2900:	81 e0       	ldi	r24, 0x01	; 1
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	9f 87       	std	Y+15, r25	; 0x0f
    2906:	8e 87       	std	Y+14, r24	; 0x0e
    2908:	3f c0       	rjmp	.+126    	; 0x2988 <__vector_1+0x15c>
    290a:	20 e0       	ldi	r18, 0x00	; 0
    290c:	3f ef       	ldi	r19, 0xFF	; 255
    290e:	4f e7       	ldi	r20, 0x7F	; 127
    2910:	57 e4       	ldi	r21, 0x47	; 71
    2912:	6a 85       	ldd	r22, Y+10	; 0x0a
    2914:	7b 85       	ldd	r23, Y+11	; 0x0b
    2916:	8c 85       	ldd	r24, Y+12	; 0x0c
    2918:	9d 85       	ldd	r25, Y+13	; 0x0d
    291a:	0e 94 9d 1c 	call	0x393a	; 0x393a <__gesf2>
    291e:	18 16       	cp	r1, r24
    2920:	4c f5       	brge	.+82     	; 0x2974 <__vector_1+0x148>
    2922:	20 e0       	ldi	r18, 0x00	; 0
    2924:	30 e0       	ldi	r19, 0x00	; 0
    2926:	40 e2       	ldi	r20, 0x20	; 32
    2928:	51 e4       	ldi	r21, 0x41	; 65
    292a:	6e 81       	ldd	r22, Y+6	; 0x06
    292c:	7f 81       	ldd	r23, Y+7	; 0x07
    292e:	88 85       	ldd	r24, Y+8	; 0x08
    2930:	99 85       	ldd	r25, Y+9	; 0x09
    2932:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__mulsf3>
    2936:	dc 01       	movw	r26, r24
    2938:	cb 01       	movw	r24, r22
    293a:	bc 01       	movw	r22, r24
    293c:	cd 01       	movw	r24, r26
    293e:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__fixunssfsi>
    2942:	dc 01       	movw	r26, r24
    2944:	cb 01       	movw	r24, r22
    2946:	9f 87       	std	Y+15, r25	; 0x0f
    2948:	8e 87       	std	Y+14, r24	; 0x0e
    294a:	0f c0       	rjmp	.+30     	; 0x296a <__vector_1+0x13e>
    294c:	80 e9       	ldi	r24, 0x90	; 144
    294e:	91 e0       	ldi	r25, 0x01	; 1
    2950:	99 8b       	std	Y+17, r25	; 0x11
    2952:	88 8b       	std	Y+16, r24	; 0x10
    2954:	88 89       	ldd	r24, Y+16	; 0x10
    2956:	99 89       	ldd	r25, Y+17	; 0x11
    2958:	01 97       	sbiw	r24, 0x01	; 1
    295a:	f1 f7       	brne	.-4      	; 0x2958 <__vector_1+0x12c>
    295c:	99 8b       	std	Y+17, r25	; 0x11
    295e:	88 8b       	std	Y+16, r24	; 0x10
    2960:	8e 85       	ldd	r24, Y+14	; 0x0e
    2962:	9f 85       	ldd	r25, Y+15	; 0x0f
    2964:	01 97       	sbiw	r24, 0x01	; 1
    2966:	9f 87       	std	Y+15, r25	; 0x0f
    2968:	8e 87       	std	Y+14, r24	; 0x0e
    296a:	8e 85       	ldd	r24, Y+14	; 0x0e
    296c:	9f 85       	ldd	r25, Y+15	; 0x0f
    296e:	89 2b       	or	r24, r25
    2970:	69 f7       	brne	.-38     	; 0x294c <__vector_1+0x120>
    2972:	14 c0       	rjmp	.+40     	; 0x299c <__vector_1+0x170>
    2974:	6a 85       	ldd	r22, Y+10	; 0x0a
    2976:	7b 85       	ldd	r23, Y+11	; 0x0b
    2978:	8c 85       	ldd	r24, Y+12	; 0x0c
    297a:	9d 85       	ldd	r25, Y+13	; 0x0d
    297c:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__fixunssfsi>
    2980:	dc 01       	movw	r26, r24
    2982:	cb 01       	movw	r24, r22
    2984:	9f 87       	std	Y+15, r25	; 0x0f
    2986:	8e 87       	std	Y+14, r24	; 0x0e
    2988:	8e 85       	ldd	r24, Y+14	; 0x0e
    298a:	9f 85       	ldd	r25, Y+15	; 0x0f
    298c:	9b 8b       	std	Y+19, r25	; 0x13
    298e:	8a 8b       	std	Y+18, r24	; 0x12
    2990:	8a 89       	ldd	r24, Y+18	; 0x12
    2992:	9b 89       	ldd	r25, Y+19	; 0x13
    2994:	01 97       	sbiw	r24, 0x01	; 1
    2996:	f1 f7       	brne	.-4      	; 0x2994 <__vector_1+0x168>
    2998:	9b 8b       	std	Y+19, r25	; 0x13
    299a:	8a 8b       	std	Y+18, r24	; 0x12
    299c:	60 e0       	ldi	r22, 0x00	; 0
    299e:	86 e0       	ldi	r24, 0x06	; 6
    29a0:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_setPinValue>
    29a4:	60 e0       	ldi	r22, 0x00	; 0
    29a6:	85 e0       	ldi	r24, 0x05	; 5
    29a8:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_setPinValue>
    29ac:	82 c0       	rjmp	.+260    	; 0x2ab2 <__vector_1+0x286>
    29ae:	61 e0       	ldi	r22, 0x01	; 1
    29b0:	87 e0       	ldi	r24, 0x07	; 7
    29b2:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_setPinValue>
    29b6:	61 e0       	ldi	r22, 0x01	; 1
    29b8:	85 e0       	ldi	r24, 0x05	; 5
    29ba:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_setPinValue>
    29be:	80 e0       	ldi	r24, 0x00	; 0
    29c0:	90 e0       	ldi	r25, 0x00	; 0
    29c2:	a8 ec       	ldi	r26, 0xC8	; 200
    29c4:	b2 e4       	ldi	r27, 0x42	; 66
    29c6:	8a 83       	std	Y+2, r24	; 0x02
    29c8:	9b 83       	std	Y+3, r25	; 0x03
    29ca:	ac 83       	std	Y+4, r26	; 0x04
    29cc:	bd 83       	std	Y+5, r27	; 0x05
    29ce:	20 e0       	ldi	r18, 0x00	; 0
    29d0:	30 e0       	ldi	r19, 0x00	; 0
    29d2:	4a e7       	ldi	r20, 0x7A	; 122
    29d4:	55 e4       	ldi	r21, 0x45	; 69
    29d6:	6a 81       	ldd	r22, Y+2	; 0x02
    29d8:	7b 81       	ldd	r23, Y+3	; 0x03
    29da:	8c 81       	ldd	r24, Y+4	; 0x04
    29dc:	9d 81       	ldd	r25, Y+5	; 0x05
    29de:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__mulsf3>
    29e2:	dc 01       	movw	r26, r24
    29e4:	cb 01       	movw	r24, r22
    29e6:	8c 8b       	std	Y+20, r24	; 0x14
    29e8:	9d 8b       	std	Y+21, r25	; 0x15
    29ea:	ae 8b       	std	Y+22, r26	; 0x16
    29ec:	bf 8b       	std	Y+23, r27	; 0x17
    29ee:	20 e0       	ldi	r18, 0x00	; 0
    29f0:	30 e0       	ldi	r19, 0x00	; 0
    29f2:	40 e8       	ldi	r20, 0x80	; 128
    29f4:	5f e3       	ldi	r21, 0x3F	; 63
    29f6:	6c 89       	ldd	r22, Y+20	; 0x14
    29f8:	7d 89       	ldd	r23, Y+21	; 0x15
    29fa:	8e 89       	ldd	r24, Y+22	; 0x16
    29fc:	9f 89       	ldd	r25, Y+23	; 0x17
    29fe:	0e 94 45 1b 	call	0x368a	; 0x368a <__cmpsf2>
    2a02:	88 23       	and	r24, r24
    2a04:	2c f4       	brge	.+10     	; 0x2a10 <__vector_1+0x1e4>
    2a06:	81 e0       	ldi	r24, 0x01	; 1
    2a08:	90 e0       	ldi	r25, 0x00	; 0
    2a0a:	99 8f       	std	Y+25, r25	; 0x19
    2a0c:	88 8f       	std	Y+24, r24	; 0x18
    2a0e:	3f c0       	rjmp	.+126    	; 0x2a8e <__vector_1+0x262>
    2a10:	20 e0       	ldi	r18, 0x00	; 0
    2a12:	3f ef       	ldi	r19, 0xFF	; 255
    2a14:	4f e7       	ldi	r20, 0x7F	; 127
    2a16:	57 e4       	ldi	r21, 0x47	; 71
    2a18:	6c 89       	ldd	r22, Y+20	; 0x14
    2a1a:	7d 89       	ldd	r23, Y+21	; 0x15
    2a1c:	8e 89       	ldd	r24, Y+22	; 0x16
    2a1e:	9f 89       	ldd	r25, Y+23	; 0x17
    2a20:	0e 94 9d 1c 	call	0x393a	; 0x393a <__gesf2>
    2a24:	18 16       	cp	r1, r24
    2a26:	4c f5       	brge	.+82     	; 0x2a7a <__vector_1+0x24e>
    2a28:	20 e0       	ldi	r18, 0x00	; 0
    2a2a:	30 e0       	ldi	r19, 0x00	; 0
    2a2c:	40 e2       	ldi	r20, 0x20	; 32
    2a2e:	51 e4       	ldi	r21, 0x41	; 65
    2a30:	6a 81       	ldd	r22, Y+2	; 0x02
    2a32:	7b 81       	ldd	r23, Y+3	; 0x03
    2a34:	8c 81       	ldd	r24, Y+4	; 0x04
    2a36:	9d 81       	ldd	r25, Y+5	; 0x05
    2a38:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__mulsf3>
    2a3c:	dc 01       	movw	r26, r24
    2a3e:	cb 01       	movw	r24, r22
    2a40:	bc 01       	movw	r22, r24
    2a42:	cd 01       	movw	r24, r26
    2a44:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__fixunssfsi>
    2a48:	dc 01       	movw	r26, r24
    2a4a:	cb 01       	movw	r24, r22
    2a4c:	99 8f       	std	Y+25, r25	; 0x19
    2a4e:	88 8f       	std	Y+24, r24	; 0x18
    2a50:	0f c0       	rjmp	.+30     	; 0x2a70 <__vector_1+0x244>
    2a52:	80 e9       	ldi	r24, 0x90	; 144
    2a54:	91 e0       	ldi	r25, 0x01	; 1
    2a56:	9b 8f       	std	Y+27, r25	; 0x1b
    2a58:	8a 8f       	std	Y+26, r24	; 0x1a
    2a5a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2a5c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2a5e:	01 97       	sbiw	r24, 0x01	; 1
    2a60:	f1 f7       	brne	.-4      	; 0x2a5e <__vector_1+0x232>
    2a62:	9b 8f       	std	Y+27, r25	; 0x1b
    2a64:	8a 8f       	std	Y+26, r24	; 0x1a
    2a66:	88 8d       	ldd	r24, Y+24	; 0x18
    2a68:	99 8d       	ldd	r25, Y+25	; 0x19
    2a6a:	01 97       	sbiw	r24, 0x01	; 1
    2a6c:	99 8f       	std	Y+25, r25	; 0x19
    2a6e:	88 8f       	std	Y+24, r24	; 0x18
    2a70:	88 8d       	ldd	r24, Y+24	; 0x18
    2a72:	99 8d       	ldd	r25, Y+25	; 0x19
    2a74:	89 2b       	or	r24, r25
    2a76:	69 f7       	brne	.-38     	; 0x2a52 <__vector_1+0x226>
    2a78:	14 c0       	rjmp	.+40     	; 0x2aa2 <__vector_1+0x276>
    2a7a:	6c 89       	ldd	r22, Y+20	; 0x14
    2a7c:	7d 89       	ldd	r23, Y+21	; 0x15
    2a7e:	8e 89       	ldd	r24, Y+22	; 0x16
    2a80:	9f 89       	ldd	r25, Y+23	; 0x17
    2a82:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__fixunssfsi>
    2a86:	dc 01       	movw	r26, r24
    2a88:	cb 01       	movw	r24, r22
    2a8a:	99 8f       	std	Y+25, r25	; 0x19
    2a8c:	88 8f       	std	Y+24, r24	; 0x18
    2a8e:	88 8d       	ldd	r24, Y+24	; 0x18
    2a90:	99 8d       	ldd	r25, Y+25	; 0x19
    2a92:	9d 8f       	std	Y+29, r25	; 0x1d
    2a94:	8c 8f       	std	Y+28, r24	; 0x1c
    2a96:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2a98:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2a9a:	01 97       	sbiw	r24, 0x01	; 1
    2a9c:	f1 f7       	brne	.-4      	; 0x2a9a <__vector_1+0x26e>
    2a9e:	9d 8f       	std	Y+29, r25	; 0x1d
    2aa0:	8c 8f       	std	Y+28, r24	; 0x1c
    2aa2:	60 e0       	ldi	r22, 0x00	; 0
    2aa4:	87 e0       	ldi	r24, 0x07	; 7
    2aa6:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_setPinValue>
    2aaa:	60 e0       	ldi	r22, 0x00	; 0
    2aac:	85 e0       	ldi	r24, 0x05	; 5
    2aae:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_setPinValue>
    2ab2:	00 00       	nop
    2ab4:	cf 5a       	subi	r28, 0xAF	; 175
    2ab6:	df 4f       	sbci	r29, 0xFF	; 255
    2ab8:	0f b6       	in	r0, 0x3f	; 63
    2aba:	f8 94       	cli
    2abc:	de bf       	out	0x3e, r29	; 62
    2abe:	0f be       	out	0x3f, r0	; 63
    2ac0:	cd bf       	out	0x3d, r28	; 61
    2ac2:	df 91       	pop	r29
    2ac4:	cf 91       	pop	r28
    2ac6:	ff 91       	pop	r31
    2ac8:	ef 91       	pop	r30
    2aca:	bf 91       	pop	r27
    2acc:	af 91       	pop	r26
    2ace:	9f 91       	pop	r25
    2ad0:	8f 91       	pop	r24
    2ad2:	7f 91       	pop	r23
    2ad4:	6f 91       	pop	r22
    2ad6:	5f 91       	pop	r21
    2ad8:	4f 91       	pop	r20
    2ada:	3f 91       	pop	r19
    2adc:	2f 91       	pop	r18
    2ade:	0f 90       	pop	r0
    2ae0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    2ae4:	0f 90       	pop	r0
    2ae6:	1f 90       	pop	r1
    2ae8:	18 95       	reti

00002aea <__vector_2>:
    2aea:	1f 92       	push	r1
    2aec:	0f 92       	push	r0
    2aee:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    2af2:	0f 92       	push	r0
    2af4:	11 24       	eor	r1, r1
    2af6:	2f 93       	push	r18
    2af8:	3f 93       	push	r19
    2afa:	4f 93       	push	r20
    2afc:	5f 93       	push	r21
    2afe:	6f 93       	push	r22
    2b00:	7f 93       	push	r23
    2b02:	8f 93       	push	r24
    2b04:	9f 93       	push	r25
    2b06:	af 93       	push	r26
    2b08:	bf 93       	push	r27
    2b0a:	ef 93       	push	r30
    2b0c:	ff 93       	push	r31
    2b0e:	cf 93       	push	r28
    2b10:	df 93       	push	r29
    2b12:	cd b7       	in	r28, 0x3d	; 61
    2b14:	de b7       	in	r29, 0x3e	; 62
    2b16:	80 91 2b 04 	lds	r24, 0x042B	; 0x80042b <INT1_ptr>
    2b1a:	90 91 2c 04 	lds	r25, 0x042C	; 0x80042c <INT1_ptr+0x1>
    2b1e:	fc 01       	movw	r30, r24
    2b20:	09 95       	icall
    2b22:	00 00       	nop
    2b24:	df 91       	pop	r29
    2b26:	cf 91       	pop	r28
    2b28:	ff 91       	pop	r31
    2b2a:	ef 91       	pop	r30
    2b2c:	bf 91       	pop	r27
    2b2e:	af 91       	pop	r26
    2b30:	9f 91       	pop	r25
    2b32:	8f 91       	pop	r24
    2b34:	7f 91       	pop	r23
    2b36:	6f 91       	pop	r22
    2b38:	5f 91       	pop	r21
    2b3a:	4f 91       	pop	r20
    2b3c:	3f 91       	pop	r19
    2b3e:	2f 91       	pop	r18
    2b40:	0f 90       	pop	r0
    2b42:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    2b46:	0f 90       	pop	r0
    2b48:	1f 90       	pop	r1
    2b4a:	18 95       	reti

00002b4c <__vector_3>:

void __vector_3(void) __attribute__((signal,used));
void __vector_3(void)
{
    2b4c:	1f 92       	push	r1
    2b4e:	0f 92       	push	r0
    2b50:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    2b54:	0f 92       	push	r0
    2b56:	11 24       	eor	r1, r1
    2b58:	2f 93       	push	r18
    2b5a:	3f 93       	push	r19
    2b5c:	4f 93       	push	r20
    2b5e:	5f 93       	push	r21
    2b60:	6f 93       	push	r22
    2b62:	7f 93       	push	r23
    2b64:	8f 93       	push	r24
    2b66:	9f 93       	push	r25
    2b68:	af 93       	push	r26
    2b6a:	bf 93       	push	r27
    2b6c:	ef 93       	push	r30
    2b6e:	ff 93       	push	r31
    2b70:	cf 93       	push	r28
    2b72:	df 93       	push	r29
    2b74:	cd b7       	in	r28, 0x3d	; 61
    2b76:	de b7       	in	r29, 0x3e	; 62
	//call func(pointer to function)
	//APP_func();
	INT2_ptr();
    2b78:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <INT2_ptr>
    2b7c:	90 91 2a 04 	lds	r25, 0x042A	; 0x80042a <INT2_ptr+0x1>
    2b80:	fc 01       	movw	r30, r24
    2b82:	09 95       	icall
	//DIO_setPinValue(DIO_PINA0,DIO_HIGH);
}
    2b84:	00 00       	nop
    2b86:	df 91       	pop	r29
    2b88:	cf 91       	pop	r28
    2b8a:	ff 91       	pop	r31
    2b8c:	ef 91       	pop	r30
    2b8e:	bf 91       	pop	r27
    2b90:	af 91       	pop	r26
    2b92:	9f 91       	pop	r25
    2b94:	8f 91       	pop	r24
    2b96:	7f 91       	pop	r23
    2b98:	6f 91       	pop	r22
    2b9a:	5f 91       	pop	r21
    2b9c:	4f 91       	pop	r20
    2b9e:	3f 91       	pop	r19
    2ba0:	2f 91       	pop	r18
    2ba2:	0f 90       	pop	r0
    2ba4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    2ba8:	0f 90       	pop	r0
    2baa:	1f 90       	pop	r1
    2bac:	18 95       	reti

00002bae <GI_enable>:
#include "STD_TYPES.h"
#include "BIT_MATH.h"
#include "GI_INT.h"

void GI_enable()
{
    2bae:	cf 93       	push	r28
    2bb0:	df 93       	push	r29
    2bb2:	cd b7       	in	r28, 0x3d	; 61
    2bb4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, I);
    2bb6:	8f e5       	ldi	r24, 0x5F	; 95
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	2f e5       	ldi	r18, 0x5F	; 95
    2bbc:	30 e0       	ldi	r19, 0x00	; 0
    2bbe:	f9 01       	movw	r30, r18
    2bc0:	20 81       	ld	r18, Z
    2bc2:	20 68       	ori	r18, 0x80	; 128
    2bc4:	fc 01       	movw	r30, r24
    2bc6:	20 83       	st	Z, r18
}
    2bc8:	00 00       	nop
    2bca:	df 91       	pop	r29
    2bcc:	cf 91       	pop	r28
    2bce:	08 95       	ret

00002bd0 <I2C_init>:
 *  Author: biso2
 */ 
#include "I2C_INT.h"

void I2C_init(enum I2C_mode mode)
{
    2bd0:	cf 93       	push	r28
    2bd2:	df 93       	push	r29
    2bd4:	1f 92       	push	r1
    2bd6:	cd b7       	in	r28, 0x3d	; 61
    2bd8:	de b7       	in	r29, 0x3e	; 62
    2bda:	89 83       	std	Y+1, r24	; 0x01
	if(mode == MASTER)
    2bdc:	89 81       	ldd	r24, Y+1	; 0x01
    2bde:	81 30       	cpi	r24, 0x01	; 1
    2be0:	41 f0       	breq	.+16     	; 0x2bf2 <I2C_init+0x22>
	{
		
	}
	else if(mode == SLAVE)
    2be2:	89 81       	ldd	r24, Y+1	; 0x01
    2be4:	88 23       	and	r24, r24
    2be6:	29 f4       	brne	.+10     	; 0x2bf2 <I2C_init+0x22>
	{
		TWAR =  I2C_SLAVE_ADDRESS<<1;
    2be8:	82 e2       	ldi	r24, 0x22	; 34
    2bea:	90 e0       	ldi	r25, 0x00	; 0
    2bec:	20 ea       	ldi	r18, 0xA0	; 160
    2bee:	fc 01       	movw	r30, r24
    2bf0:	20 83       	st	Z, r18
	}
	//enable
	SET_BIT(TWCR, TWEN);
    2bf2:	86 e5       	ldi	r24, 0x56	; 86
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
    2bf6:	26 e5       	ldi	r18, 0x56	; 86
    2bf8:	30 e0       	ldi	r19, 0x00	; 0
    2bfa:	f9 01       	movw	r30, r18
    2bfc:	20 81       	ld	r18, Z
    2bfe:	24 60       	ori	r18, 0x04	; 4
    2c00:	fc 01       	movw	r30, r24
    2c02:	20 83       	st	Z, r18
	TWBR = 72;
    2c04:	80 e2       	ldi	r24, 0x20	; 32
    2c06:	90 e0       	ldi	r25, 0x00	; 0
    2c08:	28 e4       	ldi	r18, 0x48	; 72
    2c0a:	fc 01       	movw	r30, r24
    2c0c:	20 83       	st	Z, r18
	
}
    2c0e:	00 00       	nop
    2c10:	0f 90       	pop	r0
    2c12:	df 91       	pop	r29
    2c14:	cf 91       	pop	r28
    2c16:	08 95       	ret

00002c18 <SPI_Init>:
{
	DIO_setPinValue(DIO_PINB4,DIO_HIGH);
	DIO_setPinValue(DIO_PINB4,DIO_LOW);
	SPDR=data;
	while(GET_BIT(SPSR,SPIF)==0);
}
    2c18:	cf 93       	push	r28
    2c1a:	df 93       	push	r29
    2c1c:	cd b7       	in	r28, 0x3d	; 61
    2c1e:	de b7       	in	r29, 0x3e	; 62
    2c20:	8d e2       	ldi	r24, 0x2D	; 45
    2c22:	90 e0       	ldi	r25, 0x00	; 0
    2c24:	2d e2       	ldi	r18, 0x2D	; 45
    2c26:	30 e0       	ldi	r19, 0x00	; 0
    2c28:	f9 01       	movw	r30, r18
    2c2a:	20 81       	ld	r18, Z
    2c2c:	2f 7e       	andi	r18, 0xEF	; 239
    2c2e:	fc 01       	movw	r30, r24
    2c30:	20 83       	st	Z, r18
    2c32:	61 e0       	ldi	r22, 0x01	; 1
    2c34:	8d e0       	ldi	r24, 0x0D	; 13
    2c36:	0e 94 b6 12 	call	0x256c	; 0x256c <DIO_setPinDir>
    2c3a:	61 e0       	ldi	r22, 0x01	; 1
    2c3c:	8f e0       	ldi	r24, 0x0F	; 15
    2c3e:	0e 94 b6 12 	call	0x256c	; 0x256c <DIO_setPinDir>
    2c42:	60 e0       	ldi	r22, 0x00	; 0
    2c44:	8e e0       	ldi	r24, 0x0E	; 14
    2c46:	0e 94 b6 12 	call	0x256c	; 0x256c <DIO_setPinDir>
    2c4a:	61 e0       	ldi	r22, 0x01	; 1
    2c4c:	8c e0       	ldi	r24, 0x0C	; 12
    2c4e:	0e 94 b6 12 	call	0x256c	; 0x256c <DIO_setPinDir>
    2c52:	8d e2       	ldi	r24, 0x2D	; 45
    2c54:	90 e0       	ldi	r25, 0x00	; 0
    2c56:	2d e2       	ldi	r18, 0x2D	; 45
    2c58:	30 e0       	ldi	r19, 0x00	; 0
    2c5a:	f9 01       	movw	r30, r18
    2c5c:	20 81       	ld	r18, Z
    2c5e:	20 68       	ori	r18, 0x80	; 128
    2c60:	fc 01       	movw	r30, r24
    2c62:	20 83       	st	Z, r18
    2c64:	8d e2       	ldi	r24, 0x2D	; 45
    2c66:	90 e0       	ldi	r25, 0x00	; 0
    2c68:	2d e2       	ldi	r18, 0x2D	; 45
    2c6a:	30 e0       	ldi	r19, 0x00	; 0
    2c6c:	f9 01       	movw	r30, r18
    2c6e:	20 81       	ld	r18, Z
    2c70:	20 64       	ori	r18, 0x40	; 64
    2c72:	fc 01       	movw	r30, r24
    2c74:	20 83       	st	Z, r18
    2c76:	00 00       	nop
    2c78:	df 91       	pop	r29
    2c7a:	cf 91       	pop	r28
    2c7c:	08 95       	ret

00002c7e <SPI_Read>:
    2c7e:	cf 93       	push	r28
    2c80:	df 93       	push	r29
    2c82:	cd b7       	in	r28, 0x3d	; 61
    2c84:	de b7       	in	r29, 0x3e	; 62
    2c86:	00 00       	nop
    2c88:	8e e2       	ldi	r24, 0x2E	; 46
    2c8a:	90 e0       	ldi	r25, 0x00	; 0
    2c8c:	fc 01       	movw	r30, r24
    2c8e:	80 81       	ld	r24, Z
    2c90:	88 1f       	adc	r24, r24
    2c92:	88 27       	eor	r24, r24
    2c94:	88 1f       	adc	r24, r24
    2c96:	88 2f       	mov	r24, r24
    2c98:	90 e0       	ldi	r25, 0x00	; 0
    2c9a:	81 70       	andi	r24, 0x01	; 1
    2c9c:	99 27       	eor	r25, r25
    2c9e:	89 2b       	or	r24, r25
    2ca0:	99 f3       	breq	.-26     	; 0x2c88 <SPI_Read+0xa>
    2ca2:	8f e2       	ldi	r24, 0x2F	; 47
    2ca4:	90 e0       	ldi	r25, 0x00	; 0
    2ca6:	fc 01       	movw	r30, r24
    2ca8:	80 81       	ld	r24, Z
    2caa:	df 91       	pop	r29
    2cac:	cf 91       	pop	r28
    2cae:	08 95       	ret

00002cb0 <control>:
// SPI interrupt service routine using __vector keyword

void control(u8 Val)
{
    2cb0:	cf 93       	push	r28
    2cb2:	df 93       	push	r29
    2cb4:	1f 92       	push	r1
    2cb6:	cd b7       	in	r28, 0x3d	; 61
    2cb8:	de b7       	in	r29, 0x3e	; 62
    2cba:	89 83       	std	Y+1, r24	; 0x01
	
	if(Val=='g')
    2cbc:	89 81       	ldd	r24, Y+1	; 0x01
    2cbe:	87 36       	cpi	r24, 0x67	; 103
    2cc0:	69 f4       	brne	.+26     	; 0x2cdc <control+0x2c>
		{
			DIO_setPinValue(DIO_PINA0,DIO_HIGH);
    2cc2:	61 e0       	ldi	r22, 0x01	; 1
    2cc4:	80 e0       	ldi	r24, 0x00	; 0
    2cc6:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_setPinValue>
			LCD_goto(0,2);
    2cca:	62 e0       	ldi	r22, 0x02	; 2
    2ccc:	80 e0       	ldi	r24, 0x00	; 0
    2cce:	0e 94 a5 11 	call	0x234a	; 0x234a <LCD_goto>
			LCD_writeStr("L1");
    2cd2:	8e ed       	ldi	r24, 0xDE	; 222
    2cd4:	93 e0       	ldi	r25, 0x03	; 3
    2cd6:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <LCD_writeStr>
			LCD_goto(10,2);
			LCD_writeStr("Dim L5");
		}	 	 	 
		

}
    2cda:	01 c1       	rjmp	.+514    	; 0x2ede <control+0x22e>
		{
			DIO_setPinValue(DIO_PINA0,DIO_HIGH);
			LCD_goto(0,2);
			LCD_writeStr("L1");
		}
	else if(Val=='h')
    2cdc:	89 81       	ldd	r24, Y+1	; 0x01
    2cde:	88 36       	cpi	r24, 0x68	; 104
    2ce0:	69 f4       	brne	.+26     	; 0x2cfc <control+0x4c>
		{
			DIO_setPinValue(DIO_PINA1,DIO_HIGH);
    2ce2:	61 e0       	ldi	r22, 0x01	; 1
    2ce4:	81 e0       	ldi	r24, 0x01	; 1
    2ce6:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_setPinValue>
			LCD_goto(2,2);
    2cea:	62 e0       	ldi	r22, 0x02	; 2
    2cec:	82 e0       	ldi	r24, 0x02	; 2
    2cee:	0e 94 a5 11 	call	0x234a	; 0x234a <LCD_goto>
			LCD_writeStr("L2");
    2cf2:	81 ee       	ldi	r24, 0xE1	; 225
    2cf4:	93 e0       	ldi	r25, 0x03	; 3
    2cf6:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <LCD_writeStr>
			LCD_goto(10,2);
			LCD_writeStr("Dim L5");
		}	 	 	 
		

}
    2cfa:	f1 c0       	rjmp	.+482    	; 0x2ede <control+0x22e>
		{
			DIO_setPinValue(DIO_PINA1,DIO_HIGH);
			LCD_goto(2,2);
			LCD_writeStr("L2");
		}
	else if(Val=='i')
    2cfc:	89 81       	ldd	r24, Y+1	; 0x01
    2cfe:	89 36       	cpi	r24, 0x69	; 105
    2d00:	69 f4       	brne	.+26     	; 0x2d1c <control+0x6c>
		{
			DIO_setPinValue(DIO_PINA2,DIO_HIGH);
    2d02:	61 e0       	ldi	r22, 0x01	; 1
    2d04:	82 e0       	ldi	r24, 0x02	; 2
    2d06:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_setPinValue>
			LCD_goto(4,2);
    2d0a:	62 e0       	ldi	r22, 0x02	; 2
    2d0c:	84 e0       	ldi	r24, 0x04	; 4
    2d0e:	0e 94 a5 11 	call	0x234a	; 0x234a <LCD_goto>
			LCD_writeStr("L3");
    2d12:	84 ee       	ldi	r24, 0xE4	; 228
    2d14:	93 e0       	ldi	r25, 0x03	; 3
    2d16:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <LCD_writeStr>
			LCD_goto(10,2);
			LCD_writeStr("Dim L5");
		}	 	 	 
		

}
    2d1a:	e1 c0       	rjmp	.+450    	; 0x2ede <control+0x22e>
		{
			DIO_setPinValue(DIO_PINA2,DIO_HIGH);
			LCD_goto(4,2);
			LCD_writeStr("L3");
		}
	else if(Val=='j')
    2d1c:	89 81       	ldd	r24, Y+1	; 0x01
    2d1e:	8a 36       	cpi	r24, 0x6A	; 106
    2d20:	69 f4       	brne	.+26     	; 0x2d3c <control+0x8c>
		{
			DIO_setPinValue(DIO_PINA3,DIO_HIGH);
    2d22:	61 e0       	ldi	r22, 0x01	; 1
    2d24:	83 e0       	ldi	r24, 0x03	; 3
    2d26:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_setPinValue>
			LCD_goto(6,2);
    2d2a:	62 e0       	ldi	r22, 0x02	; 2
    2d2c:	86 e0       	ldi	r24, 0x06	; 6
    2d2e:	0e 94 a5 11 	call	0x234a	; 0x234a <LCD_goto>
			LCD_writeStr("L4");
    2d32:	87 ee       	ldi	r24, 0xE7	; 231
    2d34:	93 e0       	ldi	r25, 0x03	; 3
    2d36:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <LCD_writeStr>
			LCD_goto(10,2);
			LCD_writeStr("Dim L5");
		}	 	 	 
		

}
    2d3a:	d1 c0       	rjmp	.+418    	; 0x2ede <control+0x22e>
		{
			DIO_setPinValue(DIO_PINA3,DIO_HIGH);
			LCD_goto(6,2);
			LCD_writeStr("L4");
		}
	else if(Val=='k')
    2d3c:	89 81       	ldd	r24, Y+1	; 0x01
    2d3e:	8b 36       	cpi	r24, 0x6B	; 107
    2d40:	69 f4       	brne	.+26     	; 0x2d5c <control+0xac>
		{
			DIO_setPinValue(DIO_PINA4,DIO_HIGH);
    2d42:	61 e0       	ldi	r22, 0x01	; 1
    2d44:	84 e0       	ldi	r24, 0x04	; 4
    2d46:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_setPinValue>
			LCD_goto(8,2);
    2d4a:	62 e0       	ldi	r22, 0x02	; 2
    2d4c:	88 e0       	ldi	r24, 0x08	; 8
    2d4e:	0e 94 a5 11 	call	0x234a	; 0x234a <LCD_goto>
			LCD_writeStr("L5");
    2d52:	8a ee       	ldi	r24, 0xEA	; 234
    2d54:	93 e0       	ldi	r25, 0x03	; 3
    2d56:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <LCD_writeStr>
			LCD_goto(10,2);
			LCD_writeStr("Dim L5");
		}	 	 	 
		

}
    2d5a:	c1 c0       	rjmp	.+386    	; 0x2ede <control+0x22e>
		{
			DIO_setPinValue(DIO_PINA4,DIO_HIGH);
			LCD_goto(8,2);
			LCD_writeStr("L5");
		}
	else if(Val=='l')
    2d5c:	89 81       	ldd	r24, Y+1	; 0x01
    2d5e:	8c 36       	cpi	r24, 0x6C	; 108
    2d60:	69 f4       	brne	.+26     	; 0x2d7c <control+0xcc>
		{
			DIO_setPinValue(DIO_PINA0,DIO_LOW);
    2d62:	60 e0       	ldi	r22, 0x00	; 0
    2d64:	80 e0       	ldi	r24, 0x00	; 0
    2d66:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_setPinValue>
			LCD_goto(0,2);
    2d6a:	62 e0       	ldi	r22, 0x02	; 2
    2d6c:	80 e0       	ldi	r24, 0x00	; 0
    2d6e:	0e 94 a5 11 	call	0x234a	; 0x234a <LCD_goto>
			LCD_writeStr("  ");
    2d72:	8d ee       	ldi	r24, 0xED	; 237
    2d74:	93 e0       	ldi	r25, 0x03	; 3
    2d76:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <LCD_writeStr>
			LCD_goto(10,2);
			LCD_writeStr("Dim L5");
		}	 	 	 
		

}
    2d7a:	b1 c0       	rjmp	.+354    	; 0x2ede <control+0x22e>
		{
			DIO_setPinValue(DIO_PINA0,DIO_LOW);
			LCD_goto(0,2);
			LCD_writeStr("  ");
		}
	else if(Val=='m')
    2d7c:	89 81       	ldd	r24, Y+1	; 0x01
    2d7e:	8d 36       	cpi	r24, 0x6D	; 109
    2d80:	69 f4       	brne	.+26     	; 0x2d9c <control+0xec>
		{
			DIO_setPinValue(DIO_PINA1,DIO_LOW);
    2d82:	60 e0       	ldi	r22, 0x00	; 0
    2d84:	81 e0       	ldi	r24, 0x01	; 1
    2d86:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_setPinValue>
			LCD_goto(2,2);
    2d8a:	62 e0       	ldi	r22, 0x02	; 2
    2d8c:	82 e0       	ldi	r24, 0x02	; 2
    2d8e:	0e 94 a5 11 	call	0x234a	; 0x234a <LCD_goto>
			LCD_writeStr("  ");
    2d92:	8d ee       	ldi	r24, 0xED	; 237
    2d94:	93 e0       	ldi	r25, 0x03	; 3
    2d96:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <LCD_writeStr>
			LCD_goto(10,2);
			LCD_writeStr("Dim L5");
		}	 	 	 
		

}
    2d9a:	a1 c0       	rjmp	.+322    	; 0x2ede <control+0x22e>
		{
			DIO_setPinValue(DIO_PINA1,DIO_LOW);
			LCD_goto(2,2);
			LCD_writeStr("  ");
		}
	else if(Val=='n')
    2d9c:	89 81       	ldd	r24, Y+1	; 0x01
    2d9e:	8e 36       	cpi	r24, 0x6E	; 110
    2da0:	69 f4       	brne	.+26     	; 0x2dbc <control+0x10c>
		{
			DIO_setPinValue(DIO_PINA2,DIO_LOW);
    2da2:	60 e0       	ldi	r22, 0x00	; 0
    2da4:	82 e0       	ldi	r24, 0x02	; 2
    2da6:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_setPinValue>
			LCD_goto(4,2);
    2daa:	62 e0       	ldi	r22, 0x02	; 2
    2dac:	84 e0       	ldi	r24, 0x04	; 4
    2dae:	0e 94 a5 11 	call	0x234a	; 0x234a <LCD_goto>
			LCD_writeStr("  ");
    2db2:	8d ee       	ldi	r24, 0xED	; 237
    2db4:	93 e0       	ldi	r25, 0x03	; 3
    2db6:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <LCD_writeStr>
			LCD_goto(10,2);
			LCD_writeStr("Dim L5");
		}	 	 	 
		

}
    2dba:	91 c0       	rjmp	.+290    	; 0x2ede <control+0x22e>
		{
			DIO_setPinValue(DIO_PINA2,DIO_LOW);
			LCD_goto(4,2);
			LCD_writeStr("  ");
		}
	else if(Val=='o')
    2dbc:	89 81       	ldd	r24, Y+1	; 0x01
    2dbe:	8f 36       	cpi	r24, 0x6F	; 111
    2dc0:	69 f4       	brne	.+26     	; 0x2ddc <control+0x12c>
		{
			DIO_setPinValue(DIO_PINA3,DIO_LOW);
    2dc2:	60 e0       	ldi	r22, 0x00	; 0
    2dc4:	83 e0       	ldi	r24, 0x03	; 3
    2dc6:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_setPinValue>
			LCD_goto(6,2);
    2dca:	62 e0       	ldi	r22, 0x02	; 2
    2dcc:	86 e0       	ldi	r24, 0x06	; 6
    2dce:	0e 94 a5 11 	call	0x234a	; 0x234a <LCD_goto>
			LCD_writeStr("  ");
    2dd2:	8d ee       	ldi	r24, 0xED	; 237
    2dd4:	93 e0       	ldi	r25, 0x03	; 3
    2dd6:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <LCD_writeStr>
			LCD_goto(10,2);
			LCD_writeStr("Dim L5");
		}	 	 	 
		

}
    2dda:	81 c0       	rjmp	.+258    	; 0x2ede <control+0x22e>
		{
			DIO_setPinValue(DIO_PINA3,DIO_LOW);
			LCD_goto(6,2);
			LCD_writeStr("  ");
		}
	else if(Val=='p')
    2ddc:	89 81       	ldd	r24, Y+1	; 0x01
    2dde:	80 37       	cpi	r24, 0x70	; 112
    2de0:	69 f4       	brne	.+26     	; 0x2dfc <control+0x14c>
		{
			DIO_setPinValue(DIO_PINA4,DIO_LOW);
    2de2:	60 e0       	ldi	r22, 0x00	; 0
    2de4:	84 e0       	ldi	r24, 0x04	; 4
    2de6:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_setPinValue>
			LCD_goto(8,2);
    2dea:	62 e0       	ldi	r22, 0x02	; 2
    2dec:	88 e0       	ldi	r24, 0x08	; 8
    2dee:	0e 94 a5 11 	call	0x234a	; 0x234a <LCD_goto>
			LCD_writeStr("  ");
    2df2:	8d ee       	ldi	r24, 0xED	; 237
    2df4:	93 e0       	ldi	r25, 0x03	; 3
    2df6:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <LCD_writeStr>
			LCD_goto(10,2);
			LCD_writeStr("Dim L5");
		}	 	 	 
		

}
    2dfa:	71 c0       	rjmp	.+226    	; 0x2ede <control+0x22e>
		{
			DIO_setPinValue(DIO_PINA4,DIO_LOW);
			LCD_goto(8,2);
			LCD_writeStr("  ");
		}
	else if(Val=='q')
    2dfc:	89 81       	ldd	r24, Y+1	; 0x01
    2dfe:	81 37       	cpi	r24, 0x71	; 113
    2e00:	49 f4       	brne	.+18     	; 0x2e14 <control+0x164>
	{
		LCD_goto(0,1);
    2e02:	61 e0       	ldi	r22, 0x01	; 1
    2e04:	80 e0       	ldi	r24, 0x00	; 0
    2e06:	0e 94 a5 11 	call	0x234a	; 0x234a <LCD_goto>
		LCD_writeStr("AC ON ");
    2e0a:	80 ef       	ldi	r24, 0xF0	; 240
    2e0c:	93 e0       	ldi	r25, 0x03	; 3
    2e0e:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <LCD_writeStr>
			LCD_goto(10,2);
			LCD_writeStr("Dim L5");
		}	 	 	 
		

}
    2e12:	65 c0       	rjmp	.+202    	; 0x2ede <control+0x22e>
		LCD_writeStr("AC ON ");
		
		
		
	}
	else if(Val=='r')
    2e14:	89 81       	ldd	r24, Y+1	; 0x01
    2e16:	82 37       	cpi	r24, 0x72	; 114
    2e18:	49 f4       	brne	.+18     	; 0x2e2c <control+0x17c>
	{
		LCD_goto(3,1);
    2e1a:	61 e0       	ldi	r22, 0x01	; 1
    2e1c:	83 e0       	ldi	r24, 0x03	; 3
    2e1e:	0e 94 a5 11 	call	0x234a	; 0x234a <LCD_goto>
		LCD_writeStr("OFF");
    2e22:	87 ef       	ldi	r24, 0xF7	; 247
    2e24:	93 e0       	ldi	r25, 0x03	; 3
    2e26:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <LCD_writeStr>
			LCD_goto(10,2);
			LCD_writeStr("Dim L5");
		}	 	 	 
		

}
    2e2a:	59 c0       	rjmp	.+178    	; 0x2ede <control+0x22e>
	{
		LCD_goto(3,1);
		LCD_writeStr("OFF");
		
	}
	else if(Val == 'a')
    2e2c:	89 81       	ldd	r24, Y+1	; 0x01
    2e2e:	81 36       	cpi	r24, 0x61	; 97
    2e30:	61 f4       	brne	.+24     	; 0x2e4a <control+0x19a>
		{ 
		LED_DIMMER(0);
    2e32:	80 e0       	ldi	r24, 0x00	; 0
    2e34:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <LED_DIMMER>
		LCD_goto(10,2);
    2e38:	62 e0       	ldi	r22, 0x02	; 2
    2e3a:	8a e0       	ldi	r24, 0x0A	; 10
    2e3c:	0e 94 a5 11 	call	0x234a	; 0x234a <LCD_goto>
		LCD_writeStr("      ");
    2e40:	8b ef       	ldi	r24, 0xFB	; 251
    2e42:	93 e0       	ldi	r25, 0x03	; 3
    2e44:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <LCD_writeStr>
			LCD_goto(10,2);
			LCD_writeStr("Dim L5");
		}	 	 	 
		

}
    2e48:	4a c0       	rjmp	.+148    	; 0x2ede <control+0x22e>
		{ 
		LED_DIMMER(0);
		LCD_goto(10,2);
		LCD_writeStr("      ");
		} 
	else if(Val == 'b')
    2e4a:	89 81       	ldd	r24, Y+1	; 0x01
    2e4c:	82 36       	cpi	r24, 0x62	; 98
    2e4e:	61 f4       	brne	.+24     	; 0x2e68 <control+0x1b8>
		{
			LED_DIMMER(1);
    2e50:	81 e0       	ldi	r24, 0x01	; 1
    2e52:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <LED_DIMMER>
			LCD_goto(10,2);
    2e56:	62 e0       	ldi	r22, 0x02	; 2
    2e58:	8a e0       	ldi	r24, 0x0A	; 10
    2e5a:	0e 94 a5 11 	call	0x234a	; 0x234a <LCD_goto>
			LCD_writeStr("Dim L1");
    2e5e:	82 e0       	ldi	r24, 0x02	; 2
    2e60:	94 e0       	ldi	r25, 0x04	; 4
    2e62:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <LCD_writeStr>
			LCD_goto(10,2);
			LCD_writeStr("Dim L5");
		}	 	 	 
		

}
    2e66:	3b c0       	rjmp	.+118    	; 0x2ede <control+0x22e>
		{
			LED_DIMMER(1);
			LCD_goto(10,2);
			LCD_writeStr("Dim L1");
		}
	else if(Val == 'c')
    2e68:	89 81       	ldd	r24, Y+1	; 0x01
    2e6a:	83 36       	cpi	r24, 0x63	; 99
    2e6c:	61 f4       	brne	.+24     	; 0x2e86 <control+0x1d6>
		{
			LED_DIMMER(2);
    2e6e:	82 e0       	ldi	r24, 0x02	; 2
    2e70:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <LED_DIMMER>
			LCD_goto(10,2);
    2e74:	62 e0       	ldi	r22, 0x02	; 2
    2e76:	8a e0       	ldi	r24, 0x0A	; 10
    2e78:	0e 94 a5 11 	call	0x234a	; 0x234a <LCD_goto>
			LCD_writeStr("Dim L2");
    2e7c:	89 e0       	ldi	r24, 0x09	; 9
    2e7e:	94 e0       	ldi	r25, 0x04	; 4
    2e80:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <LCD_writeStr>
			LCD_goto(10,2);
			LCD_writeStr("Dim L5");
		}	 	 	 
		

}
    2e84:	2c c0       	rjmp	.+88     	; 0x2ede <control+0x22e>
		{
			LED_DIMMER(2);
			LCD_goto(10,2);
			LCD_writeStr("Dim L2");
		}
	else if(Val == 'd')
    2e86:	89 81       	ldd	r24, Y+1	; 0x01
    2e88:	84 36       	cpi	r24, 0x64	; 100
    2e8a:	61 f4       	brne	.+24     	; 0x2ea4 <control+0x1f4>
		{
			LED_DIMMER(3);
    2e8c:	83 e0       	ldi	r24, 0x03	; 3
    2e8e:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <LED_DIMMER>
			LCD_goto(10,2);
    2e92:	62 e0       	ldi	r22, 0x02	; 2
    2e94:	8a e0       	ldi	r24, 0x0A	; 10
    2e96:	0e 94 a5 11 	call	0x234a	; 0x234a <LCD_goto>
			LCD_writeStr("Dim L3");
    2e9a:	80 e1       	ldi	r24, 0x10	; 16
    2e9c:	94 e0       	ldi	r25, 0x04	; 4
    2e9e:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <LCD_writeStr>
			LCD_goto(10,2);
			LCD_writeStr("Dim L5");
		}	 	 	 
		

}
    2ea2:	1d c0       	rjmp	.+58     	; 0x2ede <control+0x22e>
		{
			LED_DIMMER(3);
			LCD_goto(10,2);
			LCD_writeStr("Dim L3");
		}
	else if(Val == 'e')
    2ea4:	89 81       	ldd	r24, Y+1	; 0x01
    2ea6:	85 36       	cpi	r24, 0x65	; 101
    2ea8:	61 f4       	brne	.+24     	; 0x2ec2 <control+0x212>
		{
			LED_DIMMER(4);
    2eaa:	84 e0       	ldi	r24, 0x04	; 4
    2eac:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <LED_DIMMER>
			LCD_goto(10,2);
    2eb0:	62 e0       	ldi	r22, 0x02	; 2
    2eb2:	8a e0       	ldi	r24, 0x0A	; 10
    2eb4:	0e 94 a5 11 	call	0x234a	; 0x234a <LCD_goto>
			LCD_writeStr("Dim L4");
    2eb8:	87 e1       	ldi	r24, 0x17	; 23
    2eba:	94 e0       	ldi	r25, 0x04	; 4
    2ebc:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <LCD_writeStr>
			LCD_goto(10,2);
			LCD_writeStr("Dim L5");
		}	 	 	 
		

}
    2ec0:	0e c0       	rjmp	.+28     	; 0x2ede <control+0x22e>
		{
			LED_DIMMER(4);
			LCD_goto(10,2);
			LCD_writeStr("Dim L4");
		} 
	else if(Val == 'f')
    2ec2:	89 81       	ldd	r24, Y+1	; 0x01
    2ec4:	86 36       	cpi	r24, 0x66	; 102
    2ec6:	59 f4       	brne	.+22     	; 0x2ede <control+0x22e>
		{
			LED_DIMMER(0);
    2ec8:	80 e0       	ldi	r24, 0x00	; 0
    2eca:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <LED_DIMMER>
			LCD_goto(10,2);
    2ece:	62 e0       	ldi	r22, 0x02	; 2
    2ed0:	8a e0       	ldi	r24, 0x0A	; 10
    2ed2:	0e 94 a5 11 	call	0x234a	; 0x234a <LCD_goto>
			LCD_writeStr("Dim L5");
    2ed6:	8e e1       	ldi	r24, 0x1E	; 30
    2ed8:	94 e0       	ldi	r25, 0x04	; 4
    2eda:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <LCD_writeStr>
		}	 	 	 
		

}
    2ede:	00 00       	nop
    2ee0:	0f 90       	pop	r0
    2ee2:	df 91       	pop	r29
    2ee4:	cf 91       	pop	r28
    2ee6:	08 95       	ret

00002ee8 <__vector_12>:
void __vector_12(void) __attribute__((signal,used));
void __vector_12(void) 
{
    2ee8:	1f 92       	push	r1
    2eea:	0f 92       	push	r0
    2eec:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    2ef0:	0f 92       	push	r0
    2ef2:	11 24       	eor	r1, r1
    2ef4:	2f 93       	push	r18
    2ef6:	3f 93       	push	r19
    2ef8:	4f 93       	push	r20
    2efa:	5f 93       	push	r21
    2efc:	6f 93       	push	r22
    2efe:	7f 93       	push	r23
    2f00:	8f 93       	push	r24
    2f02:	9f 93       	push	r25
    2f04:	af 93       	push	r26
    2f06:	bf 93       	push	r27
    2f08:	ef 93       	push	r30
    2f0a:	ff 93       	push	r31
    2f0c:	cf 93       	push	r28
    2f0e:	df 93       	push	r29
    2f10:	1f 92       	push	r1
    2f12:	cd b7       	in	r28, 0x3d	; 61
    2f14:	de b7       	in	r29, 0x3e	; 62
	u8 Val=SPI_Read();
    2f16:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <SPI_Read>
    2f1a:	89 83       	std	Y+1, r24	; 0x01
		control(Val);
    2f1c:	89 81       	ldd	r24, Y+1	; 0x01
    2f1e:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <control>
	// Add any processing code here
}
    2f22:	00 00       	nop
    2f24:	0f 90       	pop	r0
    2f26:	df 91       	pop	r29
    2f28:	cf 91       	pop	r28
    2f2a:	ff 91       	pop	r31
    2f2c:	ef 91       	pop	r30
    2f2e:	bf 91       	pop	r27
    2f30:	af 91       	pop	r26
    2f32:	9f 91       	pop	r25
    2f34:	8f 91       	pop	r24
    2f36:	7f 91       	pop	r23
    2f38:	6f 91       	pop	r22
    2f3a:	5f 91       	pop	r21
    2f3c:	4f 91       	pop	r20
    2f3e:	3f 91       	pop	r19
    2f40:	2f 91       	pop	r18
    2f42:	0f 90       	pop	r0
    2f44:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    2f48:	0f 90       	pop	r0
    2f4a:	1f 90       	pop	r1
    2f4c:	18 95       	reti

00002f4e <TIMER0_initFastPwm>:
void (*CTC_ptr)();

void TIMER0_setCallbackCTC( void (*APP_func)() )
{
	CTC_ptr = APP_func;
}
    2f4e:	cf 93       	push	r28
    2f50:	df 93       	push	r29
    2f52:	cd b7       	in	r28, 0x3d	; 61
    2f54:	de b7       	in	r29, 0x3e	; 62
    2f56:	83 e5       	ldi	r24, 0x53	; 83
    2f58:	90 e0       	ldi	r25, 0x00	; 0
    2f5a:	23 e5       	ldi	r18, 0x53	; 83
    2f5c:	30 e0       	ldi	r19, 0x00	; 0
    2f5e:	f9 01       	movw	r30, r18
    2f60:	20 81       	ld	r18, Z
    2f62:	2f 77       	andi	r18, 0x7F	; 127
    2f64:	fc 01       	movw	r30, r24
    2f66:	20 83       	st	Z, r18
    2f68:	83 e5       	ldi	r24, 0x53	; 83
    2f6a:	90 e0       	ldi	r25, 0x00	; 0
    2f6c:	23 e5       	ldi	r18, 0x53	; 83
    2f6e:	30 e0       	ldi	r19, 0x00	; 0
    2f70:	f9 01       	movw	r30, r18
    2f72:	20 81       	ld	r18, Z
    2f74:	20 64       	ori	r18, 0x40	; 64
    2f76:	fc 01       	movw	r30, r24
    2f78:	20 83       	st	Z, r18
    2f7a:	83 e5       	ldi	r24, 0x53	; 83
    2f7c:	90 e0       	ldi	r25, 0x00	; 0
    2f7e:	23 e5       	ldi	r18, 0x53	; 83
    2f80:	30 e0       	ldi	r19, 0x00	; 0
    2f82:	f9 01       	movw	r30, r18
    2f84:	20 81       	ld	r18, Z
    2f86:	28 60       	ori	r18, 0x08	; 8
    2f88:	fc 01       	movw	r30, r24
    2f8a:	20 83       	st	Z, r18
    2f8c:	83 e5       	ldi	r24, 0x53	; 83
    2f8e:	90 e0       	ldi	r25, 0x00	; 0
    2f90:	23 e5       	ldi	r18, 0x53	; 83
    2f92:	30 e0       	ldi	r19, 0x00	; 0
    2f94:	f9 01       	movw	r30, r18
    2f96:	20 81       	ld	r18, Z
    2f98:	2f 7e       	andi	r18, 0xEF	; 239
    2f9a:	fc 01       	movw	r30, r24
    2f9c:	20 83       	st	Z, r18
    2f9e:	83 e5       	ldi	r24, 0x53	; 83
    2fa0:	90 e0       	ldi	r25, 0x00	; 0
    2fa2:	23 e5       	ldi	r18, 0x53	; 83
    2fa4:	30 e0       	ldi	r19, 0x00	; 0
    2fa6:	f9 01       	movw	r30, r18
    2fa8:	20 81       	ld	r18, Z
    2faa:	20 62       	ori	r18, 0x20	; 32
    2fac:	fc 01       	movw	r30, r24
    2fae:	20 83       	st	Z, r18
    2fb0:	00 00       	nop
    2fb2:	df 91       	pop	r29
    2fb4:	cf 91       	pop	r28
    2fb6:	08 95       	ret

00002fb8 <TIMER0_start>:
    2fb8:	cf 93       	push	r28
    2fba:	df 93       	push	r29
    2fbc:	1f 92       	push	r1
    2fbe:	cd b7       	in	r28, 0x3d	; 61
    2fc0:	de b7       	in	r29, 0x3e	; 62
    2fc2:	89 83       	std	Y+1, r24	; 0x01
    2fc4:	89 81       	ldd	r24, Y+1	; 0x01
    2fc6:	88 23       	and	r24, r24
    2fc8:	e1 f4       	brne	.+56     	; 0x3002 <TIMER0_start+0x4a>
    2fca:	83 e5       	ldi	r24, 0x53	; 83
    2fcc:	90 e0       	ldi	r25, 0x00	; 0
    2fce:	23 e5       	ldi	r18, 0x53	; 83
    2fd0:	30 e0       	ldi	r19, 0x00	; 0
    2fd2:	f9 01       	movw	r30, r18
    2fd4:	20 81       	ld	r18, Z
    2fd6:	21 60       	ori	r18, 0x01	; 1
    2fd8:	fc 01       	movw	r30, r24
    2fda:	20 83       	st	Z, r18
    2fdc:	83 e5       	ldi	r24, 0x53	; 83
    2fde:	90 e0       	ldi	r25, 0x00	; 0
    2fe0:	23 e5       	ldi	r18, 0x53	; 83
    2fe2:	30 e0       	ldi	r19, 0x00	; 0
    2fe4:	f9 01       	movw	r30, r18
    2fe6:	20 81       	ld	r18, Z
    2fe8:	2d 7f       	andi	r18, 0xFD	; 253
    2fea:	fc 01       	movw	r30, r24
    2fec:	20 83       	st	Z, r18
    2fee:	83 e5       	ldi	r24, 0x53	; 83
    2ff0:	90 e0       	ldi	r25, 0x00	; 0
    2ff2:	23 e5       	ldi	r18, 0x53	; 83
    2ff4:	30 e0       	ldi	r19, 0x00	; 0
    2ff6:	f9 01       	movw	r30, r18
    2ff8:	20 81       	ld	r18, Z
    2ffa:	2b 7f       	andi	r18, 0xFB	; 251
    2ffc:	fc 01       	movw	r30, r24
    2ffe:	20 83       	st	Z, r18
    3000:	7b c0       	rjmp	.+246    	; 0x30f8 <TIMER0_start+0x140>
    3002:	89 81       	ldd	r24, Y+1	; 0x01
    3004:	81 30       	cpi	r24, 0x01	; 1
    3006:	e1 f4       	brne	.+56     	; 0x3040 <TIMER0_start+0x88>
    3008:	83 e5       	ldi	r24, 0x53	; 83
    300a:	90 e0       	ldi	r25, 0x00	; 0
    300c:	23 e5       	ldi	r18, 0x53	; 83
    300e:	30 e0       	ldi	r19, 0x00	; 0
    3010:	f9 01       	movw	r30, r18
    3012:	20 81       	ld	r18, Z
    3014:	2e 7f       	andi	r18, 0xFE	; 254
    3016:	fc 01       	movw	r30, r24
    3018:	20 83       	st	Z, r18
    301a:	83 e5       	ldi	r24, 0x53	; 83
    301c:	90 e0       	ldi	r25, 0x00	; 0
    301e:	23 e5       	ldi	r18, 0x53	; 83
    3020:	30 e0       	ldi	r19, 0x00	; 0
    3022:	f9 01       	movw	r30, r18
    3024:	20 81       	ld	r18, Z
    3026:	22 60       	ori	r18, 0x02	; 2
    3028:	fc 01       	movw	r30, r24
    302a:	20 83       	st	Z, r18
    302c:	83 e5       	ldi	r24, 0x53	; 83
    302e:	90 e0       	ldi	r25, 0x00	; 0
    3030:	23 e5       	ldi	r18, 0x53	; 83
    3032:	30 e0       	ldi	r19, 0x00	; 0
    3034:	f9 01       	movw	r30, r18
    3036:	20 81       	ld	r18, Z
    3038:	2b 7f       	andi	r18, 0xFB	; 251
    303a:	fc 01       	movw	r30, r24
    303c:	20 83       	st	Z, r18
    303e:	5c c0       	rjmp	.+184    	; 0x30f8 <TIMER0_start+0x140>
    3040:	89 81       	ldd	r24, Y+1	; 0x01
    3042:	82 30       	cpi	r24, 0x02	; 2
    3044:	e1 f4       	brne	.+56     	; 0x307e <TIMER0_start+0xc6>
    3046:	83 e5       	ldi	r24, 0x53	; 83
    3048:	90 e0       	ldi	r25, 0x00	; 0
    304a:	23 e5       	ldi	r18, 0x53	; 83
    304c:	30 e0       	ldi	r19, 0x00	; 0
    304e:	f9 01       	movw	r30, r18
    3050:	20 81       	ld	r18, Z
    3052:	21 60       	ori	r18, 0x01	; 1
    3054:	fc 01       	movw	r30, r24
    3056:	20 83       	st	Z, r18
    3058:	83 e5       	ldi	r24, 0x53	; 83
    305a:	90 e0       	ldi	r25, 0x00	; 0
    305c:	23 e5       	ldi	r18, 0x53	; 83
    305e:	30 e0       	ldi	r19, 0x00	; 0
    3060:	f9 01       	movw	r30, r18
    3062:	20 81       	ld	r18, Z
    3064:	22 60       	ori	r18, 0x02	; 2
    3066:	fc 01       	movw	r30, r24
    3068:	20 83       	st	Z, r18
    306a:	83 e5       	ldi	r24, 0x53	; 83
    306c:	90 e0       	ldi	r25, 0x00	; 0
    306e:	23 e5       	ldi	r18, 0x53	; 83
    3070:	30 e0       	ldi	r19, 0x00	; 0
    3072:	f9 01       	movw	r30, r18
    3074:	20 81       	ld	r18, Z
    3076:	2b 7f       	andi	r18, 0xFB	; 251
    3078:	fc 01       	movw	r30, r24
    307a:	20 83       	st	Z, r18
    307c:	3d c0       	rjmp	.+122    	; 0x30f8 <TIMER0_start+0x140>
    307e:	89 81       	ldd	r24, Y+1	; 0x01
    3080:	83 30       	cpi	r24, 0x03	; 3
    3082:	e1 f4       	brne	.+56     	; 0x30bc <TIMER0_start+0x104>
    3084:	83 e5       	ldi	r24, 0x53	; 83
    3086:	90 e0       	ldi	r25, 0x00	; 0
    3088:	23 e5       	ldi	r18, 0x53	; 83
    308a:	30 e0       	ldi	r19, 0x00	; 0
    308c:	f9 01       	movw	r30, r18
    308e:	20 81       	ld	r18, Z
    3090:	2e 7f       	andi	r18, 0xFE	; 254
    3092:	fc 01       	movw	r30, r24
    3094:	20 83       	st	Z, r18
    3096:	83 e5       	ldi	r24, 0x53	; 83
    3098:	90 e0       	ldi	r25, 0x00	; 0
    309a:	23 e5       	ldi	r18, 0x53	; 83
    309c:	30 e0       	ldi	r19, 0x00	; 0
    309e:	f9 01       	movw	r30, r18
    30a0:	20 81       	ld	r18, Z
    30a2:	2d 7f       	andi	r18, 0xFD	; 253
    30a4:	fc 01       	movw	r30, r24
    30a6:	20 83       	st	Z, r18
    30a8:	83 e5       	ldi	r24, 0x53	; 83
    30aa:	90 e0       	ldi	r25, 0x00	; 0
    30ac:	23 e5       	ldi	r18, 0x53	; 83
    30ae:	30 e0       	ldi	r19, 0x00	; 0
    30b0:	f9 01       	movw	r30, r18
    30b2:	20 81       	ld	r18, Z
    30b4:	24 60       	ori	r18, 0x04	; 4
    30b6:	fc 01       	movw	r30, r24
    30b8:	20 83       	st	Z, r18
    30ba:	1e c0       	rjmp	.+60     	; 0x30f8 <TIMER0_start+0x140>
    30bc:	89 81       	ldd	r24, Y+1	; 0x01
    30be:	84 30       	cpi	r24, 0x04	; 4
    30c0:	d9 f4       	brne	.+54     	; 0x30f8 <TIMER0_start+0x140>
    30c2:	83 e5       	ldi	r24, 0x53	; 83
    30c4:	90 e0       	ldi	r25, 0x00	; 0
    30c6:	23 e5       	ldi	r18, 0x53	; 83
    30c8:	30 e0       	ldi	r19, 0x00	; 0
    30ca:	f9 01       	movw	r30, r18
    30cc:	20 81       	ld	r18, Z
    30ce:	21 60       	ori	r18, 0x01	; 1
    30d0:	fc 01       	movw	r30, r24
    30d2:	20 83       	st	Z, r18
    30d4:	83 e5       	ldi	r24, 0x53	; 83
    30d6:	90 e0       	ldi	r25, 0x00	; 0
    30d8:	23 e5       	ldi	r18, 0x53	; 83
    30da:	30 e0       	ldi	r19, 0x00	; 0
    30dc:	f9 01       	movw	r30, r18
    30de:	20 81       	ld	r18, Z
    30e0:	2d 7f       	andi	r18, 0xFD	; 253
    30e2:	fc 01       	movw	r30, r24
    30e4:	20 83       	st	Z, r18
    30e6:	83 e5       	ldi	r24, 0x53	; 83
    30e8:	90 e0       	ldi	r25, 0x00	; 0
    30ea:	23 e5       	ldi	r18, 0x53	; 83
    30ec:	30 e0       	ldi	r19, 0x00	; 0
    30ee:	f9 01       	movw	r30, r18
    30f0:	20 81       	ld	r18, Z
    30f2:	24 60       	ori	r18, 0x04	; 4
    30f4:	fc 01       	movw	r30, r24
    30f6:	20 83       	st	Z, r18
    30f8:	00 00       	nop
    30fa:	0f 90       	pop	r0
    30fc:	df 91       	pop	r29
    30fe:	cf 91       	pop	r28
    3100:	08 95       	ret

00003102 <TIMER0_stop>:
    3102:	cf 93       	push	r28
    3104:	df 93       	push	r29
    3106:	cd b7       	in	r28, 0x3d	; 61
    3108:	de b7       	in	r29, 0x3e	; 62
    310a:	83 e5       	ldi	r24, 0x53	; 83
    310c:	90 e0       	ldi	r25, 0x00	; 0
    310e:	23 e5       	ldi	r18, 0x53	; 83
    3110:	30 e0       	ldi	r19, 0x00	; 0
    3112:	f9 01       	movw	r30, r18
    3114:	20 81       	ld	r18, Z
    3116:	2e 7f       	andi	r18, 0xFE	; 254
    3118:	fc 01       	movw	r30, r24
    311a:	20 83       	st	Z, r18
    311c:	83 e5       	ldi	r24, 0x53	; 83
    311e:	90 e0       	ldi	r25, 0x00	; 0
    3120:	23 e5       	ldi	r18, 0x53	; 83
    3122:	30 e0       	ldi	r19, 0x00	; 0
    3124:	f9 01       	movw	r30, r18
    3126:	20 81       	ld	r18, Z
    3128:	2d 7f       	andi	r18, 0xFD	; 253
    312a:	fc 01       	movw	r30, r24
    312c:	20 83       	st	Z, r18
    312e:	83 e5       	ldi	r24, 0x53	; 83
    3130:	90 e0       	ldi	r25, 0x00	; 0
    3132:	23 e5       	ldi	r18, 0x53	; 83
    3134:	30 e0       	ldi	r19, 0x00	; 0
    3136:	f9 01       	movw	r30, r18
    3138:	20 81       	ld	r18, Z
    313a:	2b 7f       	andi	r18, 0xFB	; 251
    313c:	fc 01       	movw	r30, r24
    313e:	20 83       	st	Z, r18
    3140:	00 00       	nop
    3142:	df 91       	pop	r29
    3144:	cf 91       	pop	r28
    3146:	08 95       	ret

00003148 <__vector_11>:
    3148:	1f 92       	push	r1
    314a:	0f 92       	push	r0
    314c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    3150:	0f 92       	push	r0
    3152:	11 24       	eor	r1, r1
    3154:	2f 93       	push	r18
    3156:	3f 93       	push	r19
    3158:	4f 93       	push	r20
    315a:	5f 93       	push	r21
    315c:	6f 93       	push	r22
    315e:	7f 93       	push	r23
    3160:	8f 93       	push	r24
    3162:	9f 93       	push	r25
    3164:	af 93       	push	r26
    3166:	bf 93       	push	r27
    3168:	ef 93       	push	r30
    316a:	ff 93       	push	r31
    316c:	cf 93       	push	r28
    316e:	df 93       	push	r29
    3170:	cd b7       	in	r28, 0x3d	; 61
    3172:	de b7       	in	r29, 0x3e	; 62
    3174:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <OV_ptr>
    3178:	90 91 30 04 	lds	r25, 0x0430	; 0x800430 <OV_ptr+0x1>
    317c:	fc 01       	movw	r30, r24
    317e:	09 95       	icall
    3180:	00 00       	nop
    3182:	df 91       	pop	r29
    3184:	cf 91       	pop	r28
    3186:	ff 91       	pop	r31
    3188:	ef 91       	pop	r30
    318a:	bf 91       	pop	r27
    318c:	af 91       	pop	r26
    318e:	9f 91       	pop	r25
    3190:	8f 91       	pop	r24
    3192:	7f 91       	pop	r23
    3194:	6f 91       	pop	r22
    3196:	5f 91       	pop	r21
    3198:	4f 91       	pop	r20
    319a:	3f 91       	pop	r19
    319c:	2f 91       	pop	r18
    319e:	0f 90       	pop	r0
    31a0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    31a4:	0f 90       	pop	r0
    31a6:	1f 90       	pop	r1
    31a8:	18 95       	reti

000031aa <__vector_10>:

//ISR
void __vector_10(void) __attribute__((signal,used));
void __vector_10(void)
{
    31aa:	1f 92       	push	r1
    31ac:	0f 92       	push	r0
    31ae:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    31b2:	0f 92       	push	r0
    31b4:	11 24       	eor	r1, r1
    31b6:	2f 93       	push	r18
    31b8:	3f 93       	push	r19
    31ba:	4f 93       	push	r20
    31bc:	5f 93       	push	r21
    31be:	6f 93       	push	r22
    31c0:	7f 93       	push	r23
    31c2:	8f 93       	push	r24
    31c4:	9f 93       	push	r25
    31c6:	af 93       	push	r26
    31c8:	bf 93       	push	r27
    31ca:	ef 93       	push	r30
    31cc:	ff 93       	push	r31
    31ce:	cf 93       	push	r28
    31d0:	df 93       	push	r29
    31d2:	cd b7       	in	r28, 0x3d	; 61
    31d4:	de b7       	in	r29, 0x3e	; 62
	//toggleLed();
	CTC_ptr();
    31d6:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <CTC_ptr>
    31da:	90 91 2e 04 	lds	r25, 0x042E	; 0x80042e <CTC_ptr+0x1>
    31de:	fc 01       	movw	r30, r24
    31e0:	09 95       	icall
	
}
    31e2:	00 00       	nop
    31e4:	df 91       	pop	r29
    31e6:	cf 91       	pop	r28
    31e8:	ff 91       	pop	r31
    31ea:	ef 91       	pop	r30
    31ec:	bf 91       	pop	r27
    31ee:	af 91       	pop	r26
    31f0:	9f 91       	pop	r25
    31f2:	8f 91       	pop	r24
    31f4:	7f 91       	pop	r23
    31f6:	6f 91       	pop	r22
    31f8:	5f 91       	pop	r21
    31fa:	4f 91       	pop	r20
    31fc:	3f 91       	pop	r19
    31fe:	2f 91       	pop	r18
    3200:	0f 90       	pop	r0
    3202:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    3206:	0f 90       	pop	r0
    3208:	1f 90       	pop	r1
    320a:	18 95       	reti

0000320c <TIMER0_setDuty>:

void TIMER0_setDuty(u8 duty)
{
    320c:	cf 93       	push	r28
    320e:	df 93       	push	r29
    3210:	1f 92       	push	r1
    3212:	cd b7       	in	r28, 0x3d	; 61
    3214:	de b7       	in	r29, 0x3e	; 62
    3216:	89 83       	std	Y+1, r24	; 0x01
			#if(PWM_MODE==PWM_NON_INVERTING)
			{
				OCR0=((duty*256)/100)-1;
    3218:	2c e5       	ldi	r18, 0x5C	; 92
    321a:	30 e0       	ldi	r19, 0x00	; 0
    321c:	89 81       	ldd	r24, Y+1	; 0x01
    321e:	88 2f       	mov	r24, r24
    3220:	90 e0       	ldi	r25, 0x00	; 0
    3222:	98 2f       	mov	r25, r24
    3224:	88 27       	eor	r24, r24
    3226:	44 e6       	ldi	r20, 0x64	; 100
    3228:	50 e0       	ldi	r21, 0x00	; 0
    322a:	ba 01       	movw	r22, r20
    322c:	0e 94 0f 1d 	call	0x3a1e	; 0x3a1e <__divmodhi4>
    3230:	cb 01       	movw	r24, r22
    3232:	81 50       	subi	r24, 0x01	; 1
    3234:	f9 01       	movw	r30, r18
    3236:	80 83       	st	Z, r24
			#elif(PWM_MODE==PWM_INVERTING)
			{
				OCR0=((duty*256)/100)-1;
			}
			#endif
}
    3238:	00 00       	nop
    323a:	0f 90       	pop	r0
    323c:	df 91       	pop	r29
    323e:	cf 91       	pop	r28
    3240:	08 95       	ret

00003242 <TIMER0_setFrequency>:

void TIMER0_setFrequency(u8 pwm_frequency)
{
    3242:	cf 93       	push	r28
    3244:	df 93       	push	r29
    3246:	1f 92       	push	r1
    3248:	cd b7       	in	r28, 0x3d	; 61
    324a:	de b7       	in	r29, 0x3e	; 62
    324c:	89 83       	std	Y+1, r24	; 0x01
	if (pwm_frequency==PWM_FREQUENCY_62500)
    324e:	89 81       	ldd	r24, Y+1	; 0x01
    3250:	88 23       	and	r24, r24
    3252:	21 f4       	brne	.+8      	; 0x325c <TIMER0_setFrequency+0x1a>
	{
		TIMER0_start(TIMER0_CLK_DIV_1);
    3254:	80 e0       	ldi	r24, 0x00	; 0
    3256:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <TIMER0_start>
	else if (pwm_frequency==PWM_FREQUENCY_7812)
	{
		TIMER0_start(TIMER0_CLK_DIV_8);

	}
    325a:	06 c0       	rjmp	.+12     	; 0x3268 <TIMER0_setFrequency+0x26>
{
	if (pwm_frequency==PWM_FREQUENCY_62500)
	{
		TIMER0_start(TIMER0_CLK_DIV_1);
	}
	else if (pwm_frequency==PWM_FREQUENCY_7812)
    325c:	89 81       	ldd	r24, Y+1	; 0x01
    325e:	81 30       	cpi	r24, 0x01	; 1
    3260:	19 f4       	brne	.+6      	; 0x3268 <TIMER0_setFrequency+0x26>
	{
		TIMER0_start(TIMER0_CLK_DIV_8);
    3262:	81 e0       	ldi	r24, 0x01	; 1
    3264:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <TIMER0_start>

	}
    3268:	00 00       	nop
    326a:	0f 90       	pop	r0
    326c:	df 91       	pop	r29
    326e:	cf 91       	pop	r28
    3270:	08 95       	ret

00003272 <TIMER1_initFastPwmMod14>:
#include "TIMER1_INT.h"
#include "STD_TYPES.h"
#include "BIT_MATH.h"

void TIMER1_initFastPwmMod14()
{
    3272:	cf 93       	push	r28
    3274:	df 93       	push	r29
    3276:	cd b7       	in	r28, 0x3d	; 61
    3278:	de b7       	in	r29, 0x3e	; 62
	//force bit
	SET_BIT(TCCR1A,FOC1A);
    327a:	8f e4       	ldi	r24, 0x4F	; 79
    327c:	90 e0       	ldi	r25, 0x00	; 0
    327e:	2f e4       	ldi	r18, 0x4F	; 79
    3280:	30 e0       	ldi	r19, 0x00	; 0
    3282:	f9 01       	movw	r30, r18
    3284:	20 81       	ld	r18, Z
    3286:	24 60       	ori	r18, 0x04	; 4
    3288:	fc 01       	movw	r30, r24
    328a:	20 83       	st	Z, r18
	
	//select fast PWM mode 14
	CLEAR_BIT(TCCR1A,WGM10);
    328c:	8f e4       	ldi	r24, 0x4F	; 79
    328e:	90 e0       	ldi	r25, 0x00	; 0
    3290:	2f e4       	ldi	r18, 0x4F	; 79
    3292:	30 e0       	ldi	r19, 0x00	; 0
    3294:	f9 01       	movw	r30, r18
    3296:	20 81       	ld	r18, Z
    3298:	2e 7f       	andi	r18, 0xFE	; 254
    329a:	fc 01       	movw	r30, r24
    329c:	20 83       	st	Z, r18
	SET_BIT(TCCR1A,WGM11);
    329e:	8f e4       	ldi	r24, 0x4F	; 79
    32a0:	90 e0       	ldi	r25, 0x00	; 0
    32a2:	2f e4       	ldi	r18, 0x4F	; 79
    32a4:	30 e0       	ldi	r19, 0x00	; 0
    32a6:	f9 01       	movw	r30, r18
    32a8:	20 81       	ld	r18, Z
    32aa:	22 60       	ori	r18, 0x02	; 2
    32ac:	fc 01       	movw	r30, r24
    32ae:	20 83       	st	Z, r18
	SET_BIT(TCCR1B,WGM12);
    32b0:	8e e4       	ldi	r24, 0x4E	; 78
    32b2:	90 e0       	ldi	r25, 0x00	; 0
    32b4:	2e e4       	ldi	r18, 0x4E	; 78
    32b6:	30 e0       	ldi	r19, 0x00	; 0
    32b8:	f9 01       	movw	r30, r18
    32ba:	20 81       	ld	r18, Z
    32bc:	28 60       	ori	r18, 0x08	; 8
    32be:	fc 01       	movw	r30, r24
    32c0:	20 83       	st	Z, r18
	SET_BIT(TCCR1B,WGM13);
    32c2:	8e e4       	ldi	r24, 0x4E	; 78
    32c4:	90 e0       	ldi	r25, 0x00	; 0
    32c6:	2e e4       	ldi	r18, 0x4E	; 78
    32c8:	30 e0       	ldi	r19, 0x00	; 0
    32ca:	f9 01       	movw	r30, r18
    32cc:	20 81       	ld	r18, Z
    32ce:	20 61       	ori	r18, 0x10	; 16
    32d0:	fc 01       	movw	r30, r24
    32d2:	20 83       	st	Z, r18
	
	#if(TIMER1_PWM_MODE == TIMER1_PWM_NON_INVERTING)
	{
		CLEAR_BIT(TCCR1A,COM1A0);
    32d4:	8f e4       	ldi	r24, 0x4F	; 79
    32d6:	90 e0       	ldi	r25, 0x00	; 0
    32d8:	2f e4       	ldi	r18, 0x4F	; 79
    32da:	30 e0       	ldi	r19, 0x00	; 0
    32dc:	f9 01       	movw	r30, r18
    32de:	20 81       	ld	r18, Z
    32e0:	2f 7b       	andi	r18, 0xBF	; 191
    32e2:	fc 01       	movw	r30, r24
    32e4:	20 83       	st	Z, r18
		SET_BIT(TCCR1A,COM1A1);
    32e6:	8f e4       	ldi	r24, 0x4F	; 79
    32e8:	90 e0       	ldi	r25, 0x00	; 0
    32ea:	2f e4       	ldi	r18, 0x4F	; 79
    32ec:	30 e0       	ldi	r19, 0x00	; 0
    32ee:	f9 01       	movw	r30, r18
    32f0:	20 81       	ld	r18, Z
    32f2:	20 68       	ori	r18, 0x80	; 128
    32f4:	fc 01       	movw	r30, r24
    32f6:	20 83       	st	Z, r18
	{
		SET_BIT(TCCR1A,COM1A0);
		SET_BIT(TCCR1A,COM1A1);
	}
	#endif
}
    32f8:	00 00       	nop
    32fa:	df 91       	pop	r29
    32fc:	cf 91       	pop	r28
    32fe:	08 95       	ret

00003300 <TIMER1_setDuty>:

void TIMER1_setDuty(f32 duty)
{
    3300:	0f 93       	push	r16
    3302:	1f 93       	push	r17
    3304:	cf 93       	push	r28
    3306:	df 93       	push	r29
    3308:	00 d0       	rcall	.+0      	; 0x330a <TIMER1_setDuty+0xa>
    330a:	00 d0       	rcall	.+0      	; 0x330c <TIMER1_setDuty+0xc>
    330c:	cd b7       	in	r28, 0x3d	; 61
    330e:	de b7       	in	r29, 0x3e	; 62
    3310:	69 83       	std	Y+1, r22	; 0x01
    3312:	7a 83       	std	Y+2, r23	; 0x02
    3314:	8b 83       	std	Y+3, r24	; 0x03
    3316:	9c 83       	std	Y+4, r25	; 0x04
	#if(TIMER1_PWM_MODE == TIMER1_PWM_NON_INVERTING)
	{
		OCR1A = ((duty*ICR1/100.0) -1);
    3318:	0a e4       	ldi	r16, 0x4A	; 74
    331a:	10 e0       	ldi	r17, 0x00	; 0
    331c:	86 e4       	ldi	r24, 0x46	; 70
    331e:	90 e0       	ldi	r25, 0x00	; 0
    3320:	fc 01       	movw	r30, r24
    3322:	80 81       	ld	r24, Z
    3324:	91 81       	ldd	r25, Z+1	; 0x01
    3326:	cc 01       	movw	r24, r24
    3328:	a0 e0       	ldi	r26, 0x00	; 0
    332a:	b0 e0       	ldi	r27, 0x00	; 0
    332c:	bc 01       	movw	r22, r24
    332e:	cd 01       	movw	r24, r26
    3330:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <__floatunsisf>
    3334:	dc 01       	movw	r26, r24
    3336:	cb 01       	movw	r24, r22
    3338:	29 81       	ldd	r18, Y+1	; 0x01
    333a:	3a 81       	ldd	r19, Y+2	; 0x02
    333c:	4b 81       	ldd	r20, Y+3	; 0x03
    333e:	5c 81       	ldd	r21, Y+4	; 0x04
    3340:	bc 01       	movw	r22, r24
    3342:	cd 01       	movw	r24, r26
    3344:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__mulsf3>
    3348:	dc 01       	movw	r26, r24
    334a:	cb 01       	movw	r24, r22
    334c:	20 e0       	ldi	r18, 0x00	; 0
    334e:	30 e0       	ldi	r19, 0x00	; 0
    3350:	48 ec       	ldi	r20, 0xC8	; 200
    3352:	52 e4       	ldi	r21, 0x42	; 66
    3354:	bc 01       	movw	r22, r24
    3356:	cd 01       	movw	r24, r26
    3358:	0e 94 4a 1b 	call	0x3694	; 0x3694 <__divsf3>
    335c:	dc 01       	movw	r26, r24
    335e:	cb 01       	movw	r24, r22
    3360:	20 e0       	ldi	r18, 0x00	; 0
    3362:	30 e0       	ldi	r19, 0x00	; 0
    3364:	40 e8       	ldi	r20, 0x80	; 128
    3366:	5f e3       	ldi	r21, 0x3F	; 63
    3368:	bc 01       	movw	r22, r24
    336a:	cd 01       	movw	r24, r26
    336c:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <__subsf3>
    3370:	dc 01       	movw	r26, r24
    3372:	cb 01       	movw	r24, r22
    3374:	bc 01       	movw	r22, r24
    3376:	cd 01       	movw	r24, r26
    3378:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__fixunssfsi>
    337c:	dc 01       	movw	r26, r24
    337e:	cb 01       	movw	r24, r22
    3380:	f8 01       	movw	r30, r16
    3382:	91 83       	std	Z+1, r25	; 0x01
    3384:	80 83       	st	Z, r24
	#elif(TIMER1_PWM_MODE == TIMER1_PWM_INVERTING)
	{
		
	}
	#endif
}
    3386:	00 00       	nop
    3388:	0f 90       	pop	r0
    338a:	0f 90       	pop	r0
    338c:	0f 90       	pop	r0
    338e:	0f 90       	pop	r0
    3390:	df 91       	pop	r29
    3392:	cf 91       	pop	r28
    3394:	1f 91       	pop	r17
    3396:	0f 91       	pop	r16
    3398:	08 95       	ret

0000339a <TIMER1_setFrequency>:

void TIMER1_setFrequency(u16 pwm_frequency)
{
    339a:	0f 93       	push	r16
    339c:	1f 93       	push	r17
    339e:	cf 93       	push	r28
    33a0:	df 93       	push	r29
    33a2:	00 d0       	rcall	.+0      	; 0x33a4 <TIMER1_setFrequency+0xa>
    33a4:	cd b7       	in	r28, 0x3d	; 61
    33a6:	de b7       	in	r29, 0x3e	; 62
    33a8:	9a 83       	std	Y+2, r25	; 0x02
    33aa:	89 83       	std	Y+1, r24	; 0x01
	//ICR1 = 4999;//-> 50 Hz
	ICR1 = (16000000/(64.0*pwm_frequency))-1;
    33ac:	06 e4       	ldi	r16, 0x46	; 70
    33ae:	10 e0       	ldi	r17, 0x00	; 0
    33b0:	89 81       	ldd	r24, Y+1	; 0x01
    33b2:	9a 81       	ldd	r25, Y+2	; 0x02
    33b4:	cc 01       	movw	r24, r24
    33b6:	a0 e0       	ldi	r26, 0x00	; 0
    33b8:	b0 e0       	ldi	r27, 0x00	; 0
    33ba:	bc 01       	movw	r22, r24
    33bc:	cd 01       	movw	r24, r26
    33be:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <__floatunsisf>
    33c2:	dc 01       	movw	r26, r24
    33c4:	cb 01       	movw	r24, r22
    33c6:	20 e0       	ldi	r18, 0x00	; 0
    33c8:	30 e0       	ldi	r19, 0x00	; 0
    33ca:	40 e8       	ldi	r20, 0x80	; 128
    33cc:	52 e4       	ldi	r21, 0x42	; 66
    33ce:	bc 01       	movw	r22, r24
    33d0:	cd 01       	movw	r24, r26
    33d2:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__mulsf3>
    33d6:	dc 01       	movw	r26, r24
    33d8:	cb 01       	movw	r24, r22
    33da:	9c 01       	movw	r18, r24
    33dc:	ad 01       	movw	r20, r26
    33de:	60 e0       	ldi	r22, 0x00	; 0
    33e0:	74 e2       	ldi	r23, 0x24	; 36
    33e2:	84 e7       	ldi	r24, 0x74	; 116
    33e4:	9b e4       	ldi	r25, 0x4B	; 75
    33e6:	0e 94 4a 1b 	call	0x3694	; 0x3694 <__divsf3>
    33ea:	dc 01       	movw	r26, r24
    33ec:	cb 01       	movw	r24, r22
    33ee:	20 e0       	ldi	r18, 0x00	; 0
    33f0:	30 e0       	ldi	r19, 0x00	; 0
    33f2:	40 e8       	ldi	r20, 0x80	; 128
    33f4:	5f e3       	ldi	r21, 0x3F	; 63
    33f6:	bc 01       	movw	r22, r24
    33f8:	cd 01       	movw	r24, r26
    33fa:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <__subsf3>
    33fe:	dc 01       	movw	r26, r24
    3400:	cb 01       	movw	r24, r22
    3402:	bc 01       	movw	r22, r24
    3404:	cd 01       	movw	r24, r26
    3406:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__fixunssfsi>
    340a:	dc 01       	movw	r26, r24
    340c:	cb 01       	movw	r24, r22
    340e:	f8 01       	movw	r30, r16
    3410:	91 83       	std	Z+1, r25	; 0x01
    3412:	80 83       	st	Z, r24
	
	// select prescaler 64
	SET_BIT(TCCR1B,CS10);
    3414:	8e e4       	ldi	r24, 0x4E	; 78
    3416:	90 e0       	ldi	r25, 0x00	; 0
    3418:	2e e4       	ldi	r18, 0x4E	; 78
    341a:	30 e0       	ldi	r19, 0x00	; 0
    341c:	f9 01       	movw	r30, r18
    341e:	20 81       	ld	r18, Z
    3420:	21 60       	ori	r18, 0x01	; 1
    3422:	fc 01       	movw	r30, r24
    3424:	20 83       	st	Z, r18
	SET_BIT(TCCR1B,CS11);
    3426:	8e e4       	ldi	r24, 0x4E	; 78
    3428:	90 e0       	ldi	r25, 0x00	; 0
    342a:	2e e4       	ldi	r18, 0x4E	; 78
    342c:	30 e0       	ldi	r19, 0x00	; 0
    342e:	f9 01       	movw	r30, r18
    3430:	20 81       	ld	r18, Z
    3432:	22 60       	ori	r18, 0x02	; 2
    3434:	fc 01       	movw	r30, r24
    3436:	20 83       	st	Z, r18
	CLEAR_BIT(TCCR1B,CS12);
    3438:	8e e4       	ldi	r24, 0x4E	; 78
    343a:	90 e0       	ldi	r25, 0x00	; 0
    343c:	2e e4       	ldi	r18, 0x4E	; 78
    343e:	30 e0       	ldi	r19, 0x00	; 0
    3440:	f9 01       	movw	r30, r18
    3442:	20 81       	ld	r18, Z
    3444:	2b 7f       	andi	r18, 0xFB	; 251
    3446:	fc 01       	movw	r30, r24
    3448:	20 83       	st	Z, r18
    344a:	00 00       	nop
    344c:	0f 90       	pop	r0
    344e:	0f 90       	pop	r0
    3450:	df 91       	pop	r29
    3452:	cf 91       	pop	r28
    3454:	1f 91       	pop	r17
    3456:	0f 91       	pop	r16
    3458:	08 95       	ret

0000345a <UART_init>:
#include "BIT_MATH.h"
#include "UART_PRIV.h"
#include "UART_CONFIG.h"
#include "UART_INT.h"
void UART_init()
{
    345a:	cf 93       	push	r28
    345c:	df 93       	push	r29
    345e:	1f 92       	push	r1
    3460:	cd b7       	in	r28, 0x3d	; 61
    3462:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,RXEN);
    3464:	8a e2       	ldi	r24, 0x2A	; 42
    3466:	90 e0       	ldi	r25, 0x00	; 0
    3468:	2a e2       	ldi	r18, 0x2A	; 42
    346a:	30 e0       	ldi	r19, 0x00	; 0
    346c:	f9 01       	movw	r30, r18
    346e:	20 81       	ld	r18, Z
    3470:	20 61       	ori	r18, 0x10	; 16
    3472:	fc 01       	movw	r30, r24
    3474:	20 83       	st	Z, r18
	SET_BIT(UCSRB,TXEN);
    3476:	8a e2       	ldi	r24, 0x2A	; 42
    3478:	90 e0       	ldi	r25, 0x00	; 0
    347a:	2a e2       	ldi	r18, 0x2A	; 42
    347c:	30 e0       	ldi	r19, 0x00	; 0
    347e:	f9 01       	movw	r30, r18
    3480:	20 81       	ld	r18, Z
    3482:	28 60       	ori	r18, 0x08	; 8
    3484:	fc 01       	movw	r30, r24
    3486:	20 83       	st	Z, r18
	
	u8 x=0b10000000;
    3488:	80 e8       	ldi	r24, 0x80	; 128
    348a:	89 83       	std	Y+1, r24	; 0x01
	#if(UART_NUM_BIT_MODE==UART_8BIT_MODE)
	SET_BIT(UCSRB,UCSZ2);
    348c:	8a e2       	ldi	r24, 0x2A	; 42
    348e:	90 e0       	ldi	r25, 0x00	; 0
    3490:	2a e2       	ldi	r18, 0x2A	; 42
    3492:	30 e0       	ldi	r19, 0x00	; 0
    3494:	f9 01       	movw	r30, r18
    3496:	20 81       	ld	r18, Z
    3498:	24 60       	ori	r18, 0x04	; 4
    349a:	fc 01       	movw	r30, r24
    349c:	20 83       	st	Z, r18
	SET_BIT(x,UCSZ1);
    349e:	89 81       	ldd	r24, Y+1	; 0x01
    34a0:	84 60       	ori	r24, 0x04	; 4
    34a2:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(x,UCSZ2);
    34a4:	89 81       	ldd	r24, Y+1	; 0x01
    34a6:	84 60       	ori	r24, 0x04	; 4
    34a8:	89 83       	std	Y+1, r24	; 0x01

	#elif(UART_NUM_BIT_MODE==UART_7BIT_MODE)

	#endif
	#if(UART_NUM_STOP_BIT==UART_STOP_1BIT)
	CLEAR_BIT(x,USBS);
    34aa:	89 81       	ldd	r24, Y+1	; 0x01
    34ac:	87 7f       	andi	r24, 0xF7	; 247
    34ae:	89 83       	std	Y+1, r24	; 0x01
	#elif(UART_NUM_STOP_BIT==UART_STOP_2BIT)
	SET_BIT(x,USBS);

	#endif
	#if(UART_PARITY_MODE==UART_PARITY_DISABLED)
	CLEAR_BIT(x,UPM0);
    34b0:	89 81       	ldd	r24, Y+1	; 0x01
    34b2:	8f 7e       	andi	r24, 0xEF	; 239
    34b4:	89 83       	std	Y+1, r24	; 0x01
	CLEAR_BIT(x,UPM1);
    34b6:	89 81       	ldd	r24, Y+1	; 0x01
    34b8:	8f 7d       	andi	r24, 0xDF	; 223
    34ba:	89 83       	std	Y+1, r24	; 0x01

	#elif(UART_PARITY_MODE==UART_PARITY_EVEN)
	CLEAR_BIT(x,UPM0);
	SET_BIT(x,UPM1);
	#endif
	UCSRC_UBRRH=x;
    34bc:	80 e4       	ldi	r24, 0x40	; 64
    34be:	90 e0       	ldi	r25, 0x00	; 0
    34c0:	29 81       	ldd	r18, Y+1	; 0x01
    34c2:	fc 01       	movw	r30, r24
    34c4:	20 83       	st	Z, r18
	UBRRL=UART_BAUD_9600;
    34c6:	89 e2       	ldi	r24, 0x29	; 41
    34c8:	90 e0       	ldi	r25, 0x00	; 0
    34ca:	27 e6       	ldi	r18, 0x67	; 103
    34cc:	fc 01       	movw	r30, r24
    34ce:	20 83       	st	Z, r18

}
    34d0:	00 00       	nop
    34d2:	0f 90       	pop	r0
    34d4:	df 91       	pop	r29
    34d6:	cf 91       	pop	r28
    34d8:	08 95       	ret

000034da <UART_sendData>:
void UART_sendData(u8 data)
{
    34da:	cf 93       	push	r28
    34dc:	df 93       	push	r29
    34de:	1f 92       	push	r1
    34e0:	cd b7       	in	r28, 0x3d	; 61
    34e2:	de b7       	in	r29, 0x3e	; 62
    34e4:	89 83       	std	Y+1, r24	; 0x01
	// data register e,pty
	while(GET_BIT(UCSRA,UDRE)==0);
    34e6:	00 00       	nop
    34e8:	8b e2       	ldi	r24, 0x2B	; 43
    34ea:	90 e0       	ldi	r25, 0x00	; 0
    34ec:	fc 01       	movw	r30, r24
    34ee:	80 81       	ld	r24, Z
    34f0:	82 95       	swap	r24
    34f2:	86 95       	lsr	r24
    34f4:	87 70       	andi	r24, 0x07	; 7
    34f6:	88 2f       	mov	r24, r24
    34f8:	90 e0       	ldi	r25, 0x00	; 0
    34fa:	81 70       	andi	r24, 0x01	; 1
    34fc:	99 27       	eor	r25, r25
    34fe:	89 2b       	or	r24, r25
    3500:	99 f3       	breq	.-26     	; 0x34e8 <UART_sendData+0xe>
	//send
	UDR= data;
    3502:	8c e2       	ldi	r24, 0x2C	; 44
    3504:	90 e0       	ldi	r25, 0x00	; 0
    3506:	29 81       	ldd	r18, Y+1	; 0x01
    3508:	fc 01       	movw	r30, r24
    350a:	20 83       	st	Z, r18
}
    350c:	00 00       	nop
    350e:	0f 90       	pop	r0
    3510:	df 91       	pop	r29
    3512:	cf 91       	pop	r28
    3514:	08 95       	ret

00003516 <UART_sendString>:
void UART_sendString(u8* str)
{
    3516:	cf 93       	push	r28
    3518:	df 93       	push	r29
    351a:	00 d0       	rcall	.+0      	; 0x351c <UART_sendString+0x6>
    351c:	1f 92       	push	r1
    351e:	cd b7       	in	r28, 0x3d	; 61
    3520:	de b7       	in	r29, 0x3e	; 62
    3522:	9b 83       	std	Y+3, r25	; 0x03
    3524:	8a 83       	std	Y+2, r24	; 0x02
		u8 i=0;
    3526:	19 82       	std	Y+1, r1	; 0x01
		while(str[i] != '\0')
    3528:	0e c0       	rjmp	.+28     	; 0x3546 <UART_sendString+0x30>
		{
			UART_sendData(str[i]);
    352a:	89 81       	ldd	r24, Y+1	; 0x01
    352c:	88 2f       	mov	r24, r24
    352e:	90 e0       	ldi	r25, 0x00	; 0
    3530:	2a 81       	ldd	r18, Y+2	; 0x02
    3532:	3b 81       	ldd	r19, Y+3	; 0x03
    3534:	82 0f       	add	r24, r18
    3536:	93 1f       	adc	r25, r19
    3538:	fc 01       	movw	r30, r24
    353a:	80 81       	ld	r24, Z
    353c:	0e 94 6d 1a 	call	0x34da	; 0x34da <UART_sendData>
			i++;
    3540:	89 81       	ldd	r24, Y+1	; 0x01
    3542:	8f 5f       	subi	r24, 0xFF	; 255
    3544:	89 83       	std	Y+1, r24	; 0x01
	UDR= data;
}
void UART_sendString(u8* str)
{
		u8 i=0;
		while(str[i] != '\0')
    3546:	89 81       	ldd	r24, Y+1	; 0x01
    3548:	88 2f       	mov	r24, r24
    354a:	90 e0       	ldi	r25, 0x00	; 0
    354c:	2a 81       	ldd	r18, Y+2	; 0x02
    354e:	3b 81       	ldd	r19, Y+3	; 0x03
    3550:	82 0f       	add	r24, r18
    3552:	93 1f       	adc	r25, r19
    3554:	fc 01       	movw	r30, r24
    3556:	80 81       	ld	r24, Z
    3558:	88 23       	and	r24, r24
    355a:	39 f7       	brne	.-50     	; 0x352a <UART_sendString+0x14>
		{
			UART_sendData(str[i]);
			i++;
		}
}
    355c:	00 00       	nop
    355e:	0f 90       	pop	r0
    3560:	0f 90       	pop	r0
    3562:	0f 90       	pop	r0
    3564:	df 91       	pop	r29
    3566:	cf 91       	pop	r28
    3568:	08 95       	ret

0000356a <UART_receiveData>:

u8 UART_receiveData()
{
    356a:	cf 93       	push	r28
    356c:	df 93       	push	r29
    356e:	00 d0       	rcall	.+0      	; 0x3570 <UART_receiveData+0x6>
    3570:	cd b7       	in	r28, 0x3d	; 61
    3572:	de b7       	in	r29, 0x3e	; 62
	//CHECK RECEIVE COMPLETE
	u32 timeout=0;
    3574:	1a 82       	std	Y+2, r1	; 0x02
    3576:	19 82       	std	Y+1, r1	; 0x01

	while(GET_BIT(UCSRA,RXC)==0)
    3578:	05 c0       	rjmp	.+10     	; 0x3584 <UART_receiveData+0x1a>
	{
		timeout++;
    357a:	89 81       	ldd	r24, Y+1	; 0x01
    357c:	9a 81       	ldd	r25, Y+2	; 0x02
    357e:	01 96       	adiw	r24, 0x01	; 1
    3580:	9a 83       	std	Y+2, r25	; 0x02
    3582:	89 83       	std	Y+1, r24	; 0x01
u8 UART_receiveData()
{
	//CHECK RECEIVE COMPLETE
	u32 timeout=0;

	while(GET_BIT(UCSRA,RXC)==0)
    3584:	8b e2       	ldi	r24, 0x2B	; 43
    3586:	90 e0       	ldi	r25, 0x00	; 0
    3588:	fc 01       	movw	r30, r24
    358a:	80 81       	ld	r24, Z
    358c:	88 1f       	adc	r24, r24
    358e:	88 27       	eor	r24, r24
    3590:	88 1f       	adc	r24, r24
    3592:	88 2f       	mov	r24, r24
    3594:	90 e0       	ldi	r25, 0x00	; 0
    3596:	81 70       	andi	r24, 0x01	; 1
    3598:	99 27       	eor	r25, r25
    359a:	89 2b       	or	r24, r25
    359c:	71 f3       	breq	.-36     	; 0x357a <UART_receiveData+0x10>
		{
			return UART_NOT_RECEIVED;
		}
	}
	//READ DATA
	return UDR;
    359e:	8c e2       	ldi	r24, 0x2C	; 44
    35a0:	90 e0       	ldi	r25, 0x00	; 0
    35a2:	fc 01       	movw	r30, r24
    35a4:	80 81       	ld	r24, Z
    35a6:	0f 90       	pop	r0
    35a8:	0f 90       	pop	r0
    35aa:	df 91       	pop	r29
    35ac:	cf 91       	pop	r28
    35ae:	08 95       	ret

000035b0 <__subsf3>:
    35b0:	50 58       	subi	r21, 0x80	; 128

000035b2 <__addsf3>:
    35b2:	bb 27       	eor	r27, r27
    35b4:	aa 27       	eor	r26, r26
    35b6:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <__addsf3x>
    35ba:	0c 94 63 1c 	jmp	0x38c6	; 0x38c6 <__fp_round>
    35be:	0e 94 55 1c 	call	0x38aa	; 0x38aa <__fp_pscA>
    35c2:	38 f0       	brcs	.+14     	; 0x35d2 <__addsf3+0x20>
    35c4:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <__fp_pscB>
    35c8:	20 f0       	brcs	.+8      	; 0x35d2 <__addsf3+0x20>
    35ca:	39 f4       	brne	.+14     	; 0x35da <__addsf3+0x28>
    35cc:	9f 3f       	cpi	r25, 0xFF	; 255
    35ce:	19 f4       	brne	.+6      	; 0x35d6 <__addsf3+0x24>
    35d0:	26 f4       	brtc	.+8      	; 0x35da <__addsf3+0x28>
    35d2:	0c 94 52 1c 	jmp	0x38a4	; 0x38a4 <__fp_nan>
    35d6:	0e f4       	brtc	.+2      	; 0x35da <__addsf3+0x28>
    35d8:	e0 95       	com	r30
    35da:	e7 fb       	bst	r30, 7
    35dc:	0c 94 4c 1c 	jmp	0x3898	; 0x3898 <__fp_inf>

000035e0 <__addsf3x>:
    35e0:	e9 2f       	mov	r30, r25
    35e2:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <__fp_split3>
    35e6:	58 f3       	brcs	.-42     	; 0x35be <__addsf3+0xc>
    35e8:	ba 17       	cp	r27, r26
    35ea:	62 07       	cpc	r22, r18
    35ec:	73 07       	cpc	r23, r19
    35ee:	84 07       	cpc	r24, r20
    35f0:	95 07       	cpc	r25, r21
    35f2:	20 f0       	brcs	.+8      	; 0x35fc <__addsf3x+0x1c>
    35f4:	79 f4       	brne	.+30     	; 0x3614 <__addsf3x+0x34>
    35f6:	a6 f5       	brtc	.+104    	; 0x3660 <__addsf3x+0x80>
    35f8:	0c 94 96 1c 	jmp	0x392c	; 0x392c <__fp_zero>
    35fc:	0e f4       	brtc	.+2      	; 0x3600 <__addsf3x+0x20>
    35fe:	e0 95       	com	r30
    3600:	0b 2e       	mov	r0, r27
    3602:	ba 2f       	mov	r27, r26
    3604:	a0 2d       	mov	r26, r0
    3606:	0b 01       	movw	r0, r22
    3608:	b9 01       	movw	r22, r18
    360a:	90 01       	movw	r18, r0
    360c:	0c 01       	movw	r0, r24
    360e:	ca 01       	movw	r24, r20
    3610:	a0 01       	movw	r20, r0
    3612:	11 24       	eor	r1, r1
    3614:	ff 27       	eor	r31, r31
    3616:	59 1b       	sub	r21, r25
    3618:	99 f0       	breq	.+38     	; 0x3640 <__addsf3x+0x60>
    361a:	59 3f       	cpi	r21, 0xF9	; 249
    361c:	50 f4       	brcc	.+20     	; 0x3632 <__addsf3x+0x52>
    361e:	50 3e       	cpi	r21, 0xE0	; 224
    3620:	68 f1       	brcs	.+90     	; 0x367c <__addsf3x+0x9c>
    3622:	1a 16       	cp	r1, r26
    3624:	f0 40       	sbci	r31, 0x00	; 0
    3626:	a2 2f       	mov	r26, r18
    3628:	23 2f       	mov	r18, r19
    362a:	34 2f       	mov	r19, r20
    362c:	44 27       	eor	r20, r20
    362e:	58 5f       	subi	r21, 0xF8	; 248
    3630:	f3 cf       	rjmp	.-26     	; 0x3618 <__addsf3x+0x38>
    3632:	46 95       	lsr	r20
    3634:	37 95       	ror	r19
    3636:	27 95       	ror	r18
    3638:	a7 95       	ror	r26
    363a:	f0 40       	sbci	r31, 0x00	; 0
    363c:	53 95       	inc	r21
    363e:	c9 f7       	brne	.-14     	; 0x3632 <__addsf3x+0x52>
    3640:	7e f4       	brtc	.+30     	; 0x3660 <__addsf3x+0x80>
    3642:	1f 16       	cp	r1, r31
    3644:	ba 0b       	sbc	r27, r26
    3646:	62 0b       	sbc	r22, r18
    3648:	73 0b       	sbc	r23, r19
    364a:	84 0b       	sbc	r24, r20
    364c:	ba f0       	brmi	.+46     	; 0x367c <__addsf3x+0x9c>
    364e:	91 50       	subi	r25, 0x01	; 1
    3650:	a1 f0       	breq	.+40     	; 0x367a <__addsf3x+0x9a>
    3652:	ff 0f       	add	r31, r31
    3654:	bb 1f       	adc	r27, r27
    3656:	66 1f       	adc	r22, r22
    3658:	77 1f       	adc	r23, r23
    365a:	88 1f       	adc	r24, r24
    365c:	c2 f7       	brpl	.-16     	; 0x364e <__addsf3x+0x6e>
    365e:	0e c0       	rjmp	.+28     	; 0x367c <__addsf3x+0x9c>
    3660:	ba 0f       	add	r27, r26
    3662:	62 1f       	adc	r22, r18
    3664:	73 1f       	adc	r23, r19
    3666:	84 1f       	adc	r24, r20
    3668:	48 f4       	brcc	.+18     	; 0x367c <__addsf3x+0x9c>
    366a:	87 95       	ror	r24
    366c:	77 95       	ror	r23
    366e:	67 95       	ror	r22
    3670:	b7 95       	ror	r27
    3672:	f7 95       	ror	r31
    3674:	9e 3f       	cpi	r25, 0xFE	; 254
    3676:	08 f0       	brcs	.+2      	; 0x367a <__addsf3x+0x9a>
    3678:	b0 cf       	rjmp	.-160    	; 0x35da <__addsf3+0x28>
    367a:	93 95       	inc	r25
    367c:	88 0f       	add	r24, r24
    367e:	08 f0       	brcs	.+2      	; 0x3682 <__addsf3x+0xa2>
    3680:	99 27       	eor	r25, r25
    3682:	ee 0f       	add	r30, r30
    3684:	97 95       	ror	r25
    3686:	87 95       	ror	r24
    3688:	08 95       	ret

0000368a <__cmpsf2>:
    368a:	0e 94 28 1c 	call	0x3850	; 0x3850 <__fp_cmp>
    368e:	08 f4       	brcc	.+2      	; 0x3692 <__cmpsf2+0x8>
    3690:	81 e0       	ldi	r24, 0x01	; 1
    3692:	08 95       	ret

00003694 <__divsf3>:
    3694:	0e 94 5e 1b 	call	0x36bc	; 0x36bc <__divsf3x>
    3698:	0c 94 63 1c 	jmp	0x38c6	; 0x38c6 <__fp_round>
    369c:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <__fp_pscB>
    36a0:	58 f0       	brcs	.+22     	; 0x36b8 <__divsf3+0x24>
    36a2:	0e 94 55 1c 	call	0x38aa	; 0x38aa <__fp_pscA>
    36a6:	40 f0       	brcs	.+16     	; 0x36b8 <__divsf3+0x24>
    36a8:	29 f4       	brne	.+10     	; 0x36b4 <__divsf3+0x20>
    36aa:	5f 3f       	cpi	r21, 0xFF	; 255
    36ac:	29 f0       	breq	.+10     	; 0x36b8 <__divsf3+0x24>
    36ae:	0c 94 4c 1c 	jmp	0x3898	; 0x3898 <__fp_inf>
    36b2:	51 11       	cpse	r21, r1
    36b4:	0c 94 97 1c 	jmp	0x392e	; 0x392e <__fp_szero>
    36b8:	0c 94 52 1c 	jmp	0x38a4	; 0x38a4 <__fp_nan>

000036bc <__divsf3x>:
    36bc:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <__fp_split3>
    36c0:	68 f3       	brcs	.-38     	; 0x369c <__divsf3+0x8>

000036c2 <__divsf3_pse>:
    36c2:	99 23       	and	r25, r25
    36c4:	b1 f3       	breq	.-20     	; 0x36b2 <__divsf3+0x1e>
    36c6:	55 23       	and	r21, r21
    36c8:	91 f3       	breq	.-28     	; 0x36ae <__divsf3+0x1a>
    36ca:	95 1b       	sub	r25, r21
    36cc:	55 0b       	sbc	r21, r21
    36ce:	bb 27       	eor	r27, r27
    36d0:	aa 27       	eor	r26, r26
    36d2:	62 17       	cp	r22, r18
    36d4:	73 07       	cpc	r23, r19
    36d6:	84 07       	cpc	r24, r20
    36d8:	38 f0       	brcs	.+14     	; 0x36e8 <__divsf3_pse+0x26>
    36da:	9f 5f       	subi	r25, 0xFF	; 255
    36dc:	5f 4f       	sbci	r21, 0xFF	; 255
    36de:	22 0f       	add	r18, r18
    36e0:	33 1f       	adc	r19, r19
    36e2:	44 1f       	adc	r20, r20
    36e4:	aa 1f       	adc	r26, r26
    36e6:	a9 f3       	breq	.-22     	; 0x36d2 <__divsf3_pse+0x10>
    36e8:	35 d0       	rcall	.+106    	; 0x3754 <__divsf3_pse+0x92>
    36ea:	0e 2e       	mov	r0, r30
    36ec:	3a f0       	brmi	.+14     	; 0x36fc <__divsf3_pse+0x3a>
    36ee:	e0 e8       	ldi	r30, 0x80	; 128
    36f0:	32 d0       	rcall	.+100    	; 0x3756 <__divsf3_pse+0x94>
    36f2:	91 50       	subi	r25, 0x01	; 1
    36f4:	50 40       	sbci	r21, 0x00	; 0
    36f6:	e6 95       	lsr	r30
    36f8:	00 1c       	adc	r0, r0
    36fa:	ca f7       	brpl	.-14     	; 0x36ee <__divsf3_pse+0x2c>
    36fc:	2b d0       	rcall	.+86     	; 0x3754 <__divsf3_pse+0x92>
    36fe:	fe 2f       	mov	r31, r30
    3700:	29 d0       	rcall	.+82     	; 0x3754 <__divsf3_pse+0x92>
    3702:	66 0f       	add	r22, r22
    3704:	77 1f       	adc	r23, r23
    3706:	88 1f       	adc	r24, r24
    3708:	bb 1f       	adc	r27, r27
    370a:	26 17       	cp	r18, r22
    370c:	37 07       	cpc	r19, r23
    370e:	48 07       	cpc	r20, r24
    3710:	ab 07       	cpc	r26, r27
    3712:	b0 e8       	ldi	r27, 0x80	; 128
    3714:	09 f0       	breq	.+2      	; 0x3718 <__divsf3_pse+0x56>
    3716:	bb 0b       	sbc	r27, r27
    3718:	80 2d       	mov	r24, r0
    371a:	bf 01       	movw	r22, r30
    371c:	ff 27       	eor	r31, r31
    371e:	93 58       	subi	r25, 0x83	; 131
    3720:	5f 4f       	sbci	r21, 0xFF	; 255
    3722:	3a f0       	brmi	.+14     	; 0x3732 <__divsf3_pse+0x70>
    3724:	9e 3f       	cpi	r25, 0xFE	; 254
    3726:	51 05       	cpc	r21, r1
    3728:	78 f0       	brcs	.+30     	; 0x3748 <__divsf3_pse+0x86>
    372a:	0c 94 4c 1c 	jmp	0x3898	; 0x3898 <__fp_inf>
    372e:	0c 94 97 1c 	jmp	0x392e	; 0x392e <__fp_szero>
    3732:	5f 3f       	cpi	r21, 0xFF	; 255
    3734:	e4 f3       	brlt	.-8      	; 0x372e <__divsf3_pse+0x6c>
    3736:	98 3e       	cpi	r25, 0xE8	; 232
    3738:	d4 f3       	brlt	.-12     	; 0x372e <__divsf3_pse+0x6c>
    373a:	86 95       	lsr	r24
    373c:	77 95       	ror	r23
    373e:	67 95       	ror	r22
    3740:	b7 95       	ror	r27
    3742:	f7 95       	ror	r31
    3744:	9f 5f       	subi	r25, 0xFF	; 255
    3746:	c9 f7       	brne	.-14     	; 0x373a <__divsf3_pse+0x78>
    3748:	88 0f       	add	r24, r24
    374a:	91 1d       	adc	r25, r1
    374c:	96 95       	lsr	r25
    374e:	87 95       	ror	r24
    3750:	97 f9       	bld	r25, 7
    3752:	08 95       	ret
    3754:	e1 e0       	ldi	r30, 0x01	; 1
    3756:	66 0f       	add	r22, r22
    3758:	77 1f       	adc	r23, r23
    375a:	88 1f       	adc	r24, r24
    375c:	bb 1f       	adc	r27, r27
    375e:	62 17       	cp	r22, r18
    3760:	73 07       	cpc	r23, r19
    3762:	84 07       	cpc	r24, r20
    3764:	ba 07       	cpc	r27, r26
    3766:	20 f0       	brcs	.+8      	; 0x3770 <__divsf3_pse+0xae>
    3768:	62 1b       	sub	r22, r18
    376a:	73 0b       	sbc	r23, r19
    376c:	84 0b       	sbc	r24, r20
    376e:	ba 0b       	sbc	r27, r26
    3770:	ee 1f       	adc	r30, r30
    3772:	88 f7       	brcc	.-30     	; 0x3756 <__divsf3_pse+0x94>
    3774:	e0 95       	com	r30
    3776:	08 95       	ret

00003778 <__fixunssfsi>:
    3778:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <__fp_splitA>
    377c:	88 f0       	brcs	.+34     	; 0x37a0 <__fixunssfsi+0x28>
    377e:	9f 57       	subi	r25, 0x7F	; 127
    3780:	98 f0       	brcs	.+38     	; 0x37a8 <__fixunssfsi+0x30>
    3782:	b9 2f       	mov	r27, r25
    3784:	99 27       	eor	r25, r25
    3786:	b7 51       	subi	r27, 0x17	; 23
    3788:	b0 f0       	brcs	.+44     	; 0x37b6 <__fixunssfsi+0x3e>
    378a:	e1 f0       	breq	.+56     	; 0x37c4 <__fixunssfsi+0x4c>
    378c:	66 0f       	add	r22, r22
    378e:	77 1f       	adc	r23, r23
    3790:	88 1f       	adc	r24, r24
    3792:	99 1f       	adc	r25, r25
    3794:	1a f0       	brmi	.+6      	; 0x379c <__fixunssfsi+0x24>
    3796:	ba 95       	dec	r27
    3798:	c9 f7       	brne	.-14     	; 0x378c <__fixunssfsi+0x14>
    379a:	14 c0       	rjmp	.+40     	; 0x37c4 <__fixunssfsi+0x4c>
    379c:	b1 30       	cpi	r27, 0x01	; 1
    379e:	91 f0       	breq	.+36     	; 0x37c4 <__fixunssfsi+0x4c>
    37a0:	0e 94 96 1c 	call	0x392c	; 0x392c <__fp_zero>
    37a4:	b1 e0       	ldi	r27, 0x01	; 1
    37a6:	08 95       	ret
    37a8:	0c 94 96 1c 	jmp	0x392c	; 0x392c <__fp_zero>
    37ac:	67 2f       	mov	r22, r23
    37ae:	78 2f       	mov	r23, r24
    37b0:	88 27       	eor	r24, r24
    37b2:	b8 5f       	subi	r27, 0xF8	; 248
    37b4:	39 f0       	breq	.+14     	; 0x37c4 <__fixunssfsi+0x4c>
    37b6:	b9 3f       	cpi	r27, 0xF9	; 249
    37b8:	cc f3       	brlt	.-14     	; 0x37ac <__fixunssfsi+0x34>
    37ba:	86 95       	lsr	r24
    37bc:	77 95       	ror	r23
    37be:	67 95       	ror	r22
    37c0:	b3 95       	inc	r27
    37c2:	d9 f7       	brne	.-10     	; 0x37ba <__fixunssfsi+0x42>
    37c4:	3e f4       	brtc	.+14     	; 0x37d4 <__fixunssfsi+0x5c>
    37c6:	90 95       	com	r25
    37c8:	80 95       	com	r24
    37ca:	70 95       	com	r23
    37cc:	61 95       	neg	r22
    37ce:	7f 4f       	sbci	r23, 0xFF	; 255
    37d0:	8f 4f       	sbci	r24, 0xFF	; 255
    37d2:	9f 4f       	sbci	r25, 0xFF	; 255
    37d4:	08 95       	ret

000037d6 <__floatunsisf>:
    37d6:	e8 94       	clt
    37d8:	09 c0       	rjmp	.+18     	; 0x37ec <__floatsisf+0x12>

000037da <__floatsisf>:
    37da:	97 fb       	bst	r25, 7
    37dc:	3e f4       	brtc	.+14     	; 0x37ec <__floatsisf+0x12>
    37de:	90 95       	com	r25
    37e0:	80 95       	com	r24
    37e2:	70 95       	com	r23
    37e4:	61 95       	neg	r22
    37e6:	7f 4f       	sbci	r23, 0xFF	; 255
    37e8:	8f 4f       	sbci	r24, 0xFF	; 255
    37ea:	9f 4f       	sbci	r25, 0xFF	; 255
    37ec:	99 23       	and	r25, r25
    37ee:	a9 f0       	breq	.+42     	; 0x381a <__floatsisf+0x40>
    37f0:	f9 2f       	mov	r31, r25
    37f2:	96 e9       	ldi	r25, 0x96	; 150
    37f4:	bb 27       	eor	r27, r27
    37f6:	93 95       	inc	r25
    37f8:	f6 95       	lsr	r31
    37fa:	87 95       	ror	r24
    37fc:	77 95       	ror	r23
    37fe:	67 95       	ror	r22
    3800:	b7 95       	ror	r27
    3802:	f1 11       	cpse	r31, r1
    3804:	f8 cf       	rjmp	.-16     	; 0x37f6 <__floatsisf+0x1c>
    3806:	fa f4       	brpl	.+62     	; 0x3846 <__floatsisf+0x6c>
    3808:	bb 0f       	add	r27, r27
    380a:	11 f4       	brne	.+4      	; 0x3810 <__floatsisf+0x36>
    380c:	60 ff       	sbrs	r22, 0
    380e:	1b c0       	rjmp	.+54     	; 0x3846 <__floatsisf+0x6c>
    3810:	6f 5f       	subi	r22, 0xFF	; 255
    3812:	7f 4f       	sbci	r23, 0xFF	; 255
    3814:	8f 4f       	sbci	r24, 0xFF	; 255
    3816:	9f 4f       	sbci	r25, 0xFF	; 255
    3818:	16 c0       	rjmp	.+44     	; 0x3846 <__floatsisf+0x6c>
    381a:	88 23       	and	r24, r24
    381c:	11 f0       	breq	.+4      	; 0x3822 <__floatsisf+0x48>
    381e:	96 e9       	ldi	r25, 0x96	; 150
    3820:	11 c0       	rjmp	.+34     	; 0x3844 <__floatsisf+0x6a>
    3822:	77 23       	and	r23, r23
    3824:	21 f0       	breq	.+8      	; 0x382e <__floatsisf+0x54>
    3826:	9e e8       	ldi	r25, 0x8E	; 142
    3828:	87 2f       	mov	r24, r23
    382a:	76 2f       	mov	r23, r22
    382c:	05 c0       	rjmp	.+10     	; 0x3838 <__floatsisf+0x5e>
    382e:	66 23       	and	r22, r22
    3830:	71 f0       	breq	.+28     	; 0x384e <__floatsisf+0x74>
    3832:	96 e8       	ldi	r25, 0x86	; 134
    3834:	86 2f       	mov	r24, r22
    3836:	70 e0       	ldi	r23, 0x00	; 0
    3838:	60 e0       	ldi	r22, 0x00	; 0
    383a:	2a f0       	brmi	.+10     	; 0x3846 <__floatsisf+0x6c>
    383c:	9a 95       	dec	r25
    383e:	66 0f       	add	r22, r22
    3840:	77 1f       	adc	r23, r23
    3842:	88 1f       	adc	r24, r24
    3844:	da f7       	brpl	.-10     	; 0x383c <__floatsisf+0x62>
    3846:	88 0f       	add	r24, r24
    3848:	96 95       	lsr	r25
    384a:	87 95       	ror	r24
    384c:	97 f9       	bld	r25, 7
    384e:	08 95       	ret

00003850 <__fp_cmp>:
    3850:	99 0f       	add	r25, r25
    3852:	00 08       	sbc	r0, r0
    3854:	55 0f       	add	r21, r21
    3856:	aa 0b       	sbc	r26, r26
    3858:	e0 e8       	ldi	r30, 0x80	; 128
    385a:	fe ef       	ldi	r31, 0xFE	; 254
    385c:	16 16       	cp	r1, r22
    385e:	17 06       	cpc	r1, r23
    3860:	e8 07       	cpc	r30, r24
    3862:	f9 07       	cpc	r31, r25
    3864:	c0 f0       	brcs	.+48     	; 0x3896 <__fp_cmp+0x46>
    3866:	12 16       	cp	r1, r18
    3868:	13 06       	cpc	r1, r19
    386a:	e4 07       	cpc	r30, r20
    386c:	f5 07       	cpc	r31, r21
    386e:	98 f0       	brcs	.+38     	; 0x3896 <__fp_cmp+0x46>
    3870:	62 1b       	sub	r22, r18
    3872:	73 0b       	sbc	r23, r19
    3874:	84 0b       	sbc	r24, r20
    3876:	95 0b       	sbc	r25, r21
    3878:	39 f4       	brne	.+14     	; 0x3888 <__fp_cmp+0x38>
    387a:	0a 26       	eor	r0, r26
    387c:	61 f0       	breq	.+24     	; 0x3896 <__fp_cmp+0x46>
    387e:	23 2b       	or	r18, r19
    3880:	24 2b       	or	r18, r20
    3882:	25 2b       	or	r18, r21
    3884:	21 f4       	brne	.+8      	; 0x388e <__fp_cmp+0x3e>
    3886:	08 95       	ret
    3888:	0a 26       	eor	r0, r26
    388a:	09 f4       	brne	.+2      	; 0x388e <__fp_cmp+0x3e>
    388c:	a1 40       	sbci	r26, 0x01	; 1
    388e:	a6 95       	lsr	r26
    3890:	8f ef       	ldi	r24, 0xFF	; 255
    3892:	81 1d       	adc	r24, r1
    3894:	81 1d       	adc	r24, r1
    3896:	08 95       	ret

00003898 <__fp_inf>:
    3898:	97 f9       	bld	r25, 7
    389a:	9f 67       	ori	r25, 0x7F	; 127
    389c:	80 e8       	ldi	r24, 0x80	; 128
    389e:	70 e0       	ldi	r23, 0x00	; 0
    38a0:	60 e0       	ldi	r22, 0x00	; 0
    38a2:	08 95       	ret

000038a4 <__fp_nan>:
    38a4:	9f ef       	ldi	r25, 0xFF	; 255
    38a6:	80 ec       	ldi	r24, 0xC0	; 192
    38a8:	08 95       	ret

000038aa <__fp_pscA>:
    38aa:	00 24       	eor	r0, r0
    38ac:	0a 94       	dec	r0
    38ae:	16 16       	cp	r1, r22
    38b0:	17 06       	cpc	r1, r23
    38b2:	18 06       	cpc	r1, r24
    38b4:	09 06       	cpc	r0, r25
    38b6:	08 95       	ret

000038b8 <__fp_pscB>:
    38b8:	00 24       	eor	r0, r0
    38ba:	0a 94       	dec	r0
    38bc:	12 16       	cp	r1, r18
    38be:	13 06       	cpc	r1, r19
    38c0:	14 06       	cpc	r1, r20
    38c2:	05 06       	cpc	r0, r21
    38c4:	08 95       	ret

000038c6 <__fp_round>:
    38c6:	09 2e       	mov	r0, r25
    38c8:	03 94       	inc	r0
    38ca:	00 0c       	add	r0, r0
    38cc:	11 f4       	brne	.+4      	; 0x38d2 <__fp_round+0xc>
    38ce:	88 23       	and	r24, r24
    38d0:	52 f0       	brmi	.+20     	; 0x38e6 <__fp_round+0x20>
    38d2:	bb 0f       	add	r27, r27
    38d4:	40 f4       	brcc	.+16     	; 0x38e6 <__fp_round+0x20>
    38d6:	bf 2b       	or	r27, r31
    38d8:	11 f4       	brne	.+4      	; 0x38de <__fp_round+0x18>
    38da:	60 ff       	sbrs	r22, 0
    38dc:	04 c0       	rjmp	.+8      	; 0x38e6 <__fp_round+0x20>
    38de:	6f 5f       	subi	r22, 0xFF	; 255
    38e0:	7f 4f       	sbci	r23, 0xFF	; 255
    38e2:	8f 4f       	sbci	r24, 0xFF	; 255
    38e4:	9f 4f       	sbci	r25, 0xFF	; 255
    38e6:	08 95       	ret

000038e8 <__fp_split3>:
    38e8:	57 fd       	sbrc	r21, 7
    38ea:	90 58       	subi	r25, 0x80	; 128
    38ec:	44 0f       	add	r20, r20
    38ee:	55 1f       	adc	r21, r21
    38f0:	59 f0       	breq	.+22     	; 0x3908 <__fp_splitA+0x10>
    38f2:	5f 3f       	cpi	r21, 0xFF	; 255
    38f4:	71 f0       	breq	.+28     	; 0x3912 <__fp_splitA+0x1a>
    38f6:	47 95       	ror	r20

000038f8 <__fp_splitA>:
    38f8:	88 0f       	add	r24, r24
    38fa:	97 fb       	bst	r25, 7
    38fc:	99 1f       	adc	r25, r25
    38fe:	61 f0       	breq	.+24     	; 0x3918 <__fp_splitA+0x20>
    3900:	9f 3f       	cpi	r25, 0xFF	; 255
    3902:	79 f0       	breq	.+30     	; 0x3922 <__fp_splitA+0x2a>
    3904:	87 95       	ror	r24
    3906:	08 95       	ret
    3908:	12 16       	cp	r1, r18
    390a:	13 06       	cpc	r1, r19
    390c:	14 06       	cpc	r1, r20
    390e:	55 1f       	adc	r21, r21
    3910:	f2 cf       	rjmp	.-28     	; 0x38f6 <__fp_split3+0xe>
    3912:	46 95       	lsr	r20
    3914:	f1 df       	rcall	.-30     	; 0x38f8 <__fp_splitA>
    3916:	08 c0       	rjmp	.+16     	; 0x3928 <__fp_splitA+0x30>
    3918:	16 16       	cp	r1, r22
    391a:	17 06       	cpc	r1, r23
    391c:	18 06       	cpc	r1, r24
    391e:	99 1f       	adc	r25, r25
    3920:	f1 cf       	rjmp	.-30     	; 0x3904 <__fp_splitA+0xc>
    3922:	86 95       	lsr	r24
    3924:	71 05       	cpc	r23, r1
    3926:	61 05       	cpc	r22, r1
    3928:	08 94       	sec
    392a:	08 95       	ret

0000392c <__fp_zero>:
    392c:	e8 94       	clt

0000392e <__fp_szero>:
    392e:	bb 27       	eor	r27, r27
    3930:	66 27       	eor	r22, r22
    3932:	77 27       	eor	r23, r23
    3934:	cb 01       	movw	r24, r22
    3936:	97 f9       	bld	r25, 7
    3938:	08 95       	ret

0000393a <__gesf2>:
    393a:	0e 94 28 1c 	call	0x3850	; 0x3850 <__fp_cmp>
    393e:	08 f4       	brcc	.+2      	; 0x3942 <__gesf2+0x8>
    3940:	8f ef       	ldi	r24, 0xFF	; 255
    3942:	08 95       	ret

00003944 <__mulsf3>:
    3944:	0e 94 b5 1c 	call	0x396a	; 0x396a <__mulsf3x>
    3948:	0c 94 63 1c 	jmp	0x38c6	; 0x38c6 <__fp_round>
    394c:	0e 94 55 1c 	call	0x38aa	; 0x38aa <__fp_pscA>
    3950:	38 f0       	brcs	.+14     	; 0x3960 <__mulsf3+0x1c>
    3952:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <__fp_pscB>
    3956:	20 f0       	brcs	.+8      	; 0x3960 <__mulsf3+0x1c>
    3958:	95 23       	and	r25, r21
    395a:	11 f0       	breq	.+4      	; 0x3960 <__mulsf3+0x1c>
    395c:	0c 94 4c 1c 	jmp	0x3898	; 0x3898 <__fp_inf>
    3960:	0c 94 52 1c 	jmp	0x38a4	; 0x38a4 <__fp_nan>
    3964:	11 24       	eor	r1, r1
    3966:	0c 94 97 1c 	jmp	0x392e	; 0x392e <__fp_szero>

0000396a <__mulsf3x>:
    396a:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <__fp_split3>
    396e:	70 f3       	brcs	.-36     	; 0x394c <__mulsf3+0x8>

00003970 <__mulsf3_pse>:
    3970:	95 9f       	mul	r25, r21
    3972:	c1 f3       	breq	.-16     	; 0x3964 <__mulsf3+0x20>
    3974:	95 0f       	add	r25, r21
    3976:	50 e0       	ldi	r21, 0x00	; 0
    3978:	55 1f       	adc	r21, r21
    397a:	62 9f       	mul	r22, r18
    397c:	f0 01       	movw	r30, r0
    397e:	72 9f       	mul	r23, r18
    3980:	bb 27       	eor	r27, r27
    3982:	f0 0d       	add	r31, r0
    3984:	b1 1d       	adc	r27, r1
    3986:	63 9f       	mul	r22, r19
    3988:	aa 27       	eor	r26, r26
    398a:	f0 0d       	add	r31, r0
    398c:	b1 1d       	adc	r27, r1
    398e:	aa 1f       	adc	r26, r26
    3990:	64 9f       	mul	r22, r20
    3992:	66 27       	eor	r22, r22
    3994:	b0 0d       	add	r27, r0
    3996:	a1 1d       	adc	r26, r1
    3998:	66 1f       	adc	r22, r22
    399a:	82 9f       	mul	r24, r18
    399c:	22 27       	eor	r18, r18
    399e:	b0 0d       	add	r27, r0
    39a0:	a1 1d       	adc	r26, r1
    39a2:	62 1f       	adc	r22, r18
    39a4:	73 9f       	mul	r23, r19
    39a6:	b0 0d       	add	r27, r0
    39a8:	a1 1d       	adc	r26, r1
    39aa:	62 1f       	adc	r22, r18
    39ac:	83 9f       	mul	r24, r19
    39ae:	a0 0d       	add	r26, r0
    39b0:	61 1d       	adc	r22, r1
    39b2:	22 1f       	adc	r18, r18
    39b4:	74 9f       	mul	r23, r20
    39b6:	33 27       	eor	r19, r19
    39b8:	a0 0d       	add	r26, r0
    39ba:	61 1d       	adc	r22, r1
    39bc:	23 1f       	adc	r18, r19
    39be:	84 9f       	mul	r24, r20
    39c0:	60 0d       	add	r22, r0
    39c2:	21 1d       	adc	r18, r1
    39c4:	82 2f       	mov	r24, r18
    39c6:	76 2f       	mov	r23, r22
    39c8:	6a 2f       	mov	r22, r26
    39ca:	11 24       	eor	r1, r1
    39cc:	9f 57       	subi	r25, 0x7F	; 127
    39ce:	50 40       	sbci	r21, 0x00	; 0
    39d0:	9a f0       	brmi	.+38     	; 0x39f8 <__mulsf3_pse+0x88>
    39d2:	f1 f0       	breq	.+60     	; 0x3a10 <__mulsf3_pse+0xa0>
    39d4:	88 23       	and	r24, r24
    39d6:	4a f0       	brmi	.+18     	; 0x39ea <__mulsf3_pse+0x7a>
    39d8:	ee 0f       	add	r30, r30
    39da:	ff 1f       	adc	r31, r31
    39dc:	bb 1f       	adc	r27, r27
    39de:	66 1f       	adc	r22, r22
    39e0:	77 1f       	adc	r23, r23
    39e2:	88 1f       	adc	r24, r24
    39e4:	91 50       	subi	r25, 0x01	; 1
    39e6:	50 40       	sbci	r21, 0x00	; 0
    39e8:	a9 f7       	brne	.-22     	; 0x39d4 <__mulsf3_pse+0x64>
    39ea:	9e 3f       	cpi	r25, 0xFE	; 254
    39ec:	51 05       	cpc	r21, r1
    39ee:	80 f0       	brcs	.+32     	; 0x3a10 <__mulsf3_pse+0xa0>
    39f0:	0c 94 4c 1c 	jmp	0x3898	; 0x3898 <__fp_inf>
    39f4:	0c 94 97 1c 	jmp	0x392e	; 0x392e <__fp_szero>
    39f8:	5f 3f       	cpi	r21, 0xFF	; 255
    39fa:	e4 f3       	brlt	.-8      	; 0x39f4 <__mulsf3_pse+0x84>
    39fc:	98 3e       	cpi	r25, 0xE8	; 232
    39fe:	d4 f3       	brlt	.-12     	; 0x39f4 <__mulsf3_pse+0x84>
    3a00:	86 95       	lsr	r24
    3a02:	77 95       	ror	r23
    3a04:	67 95       	ror	r22
    3a06:	b7 95       	ror	r27
    3a08:	f7 95       	ror	r31
    3a0a:	e7 95       	ror	r30
    3a0c:	9f 5f       	subi	r25, 0xFF	; 255
    3a0e:	c1 f7       	brne	.-16     	; 0x3a00 <__mulsf3_pse+0x90>
    3a10:	fe 2b       	or	r31, r30
    3a12:	88 0f       	add	r24, r24
    3a14:	91 1d       	adc	r25, r1
    3a16:	96 95       	lsr	r25
    3a18:	87 95       	ror	r24
    3a1a:	97 f9       	bld	r25, 7
    3a1c:	08 95       	ret

00003a1e <__divmodhi4>:
    3a1e:	97 fb       	bst	r25, 7
    3a20:	07 2e       	mov	r0, r23
    3a22:	16 f4       	brtc	.+4      	; 0x3a28 <__divmodhi4+0xa>
    3a24:	00 94       	com	r0
    3a26:	07 d0       	rcall	.+14     	; 0x3a36 <__divmodhi4_neg1>
    3a28:	77 fd       	sbrc	r23, 7
    3a2a:	09 d0       	rcall	.+18     	; 0x3a3e <__divmodhi4_neg2>
    3a2c:	0e 94 23 1d 	call	0x3a46	; 0x3a46 <__udivmodhi4>
    3a30:	07 fc       	sbrc	r0, 7
    3a32:	05 d0       	rcall	.+10     	; 0x3a3e <__divmodhi4_neg2>
    3a34:	3e f4       	brtc	.+14     	; 0x3a44 <__divmodhi4_exit>

00003a36 <__divmodhi4_neg1>:
    3a36:	90 95       	com	r25
    3a38:	81 95       	neg	r24
    3a3a:	9f 4f       	sbci	r25, 0xFF	; 255
    3a3c:	08 95       	ret

00003a3e <__divmodhi4_neg2>:
    3a3e:	70 95       	com	r23
    3a40:	61 95       	neg	r22
    3a42:	7f 4f       	sbci	r23, 0xFF	; 255

00003a44 <__divmodhi4_exit>:
    3a44:	08 95       	ret

00003a46 <__udivmodhi4>:
    3a46:	aa 1b       	sub	r26, r26
    3a48:	bb 1b       	sub	r27, r27
    3a4a:	51 e1       	ldi	r21, 0x11	; 17
    3a4c:	07 c0       	rjmp	.+14     	; 0x3a5c <__udivmodhi4_ep>

00003a4e <__udivmodhi4_loop>:
    3a4e:	aa 1f       	adc	r26, r26
    3a50:	bb 1f       	adc	r27, r27
    3a52:	a6 17       	cp	r26, r22
    3a54:	b7 07       	cpc	r27, r23
    3a56:	10 f0       	brcs	.+4      	; 0x3a5c <__udivmodhi4_ep>
    3a58:	a6 1b       	sub	r26, r22
    3a5a:	b7 0b       	sbc	r27, r23

00003a5c <__udivmodhi4_ep>:
    3a5c:	88 1f       	adc	r24, r24
    3a5e:	99 1f       	adc	r25, r25
    3a60:	5a 95       	dec	r21
    3a62:	a9 f7       	brne	.-22     	; 0x3a4e <__udivmodhi4_loop>
    3a64:	80 95       	com	r24
    3a66:	90 95       	com	r25
    3a68:	bc 01       	movw	r22, r24
    3a6a:	cd 01       	movw	r24, r26
    3a6c:	08 95       	ret

00003a6e <strcmp>:
    3a6e:	fb 01       	movw	r30, r22
    3a70:	dc 01       	movw	r26, r24
    3a72:	8d 91       	ld	r24, X+
    3a74:	01 90       	ld	r0, Z+
    3a76:	80 19       	sub	r24, r0
    3a78:	01 10       	cpse	r0, r1
    3a7a:	d9 f3       	breq	.-10     	; 0x3a72 <strcmp+0x4>
    3a7c:	99 0b       	sbc	r25, r25
    3a7e:	08 95       	ret

00003a80 <_exit>:
    3a80:	f8 94       	cli

00003a82 <__stop_program>:
    3a82:	ff cf       	rjmp	.-2      	; 0x3a82 <__stop_program>
