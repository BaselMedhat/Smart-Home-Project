
GccApplication1-1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d46  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000194  00800060  00002d46  00002dda  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  008001f4  008001f4  00002f6e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002f6e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002fa0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000350  00000000  00000000  00002fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001fd2  00000000  00000000  0000332c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f35  00000000  00000000  000052fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002491  00000000  00000000  00006233  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ac8  00000000  00000000  000086c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000091f  00000000  00000000  0000918c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001598  00000000  00000000  00009aab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000298  00000000  00000000  0000b043  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 40 12 	jmp	0x2480	; 0x2480 <__vector_1>
       8:	0c 94 71 12 	jmp	0x24e2	; 0x24e2 <__vector_2>
       c:	0c 94 a2 12 	jmp	0x2544	; 0x2544 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 64 14 	jmp	0x28c8	; 0x28c8 <__vector_10>
      2c:	0c 94 33 14 	jmp	0x2866	; 0x2866 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e4       	ldi	r30, 0x46	; 70
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 3f       	cpi	r26, 0xF4	; 244
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	22 e0       	ldi	r18, 0x02	; 2
      78:	a4 ef       	ldi	r26, 0xF4	; 244
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 30       	cpi	r26, 0x01	; 1
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b4 00 	call	0x168	; 0x168 <main>
      8a:	0c 94 a1 16 	jmp	0x2d42	; 0x2d42 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <AC>:
#include <string.h>


//this function is called automatically every 5 seconds
void AC()
{
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	00 d0       	rcall	.+0      	; 0x98 <AC+0x6>
      98:	00 d0       	rcall	.+0      	; 0x9a <AC+0x8>
      9a:	00 d0       	rcall	.+0      	; 0x9c <AC+0xa>
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
	static u16 counter=0;
	counter++;
      a0:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <__data_end>
      a4:	90 91 f5 01 	lds	r25, 0x01F5	; 0x8001f5 <__data_end+0x1>
      a8:	01 96       	adiw	r24, 0x01	; 1
      aa:	90 93 f5 01 	sts	0x01F5, r25	; 0x8001f5 <__data_end+0x1>
      ae:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <__data_end>
	if(counter==1220)
      b2:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <__data_end>
      b6:	90 91 f5 01 	lds	r25, 0x01F5	; 0x8001f5 <__data_end+0x1>
      ba:	84 3c       	cpi	r24, 0xC4	; 196
      bc:	94 40       	sbci	r25, 0x04	; 4
      be:	09 f0       	breq	.+2      	; 0xc2 <AC+0x30>
      c0:	49 c0       	rjmp	.+146    	; 0x154 <AC+0xc2>
	{
		
		u16 x = ADC_read(ADC0);
      c2:	80 e0       	ldi	r24, 0x00	; 0
      c4:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <ADC_read>
      c8:	9a 83       	std	Y+2, r25	; 0x02
      ca:	89 83       	std	Y+1, r24	; 0x01
		f32 y = x * (500.0/1023.0);
      cc:	89 81       	ldd	r24, Y+1	; 0x01
      ce:	9a 81       	ldd	r25, Y+2	; 0x02
      d0:	cc 01       	movw	r24, r24
      d2:	a0 e0       	ldi	r26, 0x00	; 0
      d4:	b0 e0       	ldi	r27, 0x00	; 0
      d6:	bc 01       	movw	r22, r24
      d8:	cd 01       	movw	r24, r26
      da:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <__floatunsisf>
      de:	dc 01       	movw	r26, r24
      e0:	cb 01       	movw	r24, r22
      e2:	20 e9       	ldi	r18, 0x90	; 144
      e4:	3e e3       	ldi	r19, 0x3E	; 62
      e6:	4a ef       	ldi	r20, 0xFA	; 250
      e8:	5e e3       	ldi	r21, 0x3E	; 62
      ea:	bc 01       	movw	r22, r24
      ec:	cd 01       	movw	r24, r26
      ee:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <__mulsf3>
      f2:	dc 01       	movw	r26, r24
      f4:	cb 01       	movw	r24, r22
      f6:	8b 83       	std	Y+3, r24	; 0x03
      f8:	9c 83       	std	Y+4, r25	; 0x04
      fa:	ad 83       	std	Y+5, r26	; 0x05
      fc:	be 83       	std	Y+6, r27	; 0x06
		if(y>=30)
      fe:	20 e0       	ldi	r18, 0x00	; 0
     100:	30 e0       	ldi	r19, 0x00	; 0
     102:	40 ef       	ldi	r20, 0xF0	; 240
     104:	51 e4       	ldi	r21, 0x41	; 65
     106:	6b 81       	ldd	r22, Y+3	; 0x03
     108:	7c 81       	ldd	r23, Y+4	; 0x04
     10a:	8d 81       	ldd	r24, Y+5	; 0x05
     10c:	9e 81       	ldd	r25, Y+6	; 0x06
     10e:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <__gesf2>
     112:	88 23       	and	r24, r24
     114:	44 f0       	brlt	.+16     	; 0x126 <AC+0x94>
		{
			DIO_setPinValue(DIO_PINA1,DIO_HIGH);
     116:	61 e0       	ldi	r22, 0x01	; 1
     118:	81 e0       	ldi	r24, 0x01	; 1
     11a:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <DIO_setPinValue>
			SPI_Write('q');
     11e:	81 e7       	ldi	r24, 0x71	; 113
     120:	0e 94 32 13 	call	0x2664	; 0x2664 <SPI_Write>
     124:	13 c0       	rjmp	.+38     	; 0x14c <AC+0xba>
		}
		else if(y<22)
     126:	20 e0       	ldi	r18, 0x00	; 0
     128:	30 e0       	ldi	r19, 0x00	; 0
     12a:	40 eb       	ldi	r20, 0xB0	; 176
     12c:	51 e4       	ldi	r21, 0x41	; 65
     12e:	6b 81       	ldd	r22, Y+3	; 0x03
     130:	7c 81       	ldd	r23, Y+4	; 0x04
     132:	8d 81       	ldd	r24, Y+5	; 0x05
     134:	9e 81       	ldd	r25, Y+6	; 0x06
     136:	0e 94 40 15 	call	0x2a80	; 0x2a80 <__cmpsf2>
     13a:	88 23       	and	r24, r24
     13c:	3c f4       	brge	.+14     	; 0x14c <AC+0xba>
		{
			DIO_setPinValue(DIO_PINA1,DIO_LOW);
     13e:	60 e0       	ldi	r22, 0x00	; 0
     140:	81 e0       	ldi	r24, 0x01	; 1
     142:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <DIO_setPinValue>
			SPI_Write('r');
     146:	82 e7       	ldi	r24, 0x72	; 114
     148:	0e 94 32 13 	call	0x2664	; 0x2664 <SPI_Write>
		}
		counter=0;
     14c:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <__data_end+0x1>
     150:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <__data_end>
	}
}
     154:	00 00       	nop
     156:	26 96       	adiw	r28, 0x06	; 6
     158:	0f b6       	in	r0, 0x3f	; 63
     15a:	f8 94       	cli
     15c:	de bf       	out	0x3e, r29	; 62
     15e:	0f be       	out	0x3f, r0	; 63
     160:	cd bf       	out	0x3d, r28	; 61
     162:	df 91       	pop	r29
     164:	cf 91       	pop	r28
     166:	08 95       	ret

00000168 <main>:
int main(void)
{ 
     168:	cf 93       	push	r28
     16a:	df 93       	push	r29
     16c:	cd b7       	in	r28, 0x3d	; 61
     16e:	de b7       	in	r29, 0x3e	; 62
     170:	a8 97       	sbiw	r28, 0x28	; 40
     172:	0f b6       	in	r0, 0x3f	; 63
     174:	f8 94       	cli
     176:	de bf       	out	0x3e, r29	; 62
     178:	0f be       	out	0x3f, r0	; 63
     17a:	cd bf       	out	0x3d, r28	; 61
	//setting communication pins
	DIO_setPinDir(DIO_PIND3,DIO_INPUT);
     17c:	60 e0       	ldi	r22, 0x00	; 0
     17e:	8b e1       	ldi	r24, 0x1B	; 27
     180:	0e 94 56 10 	call	0x20ac	; 0x20ac <DIO_setPinDir>
	DIO_setPinDir(DIO_PIND7,DIO_INPUT);
     184:	60 e0       	ldi	r22, 0x00	; 0
     186:	8f e1       	ldi	r24, 0x1F	; 31
     188:	0e 94 56 10 	call	0x20ac	; 0x20ac <DIO_setPinDir>
	DIO_setPinDir(DIO_PIND6,DIO_INPUT);
     18c:	60 e0       	ldi	r22, 0x00	; 0
     18e:	8e e1       	ldi	r24, 0x1E	; 30
     190:	0e 94 56 10 	call	0x20ac	; 0x20ac <DIO_setPinDir>
	//setting buzzer, temp sensor, and dc motor pins
	DIO_setPinDir(DIO_PINA2,DIO_OUTPUT);
     194:	61 e0       	ldi	r22, 0x01	; 1
     196:	82 e0       	ldi	r24, 0x02	; 2
     198:	0e 94 56 10 	call	0x20ac	; 0x20ac <DIO_setPinDir>
	DIO_setPinDir(DIO_PINA1,DIO_OUTPUT);
     19c:	61 e0       	ldi	r22, 0x01	; 1
     19e:	81 e0       	ldi	r24, 0x01	; 1
     1a0:	0e 94 56 10 	call	0x20ac	; 0x20ac <DIO_setPinDir>
	DIO_setPinDir(DIO_PINA0,DIO_INPUT);
     1a4:	60 e0       	ldi	r22, 0x00	; 0
     1a6:	80 e0       	ldi	r24, 0x00	; 0
     1a8:	0e 94 56 10 	call	0x20ac	; 0x20ac <DIO_setPinDir>
	ADC_init();
     1ac:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <ADC_init>

	SPI_Init();
     1b0:	0e 94 08 13 	call	0x2610	; 0x2610 <SPI_Init>
	UART_init();
     1b4:	0e 94 95 14 	call	0x292a	; 0x292a <UART_init>
	I2C_init(MASTER);
     1b8:	81 e0       	ldi	r24, 0x01	; 1
     1ba:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <I2C_init>
	GI_enable();
     1be:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <GI_enable>
	EXT0_init(EXT_RISING);
     1c2:	83 e0       	ldi	r24, 0x03	; 3
     1c4:	0e 94 c2 11 	call	0x2384	; 0x2384 <EXT0_init>
	TIMER0_initNormalMode();
     1c8:	0e 94 58 13 	call	0x26b0	; 0x26b0 <TIMER0_initNormalMode>
	TIMER0_setCallback(AC);
     1cc:	89 e4       	ldi	r24, 0x49	; 73
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	0e 94 20 14 	call	0x2840	; 0x2840 <TIMER0_setCallback>
	TIMER0_start(TIMER0_CLK_DIV_256);
     1d4:	83 e0       	ldi	r24, 0x03	; 3
     1d6:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <TIMER0_start>
	KEYPAD_init();
     1da:	0e 94 32 09 	call	0x1264	; 0x1264 <KEYPAD_init>
    LCD_init();
     1de:	0e 94 1e 0a 	call	0x143c	; 0x143c <LCD_init>
	EXT_setCallbackInt0(ext_fun);
     1e2:	89 e4       	ldi	r24, 0x49	; 73
     1e4:	96 e0       	ldi	r25, 0x06	; 6
     1e6:	0e 94 2d 12 	call	0x245a	; 0x245a <EXT_setCallbackInt0>
	u8 wrongPass=0;
     1ea:	19 82       	std	Y+1, r1	; 0x01
	u8 signout=1;
     1ec:	81 e0       	ldi	r24, 0x01	; 1
     1ee:	8a 83       	std	Y+2, r24	; 0x02
	
while (1)
{	
		//checking if a wrong pass was entered 3 consecutive times
	
if (wrongPass!=3)
     1f0:	89 81       	ldd	r24, Y+1	; 0x01
     1f2:	83 30       	cpi	r24, 0x03	; 3
     1f4:	09 f4       	brne	.+2      	; 0x1f8 <main+0x90>
     1f6:	8a c1       	rjmp	.+788    	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
{
		//checks if the login was correct
	if(userCheck()==1)
     1f8:	0e 94 28 05 	call	0xa50	; 0xa50 <userCheck>
     1fc:	81 30       	cpi	r24, 0x01	; 1
     1fe:	09 f0       	breq	.+2      	; 0x202 <main+0x9a>
     200:	7d c1       	rjmp	.+762    	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
	{
		wrongPass=0;
     202:	19 82       	std	Y+1, r1	; 0x01
		UART_sendString("waiting admin approval...\r");
     204:	80 e6       	ldi	r24, 0x60	; 96
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <UART_sendString>
		DIO_setPinDir(DIO_PINB0,DIO_OUTPUT);
     20c:	61 e0       	ldi	r22, 0x01	; 1
     20e:	88 e0       	ldi	r24, 0x08	; 8
     210:	0e 94 56 10 	call	0x20ac	; 0x20ac <DIO_setPinDir>
		DIO_setPinValue(DIO_PINB0,DIO_HIGH);	
     214:	61 e0       	ldi	r22, 0x01	; 1
     216:	88 e0       	ldi	r24, 0x08	; 8
     218:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <DIO_setPinValue>
     21c:	80 e0       	ldi	r24, 0x00	; 0
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	a8 e4       	ldi	r26, 0x48	; 72
     222:	b2 e4       	ldi	r27, 0x42	; 66
     224:	8f 83       	std	Y+7, r24	; 0x07
     226:	98 87       	std	Y+8, r25	; 0x08
     228:	a9 87       	std	Y+9, r26	; 0x09
     22a:	ba 87       	std	Y+10, r27	; 0x0a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     22c:	20 e0       	ldi	r18, 0x00	; 0
     22e:	30 e0       	ldi	r19, 0x00	; 0
     230:	4a e7       	ldi	r20, 0x7A	; 122
     232:	55 e4       	ldi	r21, 0x45	; 69
     234:	6f 81       	ldd	r22, Y+7	; 0x07
     236:	78 85       	ldd	r23, Y+8	; 0x08
     238:	89 85       	ldd	r24, Y+9	; 0x09
     23a:	9a 85       	ldd	r25, Y+10	; 0x0a
     23c:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <__mulsf3>
     240:	dc 01       	movw	r26, r24
     242:	cb 01       	movw	r24, r22
     244:	8b 87       	std	Y+11, r24	; 0x0b
     246:	9c 87       	std	Y+12, r25	; 0x0c
     248:	ad 87       	std	Y+13, r26	; 0x0d
     24a:	be 87       	std	Y+14, r27	; 0x0e
	if (__tmp < 1.0)
     24c:	20 e0       	ldi	r18, 0x00	; 0
     24e:	30 e0       	ldi	r19, 0x00	; 0
     250:	40 e8       	ldi	r20, 0x80	; 128
     252:	5f e3       	ldi	r21, 0x3F	; 63
     254:	6b 85       	ldd	r22, Y+11	; 0x0b
     256:	7c 85       	ldd	r23, Y+12	; 0x0c
     258:	8d 85       	ldd	r24, Y+13	; 0x0d
     25a:	9e 85       	ldd	r25, Y+14	; 0x0e
     25c:	0e 94 40 15 	call	0x2a80	; 0x2a80 <__cmpsf2>
     260:	88 23       	and	r24, r24
     262:	2c f4       	brge	.+10     	; 0x26e <main+0x106>
		__ticks = 1;
     264:	81 e0       	ldi	r24, 0x01	; 1
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	98 8b       	std	Y+16, r25	; 0x10
     26a:	8f 87       	std	Y+15, r24	; 0x0f
     26c:	3f c0       	rjmp	.+126    	; 0x2ec <main+0x184>
	else if (__tmp > 65535)
     26e:	20 e0       	ldi	r18, 0x00	; 0
     270:	3f ef       	ldi	r19, 0xFF	; 255
     272:	4f e7       	ldi	r20, 0x7F	; 127
     274:	57 e4       	ldi	r21, 0x47	; 71
     276:	6b 85       	ldd	r22, Y+11	; 0x0b
     278:	7c 85       	ldd	r23, Y+12	; 0x0c
     27a:	8d 85       	ldd	r24, Y+13	; 0x0d
     27c:	9e 85       	ldd	r25, Y+14	; 0x0e
     27e:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <__gesf2>
     282:	18 16       	cp	r1, r24
     284:	4c f5       	brge	.+82     	; 0x2d8 <main+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     286:	20 e0       	ldi	r18, 0x00	; 0
     288:	30 e0       	ldi	r19, 0x00	; 0
     28a:	40 e2       	ldi	r20, 0x20	; 32
     28c:	51 e4       	ldi	r21, 0x41	; 65
     28e:	6f 81       	ldd	r22, Y+7	; 0x07
     290:	78 85       	ldd	r23, Y+8	; 0x08
     292:	89 85       	ldd	r24, Y+9	; 0x09
     294:	9a 85       	ldd	r25, Y+10	; 0x0a
     296:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <__mulsf3>
     29a:	dc 01       	movw	r26, r24
     29c:	cb 01       	movw	r24, r22
     29e:	bc 01       	movw	r22, r24
     2a0:	cd 01       	movw	r24, r26
     2a2:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <__fixunssfsi>
     2a6:	dc 01       	movw	r26, r24
     2a8:	cb 01       	movw	r24, r22
     2aa:	98 8b       	std	Y+16, r25	; 0x10
     2ac:	8f 87       	std	Y+15, r24	; 0x0f
     2ae:	0f c0       	rjmp	.+30     	; 0x2ce <main+0x166>
     2b0:	80 e9       	ldi	r24, 0x90	; 144
     2b2:	91 e0       	ldi	r25, 0x01	; 1
     2b4:	9a 8b       	std	Y+18, r25	; 0x12
     2b6:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2b8:	89 89       	ldd	r24, Y+17	; 0x11
     2ba:	9a 89       	ldd	r25, Y+18	; 0x12
     2bc:	01 97       	sbiw	r24, 0x01	; 1
     2be:	f1 f7       	brne	.-4      	; 0x2bc <main+0x154>
     2c0:	9a 8b       	std	Y+18, r25	; 0x12
     2c2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2c4:	8f 85       	ldd	r24, Y+15	; 0x0f
     2c6:	98 89       	ldd	r25, Y+16	; 0x10
     2c8:	01 97       	sbiw	r24, 0x01	; 1
     2ca:	98 8b       	std	Y+16, r25	; 0x10
     2cc:	8f 87       	std	Y+15, r24	; 0x0f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2ce:	8f 85       	ldd	r24, Y+15	; 0x0f
     2d0:	98 89       	ldd	r25, Y+16	; 0x10
     2d2:	89 2b       	or	r24, r25
     2d4:	69 f7       	brne	.-38     	; 0x2b0 <main+0x148>
     2d6:	14 c0       	rjmp	.+40     	; 0x300 <main+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2d8:	6b 85       	ldd	r22, Y+11	; 0x0b
     2da:	7c 85       	ldd	r23, Y+12	; 0x0c
     2dc:	8d 85       	ldd	r24, Y+13	; 0x0d
     2de:	9e 85       	ldd	r25, Y+14	; 0x0e
     2e0:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <__fixunssfsi>
     2e4:	dc 01       	movw	r26, r24
     2e6:	cb 01       	movw	r24, r22
     2e8:	98 8b       	std	Y+16, r25	; 0x10
     2ea:	8f 87       	std	Y+15, r24	; 0x0f
     2ec:	8f 85       	ldd	r24, Y+15	; 0x0f
     2ee:	98 89       	ldd	r25, Y+16	; 0x10
     2f0:	9c 8b       	std	Y+20, r25	; 0x14
     2f2:	8b 8b       	std	Y+19, r24	; 0x13
     2f4:	8b 89       	ldd	r24, Y+19	; 0x13
     2f6:	9c 89       	ldd	r25, Y+20	; 0x14
     2f8:	01 97       	sbiw	r24, 0x01	; 1
     2fa:	f1 f7       	brne	.-4      	; 0x2f8 <main+0x190>
     2fc:	9c 8b       	std	Y+20, r25	; 0x14
     2fe:	8b 8b       	std	Y+19, r24	; 0x13
		_delay_ms(50);	
		DIO_setPinValue(DIO_PINB0,DIO_LOW);
     300:	60 e0       	ldi	r22, 0x00	; 0
     302:	88 e0       	ldi	r24, 0x08	; 8
     304:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <DIO_setPinValue>
		//waiting for admin approval
		while ((!DIO_readPinValue(DIO_PIND3)));
     308:	00 00       	nop
     30a:	8b e1       	ldi	r24, 0x1B	; 27
     30c:	0e 94 4b 11 	call	0x2296	; 0x2296 <DIO_readPinValue>
     310:	88 23       	and	r24, r24
     312:	d9 f3       	breq	.-10     	; 0x30a <main+0x1a2>
		if (DIO_readPinValue(DIO_PIND6))
     314:	8e e1       	ldi	r24, 0x1E	; 30
     316:	0e 94 4b 11 	call	0x2296	; 0x2296 <DIO_readPinValue>
     31a:	88 23       	and	r24, r24
     31c:	09 f4       	brne	.+2      	; 0x320 <main+0x1b8>
     31e:	dd c0       	rjmp	.+442    	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
		{
			UART_sendString("welcome\r");
     320:	8b e7       	ldi	r24, 0x7B	; 123
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <UART_sendString>
			////enters a loop where the admin menu to add, delete users or control devices
			u8 userchoice[10];
			 
			   
			     
				 while (signout==1)
     328:	d3 c0       	rjmp	.+422    	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
				 {
					 UART_sendString("Write the number of the led then on or off to control it\rPress a number between 1 and 5 to control the dimming\rWrite off to turn dimmer off\rPress s to signout\r");
     32a:	84 e8       	ldi	r24, 0x84	; 132
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <UART_sendString>
					 userInput(userchoice);
     332:	ce 01       	movw	r24, r28
     334:	4f 96       	adiw	r24, 0x1f	; 31
     336:	0e 94 47 03 	call	0x68e	; 0x68e <userInput>
					 AC();
     33a:	0e 94 49 00 	call	0x92	; 0x92 <AC>
					 if ((!(strcmp(userchoice,"off"))))
     33e:	ce 01       	movw	r24, r28
     340:	4f 96       	adiw	r24, 0x1f	; 31
     342:	64 e2       	ldi	r22, 0x24	; 36
     344:	71 e0       	ldi	r23, 0x01	; 1
     346:	0e 94 98 16 	call	0x2d30	; 0x2d30 <strcmp>
     34a:	89 2b       	or	r24, r25
     34c:	21 f4       	brne	.+8      	; 0x356 <main+0x1ee>
					 {
						 //dimmeroff
						 SPI_Write('a');
     34e:	81 e6       	ldi	r24, 0x61	; 97
     350:	0e 94 32 13 	call	0x2664	; 0x2664 <SPI_Write>
     354:	bd c0       	rjmp	.+378    	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
					 }
					 else if ((!(strcmp(userchoice,"1"))))
     356:	ce 01       	movw	r24, r28
     358:	4f 96       	adiw	r24, 0x1f	; 31
     35a:	68 e2       	ldi	r22, 0x28	; 40
     35c:	71 e0       	ldi	r23, 0x01	; 1
     35e:	0e 94 98 16 	call	0x2d30	; 0x2d30 <strcmp>
     362:	89 2b       	or	r24, r25
     364:	21 f4       	brne	.+8      	; 0x36e <main+0x206>
					 {
						// LED_DIMMER(1);
						SPI_Write('b');
     366:	82 e6       	ldi	r24, 0x62	; 98
     368:	0e 94 32 13 	call	0x2664	; 0x2664 <SPI_Write>
     36c:	b1 c0       	rjmp	.+354    	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
					 }
					 else if ((!(strcmp(userchoice,"2"))))
     36e:	ce 01       	movw	r24, r28
     370:	4f 96       	adiw	r24, 0x1f	; 31
     372:	6a e2       	ldi	r22, 0x2A	; 42
     374:	71 e0       	ldi	r23, 0x01	; 1
     376:	0e 94 98 16 	call	0x2d30	; 0x2d30 <strcmp>
     37a:	89 2b       	or	r24, r25
     37c:	21 f4       	brne	.+8      	; 0x386 <main+0x21e>
					 {
						// LED_DIMMER(2);
						SPI_Write('c');
     37e:	83 e6       	ldi	r24, 0x63	; 99
     380:	0e 94 32 13 	call	0x2664	; 0x2664 <SPI_Write>
     384:	a5 c0       	rjmp	.+330    	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
					 }
					 else if ((!(strcmp(userchoice,"3"))))
     386:	ce 01       	movw	r24, r28
     388:	4f 96       	adiw	r24, 0x1f	; 31
     38a:	6c e2       	ldi	r22, 0x2C	; 44
     38c:	71 e0       	ldi	r23, 0x01	; 1
     38e:	0e 94 98 16 	call	0x2d30	; 0x2d30 <strcmp>
     392:	89 2b       	or	r24, r25
     394:	21 f4       	brne	.+8      	; 0x39e <main+0x236>
					 {
						 //LED_DIMMER(3);
						 SPI_Write('d');
     396:	84 e6       	ldi	r24, 0x64	; 100
     398:	0e 94 32 13 	call	0x2664	; 0x2664 <SPI_Write>
     39c:	99 c0       	rjmp	.+306    	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
					 }
					 else if ((!(strcmp(userchoice,"4"))))
     39e:	ce 01       	movw	r24, r28
     3a0:	4f 96       	adiw	r24, 0x1f	; 31
     3a2:	6e e2       	ldi	r22, 0x2E	; 46
     3a4:	71 e0       	ldi	r23, 0x01	; 1
     3a6:	0e 94 98 16 	call	0x2d30	; 0x2d30 <strcmp>
     3aa:	89 2b       	or	r24, r25
     3ac:	21 f4       	brne	.+8      	; 0x3b6 <main+0x24e>
					 {
						 //LED_DIMMER(4);
						 SPI_Write('e');
     3ae:	85 e6       	ldi	r24, 0x65	; 101
     3b0:	0e 94 32 13 	call	0x2664	; 0x2664 <SPI_Write>
     3b4:	8d c0       	rjmp	.+282    	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
					 }
					 else if ((!(strcmp(userchoice,"5"))))
     3b6:	ce 01       	movw	r24, r28
     3b8:	4f 96       	adiw	r24, 0x1f	; 31
     3ba:	60 e3       	ldi	r22, 0x30	; 48
     3bc:	71 e0       	ldi	r23, 0x01	; 1
     3be:	0e 94 98 16 	call	0x2d30	; 0x2d30 <strcmp>
     3c2:	89 2b       	or	r24, r25
     3c4:	21 f4       	brne	.+8      	; 0x3ce <main+0x266>
					 {
						 //LED_DIMMER(5);
						 SPI_Write('f');
     3c6:	86 e6       	ldi	r24, 0x66	; 102
     3c8:	0e 94 32 13 	call	0x2664	; 0x2664 <SPI_Write>
     3cc:	81 c0       	rjmp	.+258    	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
					 }
					 else if ((!(strcmp(userchoice,"1 on"))))
     3ce:	ce 01       	movw	r24, r28
     3d0:	4f 96       	adiw	r24, 0x1f	; 31
     3d2:	62 e3       	ldi	r22, 0x32	; 50
     3d4:	71 e0       	ldi	r23, 0x01	; 1
     3d6:	0e 94 98 16 	call	0x2d30	; 0x2d30 <strcmp>
     3da:	89 2b       	or	r24, r25
     3dc:	21 f4       	brne	.+8      	; 0x3e6 <main+0x27e>
					 {
						// DIO_setPinValue(DIO_PINA0,DIO_HIGH);
						SPI_Write('g');
     3de:	87 e6       	ldi	r24, 0x67	; 103
     3e0:	0e 94 32 13 	call	0x2664	; 0x2664 <SPI_Write>
     3e4:	75 c0       	rjmp	.+234    	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
										 }
					 else if ((!(strcmp(userchoice,"2 on"))))
     3e6:	ce 01       	movw	r24, r28
     3e8:	4f 96       	adiw	r24, 0x1f	; 31
     3ea:	67 e3       	ldi	r22, 0x37	; 55
     3ec:	71 e0       	ldi	r23, 0x01	; 1
     3ee:	0e 94 98 16 	call	0x2d30	; 0x2d30 <strcmp>
     3f2:	89 2b       	or	r24, r25
     3f4:	21 f4       	brne	.+8      	; 0x3fe <main+0x296>
					 {
						 //DIO_setPinValue(DIO_PINA1,DIO_HIGH);
						 SPI_Write('h');
     3f6:	88 e6       	ldi	r24, 0x68	; 104
     3f8:	0e 94 32 13 	call	0x2664	; 0x2664 <SPI_Write>
     3fc:	69 c0       	rjmp	.+210    	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
					 }
					 else if ((!(strcmp(userchoice,"3 on"))))
     3fe:	ce 01       	movw	r24, r28
     400:	4f 96       	adiw	r24, 0x1f	; 31
     402:	6c e3       	ldi	r22, 0x3C	; 60
     404:	71 e0       	ldi	r23, 0x01	; 1
     406:	0e 94 98 16 	call	0x2d30	; 0x2d30 <strcmp>
     40a:	89 2b       	or	r24, r25
     40c:	21 f4       	brne	.+8      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
					 {
						// DIO_setPinValue(DIO_PINA2,DIO_HIGH);
						 SPI_Write('i');
     40e:	89 e6       	ldi	r24, 0x69	; 105
     410:	0e 94 32 13 	call	0x2664	; 0x2664 <SPI_Write>
     414:	5d c0       	rjmp	.+186    	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
					 }
					 else if ((!(strcmp(userchoice,"4 on"))))
     416:	ce 01       	movw	r24, r28
     418:	4f 96       	adiw	r24, 0x1f	; 31
     41a:	61 e4       	ldi	r22, 0x41	; 65
     41c:	71 e0       	ldi	r23, 0x01	; 1
     41e:	0e 94 98 16 	call	0x2d30	; 0x2d30 <strcmp>
     422:	89 2b       	or	r24, r25
     424:	21 f4       	brne	.+8      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
					 {
						// DIO_setPinValue(DIO_PINA3,DIO_HIGH);
						 SPI_Write('j');
     426:	8a e6       	ldi	r24, 0x6A	; 106
     428:	0e 94 32 13 	call	0x2664	; 0x2664 <SPI_Write>
     42c:	51 c0       	rjmp	.+162    	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
					 }
					 else if ((!(strcmp(userchoice,"5 on"))))
     42e:	ce 01       	movw	r24, r28
     430:	4f 96       	adiw	r24, 0x1f	; 31
     432:	66 e4       	ldi	r22, 0x46	; 70
     434:	71 e0       	ldi	r23, 0x01	; 1
     436:	0e 94 98 16 	call	0x2d30	; 0x2d30 <strcmp>
     43a:	89 2b       	or	r24, r25
     43c:	21 f4       	brne	.+8      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
					 {
						 //DIO_setPinValue(DIO_PINA4,DIO_HIGH);
						 SPI_Write('k');
     43e:	8b e6       	ldi	r24, 0x6B	; 107
     440:	0e 94 32 13 	call	0x2664	; 0x2664 <SPI_Write>
     444:	45 c0       	rjmp	.+138    	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
					 }
					 else if ((!(strcmp(userchoice,"1 off"))))
     446:	ce 01       	movw	r24, r28
     448:	4f 96       	adiw	r24, 0x1f	; 31
     44a:	6b e4       	ldi	r22, 0x4B	; 75
     44c:	71 e0       	ldi	r23, 0x01	; 1
     44e:	0e 94 98 16 	call	0x2d30	; 0x2d30 <strcmp>
     452:	89 2b       	or	r24, r25
     454:	21 f4       	brne	.+8      	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
					 {
						// DIO_setPinValue(DIO_PINA0,DIO_LOW);
						 SPI_Write('l');
     456:	8c e6       	ldi	r24, 0x6C	; 108
     458:	0e 94 32 13 	call	0x2664	; 0x2664 <SPI_Write>
     45c:	39 c0       	rjmp	.+114    	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
					 }
					 else if ((!(strcmp(userchoice,"2 off"))))
     45e:	ce 01       	movw	r24, r28
     460:	4f 96       	adiw	r24, 0x1f	; 31
     462:	61 e5       	ldi	r22, 0x51	; 81
     464:	71 e0       	ldi	r23, 0x01	; 1
     466:	0e 94 98 16 	call	0x2d30	; 0x2d30 <strcmp>
     46a:	89 2b       	or	r24, r25
     46c:	21 f4       	brne	.+8      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
					 {
						// DIO_setPinValue(DIO_PINA1,DIO_LOW);
						 SPI_Write('m');
     46e:	8d e6       	ldi	r24, 0x6D	; 109
     470:	0e 94 32 13 	call	0x2664	; 0x2664 <SPI_Write>
     474:	2d c0       	rjmp	.+90     	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
					 }
					 else if ((!(strcmp(userchoice,"3 off"))))
     476:	ce 01       	movw	r24, r28
     478:	4f 96       	adiw	r24, 0x1f	; 31
     47a:	67 e5       	ldi	r22, 0x57	; 87
     47c:	71 e0       	ldi	r23, 0x01	; 1
     47e:	0e 94 98 16 	call	0x2d30	; 0x2d30 <strcmp>
     482:	89 2b       	or	r24, r25
     484:	21 f4       	brne	.+8      	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
					 {
						// DIO_setPinValue(DIO_PINA2,DIO_LOW);
						 SPI_Write('n');
     486:	8e e6       	ldi	r24, 0x6E	; 110
     488:	0e 94 32 13 	call	0x2664	; 0x2664 <SPI_Write>
     48c:	21 c0       	rjmp	.+66     	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
					 }
					 else if ((!(strcmp(userchoice,"4 off"))))
     48e:	ce 01       	movw	r24, r28
     490:	4f 96       	adiw	r24, 0x1f	; 31
     492:	6d e5       	ldi	r22, 0x5D	; 93
     494:	71 e0       	ldi	r23, 0x01	; 1
     496:	0e 94 98 16 	call	0x2d30	; 0x2d30 <strcmp>
     49a:	89 2b       	or	r24, r25
     49c:	21 f4       	brne	.+8      	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
					 {
						// DIO_setPinValue(DIO_PINA3,DIO_LOW);
						 SPI_Write('o');
     49e:	8f e6       	ldi	r24, 0x6F	; 111
     4a0:	0e 94 32 13 	call	0x2664	; 0x2664 <SPI_Write>
     4a4:	15 c0       	rjmp	.+42     	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
					 }
					 else if ((!(strcmp(userchoice,"5 off"))))
     4a6:	ce 01       	movw	r24, r28
     4a8:	4f 96       	adiw	r24, 0x1f	; 31
     4aa:	63 e6       	ldi	r22, 0x63	; 99
     4ac:	71 e0       	ldi	r23, 0x01	; 1
     4ae:	0e 94 98 16 	call	0x2d30	; 0x2d30 <strcmp>
     4b2:	89 2b       	or	r24, r25
     4b4:	21 f4       	brne	.+8      	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
					 {
						 //DIO_setPinValue(DIO_PINA4,DIO_LOW);
						 SPI_Write('p');
     4b6:	80 e7       	ldi	r24, 0x70	; 112
     4b8:	0e 94 32 13 	call	0x2664	; 0x2664 <SPI_Write>
     4bc:	09 c0       	rjmp	.+18     	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
					 }
					 else if ((!(strcmp(userchoice,"s"))))
     4be:	ce 01       	movw	r24, r28
     4c0:	4f 96       	adiw	r24, 0x1f	; 31
     4c2:	69 e6       	ldi	r22, 0x69	; 105
     4c4:	71 e0       	ldi	r23, 0x01	; 1
     4c6:	0e 94 98 16 	call	0x2d30	; 0x2d30 <strcmp>
     4ca:	89 2b       	or	r24, r25
     4cc:	09 f4       	brne	.+2      	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
					 {
						 signout=0;
     4ce:	1a 82       	std	Y+2, r1	; 0x02
			////enters a loop where the admin menu to add, delete users or control devices
			u8 userchoice[10];
			 
			   
			     
				 while (signout==1)
     4d0:	8a 81       	ldd	r24, Y+2	; 0x02
     4d2:	81 30       	cpi	r24, 0x01	; 1
     4d4:	09 f4       	brne	.+2      	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
     4d6:	29 cf       	rjmp	.-430    	; 0x32a <main+0x1c2>
     4d8:	8b ce       	rjmp	.-746    	; 0x1f0 <main+0x88>
			
			
			
			//menu+door
		}
		else if (DIO_readPinValue(DIO_PIND7))
     4da:	8f e1       	ldi	r24, 0x1F	; 31
     4dc:	0e 94 4b 11 	call	0x2296	; 0x2296 <DIO_readPinValue>
     4e0:	88 23       	and	r24, r24
     4e2:	09 f4       	brne	.+2      	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
     4e4:	85 ce       	rjmp	.-758    	; 0x1f0 <main+0x88>
			{
				UART_sendString("Access Denied");
     4e6:	8b e6       	ldi	r24, 0x6B	; 107
     4e8:	91 e0       	ldi	r25, 0x01	; 1
     4ea:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <UART_sendString>
				UART_sendData(13);
     4ee:	8d e0       	ldi	r24, 0x0D	; 13
     4f0:	0e 94 d5 14 	call	0x29aa	; 0x29aa <UART_sendData>
				UART_sendData(10);
     4f4:	8a e0       	ldi	r24, 0x0A	; 10
     4f6:	0e 94 d5 14 	call	0x29aa	; 0x29aa <UART_sendData>
     4fa:	7a ce       	rjmp	.-780    	; 0x1f0 <main+0x88>
			}
	}
	else 
	{
   		UART_sendString("Wrong Username or Password");
     4fc:	89 e7       	ldi	r24, 0x79	; 121
     4fe:	91 e0       	ldi	r25, 0x01	; 1
     500:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <UART_sendString>
		wrongPass++;
     504:	89 81       	ldd	r24, Y+1	; 0x01
     506:	8f 5f       	subi	r24, 0xFF	; 255
     508:	89 83       	std	Y+1, r24	; 0x01
     50a:	72 ce       	rjmp	.-796    	; 0x1f0 <main+0x88>
	}
}
else
{
		//enable the buzzer for about 2 seconds when login is incorrect 3 times
	DIO_setPinValue(DIO_PINA2,DIO_HIGH);
     50c:	61 e0       	ldi	r22, 0x01	; 1
     50e:	82 e0       	ldi	r24, 0x02	; 2
     510:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <DIO_setPinValue>
     514:	80 e0       	ldi	r24, 0x00	; 0
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	aa ef       	ldi	r26, 0xFA	; 250
     51a:	b4 e4       	ldi	r27, 0x44	; 68
     51c:	8b 83       	std	Y+3, r24	; 0x03
     51e:	9c 83       	std	Y+4, r25	; 0x04
     520:	ad 83       	std	Y+5, r26	; 0x05
     522:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     524:	20 e0       	ldi	r18, 0x00	; 0
     526:	30 e0       	ldi	r19, 0x00	; 0
     528:	4a e7       	ldi	r20, 0x7A	; 122
     52a:	55 e4       	ldi	r21, 0x45	; 69
     52c:	6b 81       	ldd	r22, Y+3	; 0x03
     52e:	7c 81       	ldd	r23, Y+4	; 0x04
     530:	8d 81       	ldd	r24, Y+5	; 0x05
     532:	9e 81       	ldd	r25, Y+6	; 0x06
     534:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <__mulsf3>
     538:	dc 01       	movw	r26, r24
     53a:	cb 01       	movw	r24, r22
     53c:	8d 8b       	std	Y+21, r24	; 0x15
     53e:	9e 8b       	std	Y+22, r25	; 0x16
     540:	af 8b       	std	Y+23, r26	; 0x17
     542:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     544:	20 e0       	ldi	r18, 0x00	; 0
     546:	30 e0       	ldi	r19, 0x00	; 0
     548:	40 e8       	ldi	r20, 0x80	; 128
     54a:	5f e3       	ldi	r21, 0x3F	; 63
     54c:	6d 89       	ldd	r22, Y+21	; 0x15
     54e:	7e 89       	ldd	r23, Y+22	; 0x16
     550:	8f 89       	ldd	r24, Y+23	; 0x17
     552:	98 8d       	ldd	r25, Y+24	; 0x18
     554:	0e 94 40 15 	call	0x2a80	; 0x2a80 <__cmpsf2>
     558:	88 23       	and	r24, r24
     55a:	2c f4       	brge	.+10     	; 0x566 <__EEPROM_REGION_LENGTH__+0x166>
		__ticks = 1;
     55c:	81 e0       	ldi	r24, 0x01	; 1
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	9a 8f       	std	Y+26, r25	; 0x1a
     562:	89 8f       	std	Y+25, r24	; 0x19
     564:	3f c0       	rjmp	.+126    	; 0x5e4 <__EEPROM_REGION_LENGTH__+0x1e4>
	else if (__tmp > 65535)
     566:	20 e0       	ldi	r18, 0x00	; 0
     568:	3f ef       	ldi	r19, 0xFF	; 255
     56a:	4f e7       	ldi	r20, 0x7F	; 127
     56c:	57 e4       	ldi	r21, 0x47	; 71
     56e:	6d 89       	ldd	r22, Y+21	; 0x15
     570:	7e 89       	ldd	r23, Y+22	; 0x16
     572:	8f 89       	ldd	r24, Y+23	; 0x17
     574:	98 8d       	ldd	r25, Y+24	; 0x18
     576:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <__gesf2>
     57a:	18 16       	cp	r1, r24
     57c:	4c f5       	brge	.+82     	; 0x5d0 <__EEPROM_REGION_LENGTH__+0x1d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     57e:	20 e0       	ldi	r18, 0x00	; 0
     580:	30 e0       	ldi	r19, 0x00	; 0
     582:	40 e2       	ldi	r20, 0x20	; 32
     584:	51 e4       	ldi	r21, 0x41	; 65
     586:	6b 81       	ldd	r22, Y+3	; 0x03
     588:	7c 81       	ldd	r23, Y+4	; 0x04
     58a:	8d 81       	ldd	r24, Y+5	; 0x05
     58c:	9e 81       	ldd	r25, Y+6	; 0x06
     58e:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <__mulsf3>
     592:	dc 01       	movw	r26, r24
     594:	cb 01       	movw	r24, r22
     596:	bc 01       	movw	r22, r24
     598:	cd 01       	movw	r24, r26
     59a:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <__fixunssfsi>
     59e:	dc 01       	movw	r26, r24
     5a0:	cb 01       	movw	r24, r22
     5a2:	9a 8f       	std	Y+26, r25	; 0x1a
     5a4:	89 8f       	std	Y+25, r24	; 0x19
     5a6:	0f c0       	rjmp	.+30     	; 0x5c6 <__EEPROM_REGION_LENGTH__+0x1c6>
     5a8:	80 e9       	ldi	r24, 0x90	; 144
     5aa:	91 e0       	ldi	r25, 0x01	; 1
     5ac:	9c 8f       	std	Y+28, r25	; 0x1c
     5ae:	8b 8f       	std	Y+27, r24	; 0x1b
     5b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     5b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     5b4:	01 97       	sbiw	r24, 0x01	; 1
     5b6:	f1 f7       	brne	.-4      	; 0x5b4 <__EEPROM_REGION_LENGTH__+0x1b4>
     5b8:	9c 8f       	std	Y+28, r25	; 0x1c
     5ba:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5bc:	89 8d       	ldd	r24, Y+25	; 0x19
     5be:	9a 8d       	ldd	r25, Y+26	; 0x1a
     5c0:	01 97       	sbiw	r24, 0x01	; 1
     5c2:	9a 8f       	std	Y+26, r25	; 0x1a
     5c4:	89 8f       	std	Y+25, r24	; 0x19
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5c6:	89 8d       	ldd	r24, Y+25	; 0x19
     5c8:	9a 8d       	ldd	r25, Y+26	; 0x1a
     5ca:	89 2b       	or	r24, r25
     5cc:	69 f7       	brne	.-38     	; 0x5a8 <__EEPROM_REGION_LENGTH__+0x1a8>
     5ce:	14 c0       	rjmp	.+40     	; 0x5f8 <__EEPROM_REGION_LENGTH__+0x1f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5d0:	6d 89       	ldd	r22, Y+21	; 0x15
     5d2:	7e 89       	ldd	r23, Y+22	; 0x16
     5d4:	8f 89       	ldd	r24, Y+23	; 0x17
     5d6:	98 8d       	ldd	r25, Y+24	; 0x18
     5d8:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <__fixunssfsi>
     5dc:	dc 01       	movw	r26, r24
     5de:	cb 01       	movw	r24, r22
     5e0:	9a 8f       	std	Y+26, r25	; 0x1a
     5e2:	89 8f       	std	Y+25, r24	; 0x19
     5e4:	89 8d       	ldd	r24, Y+25	; 0x19
     5e6:	9a 8d       	ldd	r25, Y+26	; 0x1a
     5e8:	9e 8f       	std	Y+30, r25	; 0x1e
     5ea:	8d 8f       	std	Y+29, r24	; 0x1d
     5ec:	8d 8d       	ldd	r24, Y+29	; 0x1d
     5ee:	9e 8d       	ldd	r25, Y+30	; 0x1e
     5f0:	01 97       	sbiw	r24, 0x01	; 1
     5f2:	f1 f7       	brne	.-4      	; 0x5f0 <__EEPROM_REGION_LENGTH__+0x1f0>
     5f4:	9e 8f       	std	Y+30, r25	; 0x1e
     5f6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2000);
	DIO_setPinValue(DIO_PINA2,DIO_LOW);
     5f8:	60 e0       	ldi	r22, 0x00	; 0
     5fa:	82 e0       	ldi	r24, 0x02	; 2
     5fc:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <DIO_setPinValue>
	wrongPass=0;
     600:	19 82       	std	Y+1, r1	; 0x01
}

	

 }
     602:	f6 cd       	rjmp	.-1044   	; 0x1f0 <main+0x88>

00000604 <userkeypadInput>:
#include "EEPROM_INT.h"
#include "MEM_INT.h"
#include "ADC_INT.h"
u8 charCounter=0;
void userkeypadInput (u8 *input)
{
     604:	cf 93       	push	r28
     606:	df 93       	push	r29
     608:	00 d0       	rcall	.+0      	; 0x60a <userkeypadInput+0x6>
     60a:	00 d0       	rcall	.+0      	; 0x60c <userkeypadInput+0x8>
     60c:	cd b7       	in	r28, 0x3d	; 61
     60e:	de b7       	in	r29, 0x3e	; 62
     610:	9c 83       	std	Y+4, r25	; 0x04
     612:	8b 83       	std	Y+3, r24	; 0x03
	//this function is used to receive a string from the keypad
	u8 key=0,i=0;
     614:	19 82       	std	Y+1, r1	; 0x01
     616:	1a 82       	std	Y+2, r1	; 0x02
	charCounter=0;
     618:	10 92 f6 01 	sts	0x01F6, r1	; 0x8001f6 <charCounter>
	while (key!='=')
     61c:	23 c0       	rjmp	.+70     	; 0x664 <userkeypadInput+0x60>
	{
		key = KEYPAD_read();
     61e:	0e 94 66 09 	call	0x12cc	; 0x12cc <KEYPAD_read>
     622:	89 83       	std	Y+1, r24	; 0x01
		if(key != KEYPAD_UNPRESSED && key!='=')
     624:	89 81       	ldd	r24, Y+1	; 0x01
     626:	88 37       	cpi	r24, 0x78	; 120
     628:	e9 f0       	breq	.+58     	; 0x664 <userkeypadInput+0x60>
     62a:	89 81       	ldd	r24, Y+1	; 0x01
     62c:	8d 33       	cpi	r24, 0x3D	; 61
     62e:	d1 f0       	breq	.+52     	; 0x664 <userkeypadInput+0x60>
		{
			while(KEYPAD_read() != KEYPAD_UNPRESSED);
     630:	00 00       	nop
     632:	0e 94 66 09 	call	0x12cc	; 0x12cc <KEYPAD_read>
     636:	88 37       	cpi	r24, 0x78	; 120
     638:	e1 f7       	brne	.-8      	; 0x632 <userkeypadInput+0x2e>
			LCD_writeChar(key);
     63a:	89 81       	ldd	r24, Y+1	; 0x01
     63c:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <LCD_writeChar>
			input[i]=key;
     640:	8a 81       	ldd	r24, Y+2	; 0x02
     642:	88 2f       	mov	r24, r24
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	2b 81       	ldd	r18, Y+3	; 0x03
     648:	3c 81       	ldd	r19, Y+4	; 0x04
     64a:	82 0f       	add	r24, r18
     64c:	93 1f       	adc	r25, r19
     64e:	29 81       	ldd	r18, Y+1	; 0x01
     650:	fc 01       	movw	r30, r24
     652:	20 83       	st	Z, r18
			charCounter++;
     654:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <charCounter>
     658:	8f 5f       	subi	r24, 0xFF	; 255
     65a:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <charCounter>
			i++;
     65e:	8a 81       	ldd	r24, Y+2	; 0x02
     660:	8f 5f       	subi	r24, 0xFF	; 255
     662:	8a 83       	std	Y+2, r24	; 0x02
void userkeypadInput (u8 *input)
{
	//this function is used to receive a string from the keypad
	u8 key=0,i=0;
	charCounter=0;
	while (key!='=')
     664:	89 81       	ldd	r24, Y+1	; 0x01
     666:	8d 33       	cpi	r24, 0x3D	; 61
     668:	d1 f6       	brne	.-76     	; 0x61e <userkeypadInput+0x1a>
			input[i]=key;
			charCounter++;
			i++;
		}
	}
	input[charCounter]='\0';
     66a:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <charCounter>
     66e:	88 2f       	mov	r24, r24
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	2b 81       	ldd	r18, Y+3	; 0x03
     674:	3c 81       	ldd	r19, Y+4	; 0x04
     676:	82 0f       	add	r24, r18
     678:	93 1f       	adc	r25, r19
     67a:	fc 01       	movw	r30, r24
     67c:	10 82       	st	Z, r1
}
     67e:	00 00       	nop
     680:	0f 90       	pop	r0
     682:	0f 90       	pop	r0
     684:	0f 90       	pop	r0
     686:	0f 90       	pop	r0
     688:	df 91       	pop	r29
     68a:	cf 91       	pop	r28
     68c:	08 95       	ret

0000068e <userInput>:
void userInput (u8 *input)
{
     68e:	cf 93       	push	r28
     690:	df 93       	push	r29
     692:	00 d0       	rcall	.+0      	; 0x694 <userInput+0x6>
     694:	00 d0       	rcall	.+0      	; 0x696 <userInput+0x8>
     696:	cd b7       	in	r28, 0x3d	; 61
     698:	de b7       	in	r29, 0x3e	; 62
     69a:	9c 83       	std	Y+4, r25	; 0x04
     69c:	8b 83       	std	Y+3, r24	; 0x03
	//this function is used to receive a string from the uart
	u8 c=0,i=0;
     69e:	19 82       	std	Y+1, r1	; 0x01
     6a0:	1a 82       	std	Y+2, r1	; 0x02
	charCounter=0;
     6a2:	10 92 f6 01 	sts	0x01F6, r1	; 0x8001f6 <charCounter>
	while (c!=0x3d)
     6a6:	18 c0       	rjmp	.+48     	; 0x6d8 <userInput+0x4a>
	{
		c=UART_receiveData();
     6a8:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <UART_receiveData>
     6ac:	89 83       	std	Y+1, r24	; 0x01
		if (c!=0x3d)
     6ae:	89 81       	ldd	r24, Y+1	; 0x01
     6b0:	8d 33       	cpi	r24, 0x3D	; 61
     6b2:	91 f0       	breq	.+36     	; 0x6d8 <userInput+0x4a>
		{
			input[i]=c;
     6b4:	8a 81       	ldd	r24, Y+2	; 0x02
     6b6:	88 2f       	mov	r24, r24
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	2b 81       	ldd	r18, Y+3	; 0x03
     6bc:	3c 81       	ldd	r19, Y+4	; 0x04
     6be:	82 0f       	add	r24, r18
     6c0:	93 1f       	adc	r25, r19
     6c2:	29 81       	ldd	r18, Y+1	; 0x01
     6c4:	fc 01       	movw	r30, r24
     6c6:	20 83       	st	Z, r18
			charCounter++;
     6c8:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <charCounter>
     6cc:	8f 5f       	subi	r24, 0xFF	; 255
     6ce:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <charCounter>
			i++;
     6d2:	8a 81       	ldd	r24, Y+2	; 0x02
     6d4:	8f 5f       	subi	r24, 0xFF	; 255
     6d6:	8a 83       	std	Y+2, r24	; 0x02
void userInput (u8 *input)
{
	//this function is used to receive a string from the uart
	u8 c=0,i=0;
	charCounter=0;
	while (c!=0x3d)
     6d8:	89 81       	ldd	r24, Y+1	; 0x01
     6da:	8d 33       	cpi	r24, 0x3D	; 61
     6dc:	29 f7       	brne	.-54     	; 0x6a8 <userInput+0x1a>
			input[i]=c;
			charCounter++;
			i++;
		}
	}
	input[charCounter]='\0';
     6de:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <charCounter>
     6e2:	88 2f       	mov	r24, r24
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	2b 81       	ldd	r18, Y+3	; 0x03
     6e8:	3c 81       	ldd	r19, Y+4	; 0x04
     6ea:	82 0f       	add	r24, r18
     6ec:	93 1f       	adc	r25, r19
     6ee:	fc 01       	movw	r30, r24
     6f0:	10 82       	st	Z, r1
	UART_sendData(13);
     6f2:	8d e0       	ldi	r24, 0x0D	; 13
     6f4:	0e 94 d5 14 	call	0x29aa	; 0x29aa <UART_sendData>
	UART_sendData(10);
     6f8:	8a e0       	ldi	r24, 0x0A	; 10
     6fa:	0e 94 d5 14 	call	0x29aa	; 0x29aa <UART_sendData>
}
     6fe:	00 00       	nop
     700:	0f 90       	pop	r0
     702:	0f 90       	pop	r0
     704:	0f 90       	pop	r0
     706:	0f 90       	pop	r0
     708:	df 91       	pop	r29
     70a:	cf 91       	pop	r28
     70c:	08 95       	ret

0000070e <userkeypadCheck>:
u8 userkeypadCheck()
{
     70e:	1f 93       	push	r17
     710:	cf 93       	push	r28
     712:	df 93       	push	r29
     714:	cd b7       	in	r28, 0x3d	; 61
     716:	de b7       	in	r29, 0x3e	; 62
     718:	e8 97       	sbiw	r28, 0x38	; 56
     71a:	0f b6       	in	r0, 0x3f	; 63
     71c:	f8 94       	cli
     71e:	de bf       	out	0x3e, r29	; 62
     720:	0f be       	out	0x3f, r0	; 63
     722:	cd bf       	out	0x3d, r28	; 61
	//checks if the user and password is correct 
	u8 user[10];
	u8 pass[10];
	u8 flag=0;
     724:	19 82       	std	Y+1, r1	; 0x01
	LCD_writeStr("user=");
     726:	84 e9       	ldi	r24, 0x94	; 148
     728:	91 e0       	ldi	r25, 0x01	; 1
     72a:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <LCD_writeStr>
	userkeypadInput(user);
     72e:	ce 01       	movw	r24, r28
     730:	85 96       	adiw	r24, 0x25	; 37
     732:	0e 94 02 03 	call	0x604	; 0x604 <userkeypadInput>
	u8 correct=0, location=0;
     736:	1a 82       	std	Y+2, r1	; 0x02
     738:	1b 82       	std	Y+3, r1	; 0x03
	for (u8 i=11;i<100;i+=20)
     73a:	8b e0       	ldi	r24, 0x0B	; 11
     73c:	8c 83       	std	Y+4, r24	; 0x04
     73e:	ba c0       	rjmp	.+372    	; 0x8b4 <__stack+0x55>
	{
		if(EEPROM_readData(i)!=255)
     740:	8c 81       	ldd	r24, Y+4	; 0x04
     742:	88 2f       	mov	r24, r24
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	0e 94 6f 08 	call	0x10de	; 0x10de <EEPROM_readData>
     74a:	8f 3f       	cpi	r24, 0xFF	; 255
     74c:	09 f4       	brne	.+2      	; 0x750 <userkeypadCheck+0x42>
     74e:	ac c0       	rjmp	.+344    	; 0x8a8 <__stack+0x49>
		{
			for(u8 l=0,j=i; l<charCounter; j++,l++)
     750:	1d 82       	std	Y+5, r1	; 0x05
     752:	8c 81       	ldd	r24, Y+4	; 0x04
     754:	8e 83       	std	Y+6, r24	; 0x06
     756:	a2 c0       	rjmp	.+324    	; 0x89c <__stack+0x3d>
			{
				if (user[l]==EEPROM_readData(j))
     758:	8d 81       	ldd	r24, Y+5	; 0x05
     75a:	88 2f       	mov	r24, r24
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	9e 01       	movw	r18, r28
     760:	2b 5d       	subi	r18, 0xDB	; 219
     762:	3f 4f       	sbci	r19, 0xFF	; 255
     764:	82 0f       	add	r24, r18
     766:	93 1f       	adc	r25, r19
     768:	fc 01       	movw	r30, r24
     76a:	10 81       	ld	r17, Z
     76c:	8e 81       	ldd	r24, Y+6	; 0x06
     76e:	88 2f       	mov	r24, r24
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	0e 94 6f 08 	call	0x10de	; 0x10de <EEPROM_readData>
     776:	18 17       	cp	r17, r24
     778:	09 f0       	breq	.+2      	; 0x77c <userkeypadCheck+0x6e>
     77a:	89 c0       	rjmp	.+274    	; 0x88e <__stack+0x2f>
				{
					correct++;
     77c:	8a 81       	ldd	r24, Y+2	; 0x02
     77e:	8f 5f       	subi	r24, 0xFF	; 255
     780:	8a 83       	std	Y+2, r24	; 0x02
					if (correct==charCounter)
     782:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <charCounter>
     786:	9a 81       	ldd	r25, Y+2	; 0x02
     788:	98 17       	cp	r25, r24
     78a:	09 f0       	breq	.+2      	; 0x78e <userkeypadCheck+0x80>
     78c:	81 c0       	rjmp	.+258    	; 0x890 <__stack+0x31>
					{
						if(EEPROM_readData(j+1)==255)
     78e:	8e 81       	ldd	r24, Y+6	; 0x06
     790:	88 2f       	mov	r24, r24
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	01 96       	adiw	r24, 0x01	; 1
     796:	0e 94 6f 08 	call	0x10de	; 0x10de <EEPROM_readData>
     79a:	8f 3f       	cpi	r24, 0xFF	; 255
     79c:	09 f0       	breq	.+2      	; 0x7a0 <userkeypadCheck+0x92>
     79e:	78 c0       	rjmp	.+240    	; 0x890 <__stack+0x31>
						{
							location=i;
     7a0:	8c 81       	ldd	r24, Y+4	; 0x04
     7a2:	8b 83       	std	Y+3, r24	; 0x03
     7a4:	80 e0       	ldi	r24, 0x00	; 0
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	a6 e9       	ldi	r26, 0x96	; 150
     7aa:	b3 e4       	ldi	r27, 0x43	; 67
     7ac:	8d 87       	std	Y+13, r24	; 0x0d
     7ae:	9e 87       	std	Y+14, r25	; 0x0e
     7b0:	af 87       	std	Y+15, r26	; 0x0f
     7b2:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     7b4:	20 e0       	ldi	r18, 0x00	; 0
     7b6:	30 e0       	ldi	r19, 0x00	; 0
     7b8:	4a e7       	ldi	r20, 0x7A	; 122
     7ba:	55 e4       	ldi	r21, 0x45	; 69
     7bc:	6d 85       	ldd	r22, Y+13	; 0x0d
     7be:	7e 85       	ldd	r23, Y+14	; 0x0e
     7c0:	8f 85       	ldd	r24, Y+15	; 0x0f
     7c2:	98 89       	ldd	r25, Y+16	; 0x10
     7c4:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <__mulsf3>
     7c8:	dc 01       	movw	r26, r24
     7ca:	cb 01       	movw	r24, r22
     7cc:	89 8b       	std	Y+17, r24	; 0x11
     7ce:	9a 8b       	std	Y+18, r25	; 0x12
     7d0:	ab 8b       	std	Y+19, r26	; 0x13
     7d2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     7d4:	20 e0       	ldi	r18, 0x00	; 0
     7d6:	30 e0       	ldi	r19, 0x00	; 0
     7d8:	40 e8       	ldi	r20, 0x80	; 128
     7da:	5f e3       	ldi	r21, 0x3F	; 63
     7dc:	69 89       	ldd	r22, Y+17	; 0x11
     7de:	7a 89       	ldd	r23, Y+18	; 0x12
     7e0:	8b 89       	ldd	r24, Y+19	; 0x13
     7e2:	9c 89       	ldd	r25, Y+20	; 0x14
     7e4:	0e 94 40 15 	call	0x2a80	; 0x2a80 <__cmpsf2>
     7e8:	88 23       	and	r24, r24
     7ea:	2c f4       	brge	.+10     	; 0x7f6 <userkeypadCheck+0xe8>
		__ticks = 1;
     7ec:	81 e0       	ldi	r24, 0x01	; 1
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	9e 8b       	std	Y+22, r25	; 0x16
     7f2:	8d 8b       	std	Y+21, r24	; 0x15
     7f4:	3f c0       	rjmp	.+126    	; 0x874 <__stack+0x15>
	else if (__tmp > 65535)
     7f6:	20 e0       	ldi	r18, 0x00	; 0
     7f8:	3f ef       	ldi	r19, 0xFF	; 255
     7fa:	4f e7       	ldi	r20, 0x7F	; 127
     7fc:	57 e4       	ldi	r21, 0x47	; 71
     7fe:	69 89       	ldd	r22, Y+17	; 0x11
     800:	7a 89       	ldd	r23, Y+18	; 0x12
     802:	8b 89       	ldd	r24, Y+19	; 0x13
     804:	9c 89       	ldd	r25, Y+20	; 0x14
     806:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <__gesf2>
     80a:	18 16       	cp	r1, r24
     80c:	4c f5       	brge	.+82     	; 0x860 <__stack+0x1>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     80e:	20 e0       	ldi	r18, 0x00	; 0
     810:	30 e0       	ldi	r19, 0x00	; 0
     812:	40 e2       	ldi	r20, 0x20	; 32
     814:	51 e4       	ldi	r21, 0x41	; 65
     816:	6d 85       	ldd	r22, Y+13	; 0x0d
     818:	7e 85       	ldd	r23, Y+14	; 0x0e
     81a:	8f 85       	ldd	r24, Y+15	; 0x0f
     81c:	98 89       	ldd	r25, Y+16	; 0x10
     81e:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <__mulsf3>
     822:	dc 01       	movw	r26, r24
     824:	cb 01       	movw	r24, r22
     826:	bc 01       	movw	r22, r24
     828:	cd 01       	movw	r24, r26
     82a:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <__fixunssfsi>
     82e:	dc 01       	movw	r26, r24
     830:	cb 01       	movw	r24, r22
     832:	9e 8b       	std	Y+22, r25	; 0x16
     834:	8d 8b       	std	Y+21, r24	; 0x15
     836:	0f c0       	rjmp	.+30     	; 0x856 <__DATA_REGION_LENGTH__+0x56>
     838:	80 e9       	ldi	r24, 0x90	; 144
     83a:	91 e0       	ldi	r25, 0x01	; 1
     83c:	98 8f       	std	Y+24, r25	; 0x18
     83e:	8f 8b       	std	Y+23, r24	; 0x17
     840:	8f 89       	ldd	r24, Y+23	; 0x17
     842:	98 8d       	ldd	r25, Y+24	; 0x18
     844:	01 97       	sbiw	r24, 0x01	; 1
     846:	f1 f7       	brne	.-4      	; 0x844 <__DATA_REGION_LENGTH__+0x44>
     848:	98 8f       	std	Y+24, r25	; 0x18
     84a:	8f 8b       	std	Y+23, r24	; 0x17
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     84c:	8d 89       	ldd	r24, Y+21	; 0x15
     84e:	9e 89       	ldd	r25, Y+22	; 0x16
     850:	01 97       	sbiw	r24, 0x01	; 1
     852:	9e 8b       	std	Y+22, r25	; 0x16
     854:	8d 8b       	std	Y+21, r24	; 0x15
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     856:	8d 89       	ldd	r24, Y+21	; 0x15
     858:	9e 89       	ldd	r25, Y+22	; 0x16
     85a:	89 2b       	or	r24, r25
     85c:	69 f7       	brne	.-38     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
     85e:	14 c0       	rjmp	.+40     	; 0x888 <__stack+0x29>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     860:	69 89       	ldd	r22, Y+17	; 0x11
     862:	7a 89       	ldd	r23, Y+18	; 0x12
     864:	8b 89       	ldd	r24, Y+19	; 0x13
     866:	9c 89       	ldd	r25, Y+20	; 0x14
     868:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <__fixunssfsi>
     86c:	dc 01       	movw	r26, r24
     86e:	cb 01       	movw	r24, r22
     870:	9e 8b       	std	Y+22, r25	; 0x16
     872:	8d 8b       	std	Y+21, r24	; 0x15
     874:	8d 89       	ldd	r24, Y+21	; 0x15
     876:	9e 89       	ldd	r25, Y+22	; 0x16
     878:	9a 8f       	std	Y+26, r25	; 0x1a
     87a:	89 8f       	std	Y+25, r24	; 0x19
     87c:	89 8d       	ldd	r24, Y+25	; 0x19
     87e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     880:	01 97       	sbiw	r24, 0x01	; 1
     882:	f1 f7       	brne	.-4      	; 0x880 <__stack+0x21>
     884:	9a 8f       	std	Y+26, r25	; 0x1a
     886:	89 8f       	std	Y+25, r24	; 0x19
							_delay_ms(300);
							flag=1;
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	89 83       	std	Y+1, r24	; 0x01
							break;
     88c:	0d c0       	rjmp	.+26     	; 0x8a8 <__stack+0x49>
					}
				}
				else
				{
					
					correct=0;
     88e:	1a 82       	std	Y+2, r1	; 0x02
	u8 correct=0, location=0;
	for (u8 i=11;i<100;i+=20)
	{
		if(EEPROM_readData(i)!=255)
		{
			for(u8 l=0,j=i; l<charCounter; j++,l++)
     890:	8e 81       	ldd	r24, Y+6	; 0x06
     892:	8f 5f       	subi	r24, 0xFF	; 255
     894:	8e 83       	std	Y+6, r24	; 0x06
     896:	8d 81       	ldd	r24, Y+5	; 0x05
     898:	8f 5f       	subi	r24, 0xFF	; 255
     89a:	8d 83       	std	Y+5, r24	; 0x05
     89c:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <charCounter>
     8a0:	9d 81       	ldd	r25, Y+5	; 0x05
     8a2:	98 17       	cp	r25, r24
     8a4:	08 f4       	brcc	.+2      	; 0x8a8 <__stack+0x49>
     8a6:	58 cf       	rjmp	.-336    	; 0x758 <userkeypadCheck+0x4a>
					
					correct=0;
				}
			}
		}
		if(flag==1){break;}
     8a8:	89 81       	ldd	r24, Y+1	; 0x01
     8aa:	81 30       	cpi	r24, 0x01	; 1
     8ac:	41 f0       	breq	.+16     	; 0x8be <__stack+0x5f>
	u8 pass[10];
	u8 flag=0;
	LCD_writeStr("user=");
	userkeypadInput(user);
	u8 correct=0, location=0;
	for (u8 i=11;i<100;i+=20)
     8ae:	8c 81       	ldd	r24, Y+4	; 0x04
     8b0:	8c 5e       	subi	r24, 0xEC	; 236
     8b2:	8c 83       	std	Y+4, r24	; 0x04
     8b4:	8c 81       	ldd	r24, Y+4	; 0x04
     8b6:	84 36       	cpi	r24, 0x64	; 100
     8b8:	08 f4       	brcc	.+2      	; 0x8bc <__stack+0x5d>
     8ba:	42 cf       	rjmp	.-380    	; 0x740 <userkeypadCheck+0x32>
     8bc:	01 c0       	rjmp	.+2      	; 0x8c0 <__stack+0x61>
					
					correct=0;
				}
			}
		}
		if(flag==1){break;}
     8be:	00 00       	nop
	}
	if (location!=0)
     8c0:	8b 81       	ldd	r24, Y+3	; 0x03
     8c2:	88 23       	and	r24, r24
     8c4:	09 f4       	brne	.+2      	; 0x8c8 <__stack+0x69>
     8c6:	b9 c0       	rjmp	.+370    	; 0xa3a <__stack+0x1db>
	{
		LCD_goto(0,2);
     8c8:	62 e0       	ldi	r22, 0x02	; 2
     8ca:	80 e0       	ldi	r24, 0x00	; 0
     8cc:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <LCD_goto>
		LCD_writeStr("password=");
     8d0:	8a e9       	ldi	r24, 0x9A	; 154
     8d2:	91 e0       	ldi	r25, 0x01	; 1
     8d4:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <LCD_writeStr>
		userkeypadInput(pass);
     8d8:	ce 01       	movw	r24, r28
     8da:	8f 96       	adiw	r24, 0x2f	; 47
     8dc:	0e 94 02 03 	call	0x604	; 0x604 <userkeypadInput>
		location+=10;
     8e0:	8b 81       	ldd	r24, Y+3	; 0x03
     8e2:	86 5f       	subi	r24, 0xF6	; 246
     8e4:	8b 83       	std	Y+3, r24	; 0x03
		correct=0;
     8e6:	1a 82       	std	Y+2, r1	; 0x02
		for(u8 l=0,j=location; l<charCounter; j++,l++)
     8e8:	1f 82       	std	Y+7, r1	; 0x07
     8ea:	8b 81       	ldd	r24, Y+3	; 0x03
     8ec:	88 87       	std	Y+8, r24	; 0x08
     8ee:	9f c0       	rjmp	.+318    	; 0xa2e <__stack+0x1cf>
		{
			if (pass[l]==EEPROM_readData(j))
     8f0:	8f 81       	ldd	r24, Y+7	; 0x07
     8f2:	88 2f       	mov	r24, r24
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	9e 01       	movw	r18, r28
     8f8:	21 5d       	subi	r18, 0xD1	; 209
     8fa:	3f 4f       	sbci	r19, 0xFF	; 255
     8fc:	82 0f       	add	r24, r18
     8fe:	93 1f       	adc	r25, r19
     900:	fc 01       	movw	r30, r24
     902:	10 81       	ld	r17, Z
     904:	88 85       	ldd	r24, Y+8	; 0x08
     906:	88 2f       	mov	r24, r24
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	0e 94 6f 08 	call	0x10de	; 0x10de <EEPROM_readData>
     90e:	18 17       	cp	r17, r24
     910:	09 f0       	breq	.+2      	; 0x914 <__stack+0xb5>
     912:	86 c0       	rjmp	.+268    	; 0xa20 <__stack+0x1c1>
			{
				correct++;
     914:	8a 81       	ldd	r24, Y+2	; 0x02
     916:	8f 5f       	subi	r24, 0xFF	; 255
     918:	8a 83       	std	Y+2, r24	; 0x02
				if (correct==charCounter)
     91a:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <charCounter>
     91e:	9a 81       	ldd	r25, Y+2	; 0x02
     920:	98 17       	cp	r25, r24
     922:	09 f0       	breq	.+2      	; 0x926 <__stack+0xc7>
     924:	7e c0       	rjmp	.+252    	; 0xa22 <__stack+0x1c3>
				{
					if(EEPROM_readData(j+1)==255)
     926:	88 85       	ldd	r24, Y+8	; 0x08
     928:	88 2f       	mov	r24, r24
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	01 96       	adiw	r24, 0x01	; 1
     92e:	0e 94 6f 08 	call	0x10de	; 0x10de <EEPROM_readData>
     932:	8f 3f       	cpi	r24, 0xFF	; 255
     934:	09 f0       	breq	.+2      	; 0x938 <__stack+0xd9>
     936:	75 c0       	rjmp	.+234    	; 0xa22 <__stack+0x1c3>
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	a6 e9       	ldi	r26, 0x96	; 150
     93e:	b3 e4       	ldi	r27, 0x43	; 67
     940:	89 87       	std	Y+9, r24	; 0x09
     942:	9a 87       	std	Y+10, r25	; 0x0a
     944:	ab 87       	std	Y+11, r26	; 0x0b
     946:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     948:	20 e0       	ldi	r18, 0x00	; 0
     94a:	30 e0       	ldi	r19, 0x00	; 0
     94c:	4a e7       	ldi	r20, 0x7A	; 122
     94e:	55 e4       	ldi	r21, 0x45	; 69
     950:	69 85       	ldd	r22, Y+9	; 0x09
     952:	7a 85       	ldd	r23, Y+10	; 0x0a
     954:	8b 85       	ldd	r24, Y+11	; 0x0b
     956:	9c 85       	ldd	r25, Y+12	; 0x0c
     958:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <__mulsf3>
     95c:	dc 01       	movw	r26, r24
     95e:	cb 01       	movw	r24, r22
     960:	8b 8f       	std	Y+27, r24	; 0x1b
     962:	9c 8f       	std	Y+28, r25	; 0x1c
     964:	ad 8f       	std	Y+29, r26	; 0x1d
     966:	be 8f       	std	Y+30, r27	; 0x1e
	if (__tmp < 1.0)
     968:	20 e0       	ldi	r18, 0x00	; 0
     96a:	30 e0       	ldi	r19, 0x00	; 0
     96c:	40 e8       	ldi	r20, 0x80	; 128
     96e:	5f e3       	ldi	r21, 0x3F	; 63
     970:	6b 8d       	ldd	r22, Y+27	; 0x1b
     972:	7c 8d       	ldd	r23, Y+28	; 0x1c
     974:	8d 8d       	ldd	r24, Y+29	; 0x1d
     976:	9e 8d       	ldd	r25, Y+30	; 0x1e
     978:	0e 94 40 15 	call	0x2a80	; 0x2a80 <__cmpsf2>
     97c:	88 23       	and	r24, r24
     97e:	2c f4       	brge	.+10     	; 0x98a <__stack+0x12b>
		__ticks = 1;
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	98 a3       	std	Y+32, r25	; 0x20
     986:	8f 8f       	std	Y+31, r24	; 0x1f
     988:	3f c0       	rjmp	.+126    	; 0xa08 <__stack+0x1a9>
	else if (__tmp > 65535)
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	3f ef       	ldi	r19, 0xFF	; 255
     98e:	4f e7       	ldi	r20, 0x7F	; 127
     990:	57 e4       	ldi	r21, 0x47	; 71
     992:	6b 8d       	ldd	r22, Y+27	; 0x1b
     994:	7c 8d       	ldd	r23, Y+28	; 0x1c
     996:	8d 8d       	ldd	r24, Y+29	; 0x1d
     998:	9e 8d       	ldd	r25, Y+30	; 0x1e
     99a:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <__gesf2>
     99e:	18 16       	cp	r1, r24
     9a0:	4c f5       	brge	.+82     	; 0x9f4 <__stack+0x195>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9a2:	20 e0       	ldi	r18, 0x00	; 0
     9a4:	30 e0       	ldi	r19, 0x00	; 0
     9a6:	40 e2       	ldi	r20, 0x20	; 32
     9a8:	51 e4       	ldi	r21, 0x41	; 65
     9aa:	69 85       	ldd	r22, Y+9	; 0x09
     9ac:	7a 85       	ldd	r23, Y+10	; 0x0a
     9ae:	8b 85       	ldd	r24, Y+11	; 0x0b
     9b0:	9c 85       	ldd	r25, Y+12	; 0x0c
     9b2:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <__mulsf3>
     9b6:	dc 01       	movw	r26, r24
     9b8:	cb 01       	movw	r24, r22
     9ba:	bc 01       	movw	r22, r24
     9bc:	cd 01       	movw	r24, r26
     9be:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <__fixunssfsi>
     9c2:	dc 01       	movw	r26, r24
     9c4:	cb 01       	movw	r24, r22
     9c6:	98 a3       	std	Y+32, r25	; 0x20
     9c8:	8f 8f       	std	Y+31, r24	; 0x1f
     9ca:	0f c0       	rjmp	.+30     	; 0x9ea <__stack+0x18b>
     9cc:	80 e9       	ldi	r24, 0x90	; 144
     9ce:	91 e0       	ldi	r25, 0x01	; 1
     9d0:	9a a3       	std	Y+34, r25	; 0x22
     9d2:	89 a3       	std	Y+33, r24	; 0x21
     9d4:	89 a1       	ldd	r24, Y+33	; 0x21
     9d6:	9a a1       	ldd	r25, Y+34	; 0x22
     9d8:	01 97       	sbiw	r24, 0x01	; 1
     9da:	f1 f7       	brne	.-4      	; 0x9d8 <__stack+0x179>
     9dc:	9a a3       	std	Y+34, r25	; 0x22
     9de:	89 a3       	std	Y+33, r24	; 0x21
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9e0:	8f 8d       	ldd	r24, Y+31	; 0x1f
     9e2:	98 a1       	ldd	r25, Y+32	; 0x20
     9e4:	01 97       	sbiw	r24, 0x01	; 1
     9e6:	98 a3       	std	Y+32, r25	; 0x20
     9e8:	8f 8f       	std	Y+31, r24	; 0x1f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9ea:	8f 8d       	ldd	r24, Y+31	; 0x1f
     9ec:	98 a1       	ldd	r25, Y+32	; 0x20
     9ee:	89 2b       	or	r24, r25
     9f0:	69 f7       	brne	.-38     	; 0x9cc <__stack+0x16d>
     9f2:	14 c0       	rjmp	.+40     	; 0xa1c <__stack+0x1bd>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9f4:	6b 8d       	ldd	r22, Y+27	; 0x1b
     9f6:	7c 8d       	ldd	r23, Y+28	; 0x1c
     9f8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     9fa:	9e 8d       	ldd	r25, Y+30	; 0x1e
     9fc:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <__fixunssfsi>
     a00:	dc 01       	movw	r26, r24
     a02:	cb 01       	movw	r24, r22
     a04:	98 a3       	std	Y+32, r25	; 0x20
     a06:	8f 8f       	std	Y+31, r24	; 0x1f
     a08:	8f 8d       	ldd	r24, Y+31	; 0x1f
     a0a:	98 a1       	ldd	r25, Y+32	; 0x20
     a0c:	9c a3       	std	Y+36, r25	; 0x24
     a0e:	8b a3       	std	Y+35, r24	; 0x23
     a10:	8b a1       	ldd	r24, Y+35	; 0x23
     a12:	9c a1       	ldd	r25, Y+36	; 0x24
     a14:	01 97       	sbiw	r24, 0x01	; 1
     a16:	f1 f7       	brne	.-4      	; 0xa14 <__stack+0x1b5>
     a18:	9c a3       	std	Y+36, r25	; 0x24
     a1a:	8b a3       	std	Y+35, r24	; 0x23
					{
						_delay_ms(300);
						return 1;
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	0e c0       	rjmp	.+28     	; 0xa3c <__stack+0x1dd>
					}
				}
			}
			else{correct=0;}
     a20:	1a 82       	std	Y+2, r1	; 0x02
		LCD_goto(0,2);
		LCD_writeStr("password=");
		userkeypadInput(pass);
		location+=10;
		correct=0;
		for(u8 l=0,j=location; l<charCounter; j++,l++)
     a22:	88 85       	ldd	r24, Y+8	; 0x08
     a24:	8f 5f       	subi	r24, 0xFF	; 255
     a26:	88 87       	std	Y+8, r24	; 0x08
     a28:	8f 81       	ldd	r24, Y+7	; 0x07
     a2a:	8f 5f       	subi	r24, 0xFF	; 255
     a2c:	8f 83       	std	Y+7, r24	; 0x07
     a2e:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <charCounter>
     a32:	9f 81       	ldd	r25, Y+7	; 0x07
     a34:	98 17       	cp	r25, r24
     a36:	08 f4       	brcc	.+2      	; 0xa3a <__stack+0x1db>
     a38:	5b cf       	rjmp	.-330    	; 0x8f0 <__stack+0x91>
				}
			}
			else{correct=0;}
		}
	}
	return 0;
     a3a:	80 e0       	ldi	r24, 0x00	; 0
}
     a3c:	e8 96       	adiw	r28, 0x38	; 56
     a3e:	0f b6       	in	r0, 0x3f	; 63
     a40:	f8 94       	cli
     a42:	de bf       	out	0x3e, r29	; 62
     a44:	0f be       	out	0x3f, r0	; 63
     a46:	cd bf       	out	0x3d, r28	; 61
     a48:	df 91       	pop	r29
     a4a:	cf 91       	pop	r28
     a4c:	1f 91       	pop	r17
     a4e:	08 95       	ret

00000a50 <userCheck>:
u8 userCheck()
{
     a50:	1f 93       	push	r17
     a52:	cf 93       	push	r28
     a54:	df 93       	push	r29
     a56:	cd b7       	in	r28, 0x3d	; 61
     a58:	de b7       	in	r29, 0x3e	; 62
     a5a:	aa 97       	sbiw	r28, 0x2a	; 42
     a5c:	0f b6       	in	r0, 0x3f	; 63
     a5e:	f8 94       	cli
     a60:	de bf       	out	0x3e, r29	; 62
     a62:	0f be       	out	0x3f, r0	; 63
     a64:	cd bf       	out	0x3d, r28	; 61
	//checks if the user and password is correct 
		u8 user[10];
		u8 pass[10];
		UART_sendString("user=");
     a66:	84 e9       	ldi	r24, 0x94	; 148
     a68:	91 e0       	ldi	r25, 0x01	; 1
     a6a:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <UART_sendString>
		userInput(user);
     a6e:	ce 01       	movw	r24, r28
     a70:	47 96       	adiw	r24, 0x17	; 23
     a72:	0e 94 47 03 	call	0x68e	; 0x68e <userInput>
		u8 correct=0,flag=0;
     a76:	19 82       	std	Y+1, r1	; 0x01
     a78:	1a 82       	std	Y+2, r1	; 0x02
		u8 location;
		location=0;
     a7a:	1b 82       	std	Y+3, r1	; 0x03
		    for (u8 i=101;i<200;i+=20)
     a7c:	85 e6       	ldi	r24, 0x65	; 101
     a7e:	8c 83       	std	Y+4, r24	; 0x04
     a80:	b8 c0       	rjmp	.+368    	; 0xbf2 <userCheck+0x1a2>
		    {
			    if(EEPROM_readData(i)!=255)
     a82:	8c 81       	ldd	r24, Y+4	; 0x04
     a84:	88 2f       	mov	r24, r24
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	0e 94 6f 08 	call	0x10de	; 0x10de <EEPROM_readData>
     a8c:	8f 3f       	cpi	r24, 0xFF	; 255
     a8e:	09 f4       	brne	.+2      	; 0xa92 <userCheck+0x42>
     a90:	aa c0       	rjmp	.+340    	; 0xbe6 <userCheck+0x196>
			    {
				    for(u8 l=0,j=i; l<10; j++,l++)
     a92:	1d 82       	std	Y+5, r1	; 0x05
     a94:	8c 81       	ldd	r24, Y+4	; 0x04
     a96:	8e 83       	std	Y+6, r24	; 0x06
     a98:	a2 c0       	rjmp	.+324    	; 0xbde <userCheck+0x18e>
				    {
					    if (user[l]==EEPROM_readData(j))
     a9a:	8d 81       	ldd	r24, Y+5	; 0x05
     a9c:	88 2f       	mov	r24, r24
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	9e 01       	movw	r18, r28
     aa2:	29 5e       	subi	r18, 0xE9	; 233
     aa4:	3f 4f       	sbci	r19, 0xFF	; 255
     aa6:	82 0f       	add	r24, r18
     aa8:	93 1f       	adc	r25, r19
     aaa:	fc 01       	movw	r30, r24
     aac:	10 81       	ld	r17, Z
     aae:	8e 81       	ldd	r24, Y+6	; 0x06
     ab0:	88 2f       	mov	r24, r24
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	0e 94 6f 08 	call	0x10de	; 0x10de <EEPROM_readData>
     ab8:	18 17       	cp	r17, r24
     aba:	09 f0       	breq	.+2      	; 0xabe <userCheck+0x6e>
     abc:	89 c0       	rjmp	.+274    	; 0xbd0 <userCheck+0x180>
					    {
						    correct++;
     abe:	89 81       	ldd	r24, Y+1	; 0x01
     ac0:	8f 5f       	subi	r24, 0xFF	; 255
     ac2:	89 83       	std	Y+1, r24	; 0x01
						    if (correct==charCounter)
     ac4:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <charCounter>
     ac8:	99 81       	ldd	r25, Y+1	; 0x01
     aca:	98 17       	cp	r25, r24
     acc:	09 f0       	breq	.+2      	; 0xad0 <userCheck+0x80>
     ace:	81 c0       	rjmp	.+258    	; 0xbd2 <userCheck+0x182>
						    {
							   if(EEPROM_readData(j+1)==255)
     ad0:	8e 81       	ldd	r24, Y+6	; 0x06
     ad2:	88 2f       	mov	r24, r24
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	01 96       	adiw	r24, 0x01	; 1
     ad8:	0e 94 6f 08 	call	0x10de	; 0x10de <EEPROM_readData>
     adc:	8f 3f       	cpi	r24, 0xFF	; 255
     ade:	09 f0       	breq	.+2      	; 0xae2 <userCheck+0x92>
     ae0:	78 c0       	rjmp	.+240    	; 0xbd2 <userCheck+0x182>
							   {
								   location=i;
     ae2:	8c 81       	ldd	r24, Y+4	; 0x04
     ae4:	8b 83       	std	Y+3, r24	; 0x03
     ae6:	80 e0       	ldi	r24, 0x00	; 0
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	a6 e9       	ldi	r26, 0x96	; 150
     aec:	b3 e4       	ldi	r27, 0x43	; 67
     aee:	89 87       	std	Y+9, r24	; 0x09
     af0:	9a 87       	std	Y+10, r25	; 0x0a
     af2:	ab 87       	std	Y+11, r26	; 0x0b
     af4:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	4a e7       	ldi	r20, 0x7A	; 122
     afc:	55 e4       	ldi	r21, 0x45	; 69
     afe:	69 85       	ldd	r22, Y+9	; 0x09
     b00:	7a 85       	ldd	r23, Y+10	; 0x0a
     b02:	8b 85       	ldd	r24, Y+11	; 0x0b
     b04:	9c 85       	ldd	r25, Y+12	; 0x0c
     b06:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <__mulsf3>
     b0a:	dc 01       	movw	r26, r24
     b0c:	cb 01       	movw	r24, r22
     b0e:	8d 87       	std	Y+13, r24	; 0x0d
     b10:	9e 87       	std	Y+14, r25	; 0x0e
     b12:	af 87       	std	Y+15, r26	; 0x0f
     b14:	b8 8b       	std	Y+16, r27	; 0x10
	if (__tmp < 1.0)
     b16:	20 e0       	ldi	r18, 0x00	; 0
     b18:	30 e0       	ldi	r19, 0x00	; 0
     b1a:	40 e8       	ldi	r20, 0x80	; 128
     b1c:	5f e3       	ldi	r21, 0x3F	; 63
     b1e:	6d 85       	ldd	r22, Y+13	; 0x0d
     b20:	7e 85       	ldd	r23, Y+14	; 0x0e
     b22:	8f 85       	ldd	r24, Y+15	; 0x0f
     b24:	98 89       	ldd	r25, Y+16	; 0x10
     b26:	0e 94 40 15 	call	0x2a80	; 0x2a80 <__cmpsf2>
     b2a:	88 23       	and	r24, r24
     b2c:	2c f4       	brge	.+10     	; 0xb38 <userCheck+0xe8>
		__ticks = 1;
     b2e:	81 e0       	ldi	r24, 0x01	; 1
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	9a 8b       	std	Y+18, r25	; 0x12
     b34:	89 8b       	std	Y+17, r24	; 0x11
     b36:	3f c0       	rjmp	.+126    	; 0xbb6 <userCheck+0x166>
	else if (__tmp > 65535)
     b38:	20 e0       	ldi	r18, 0x00	; 0
     b3a:	3f ef       	ldi	r19, 0xFF	; 255
     b3c:	4f e7       	ldi	r20, 0x7F	; 127
     b3e:	57 e4       	ldi	r21, 0x47	; 71
     b40:	6d 85       	ldd	r22, Y+13	; 0x0d
     b42:	7e 85       	ldd	r23, Y+14	; 0x0e
     b44:	8f 85       	ldd	r24, Y+15	; 0x0f
     b46:	98 89       	ldd	r25, Y+16	; 0x10
     b48:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <__gesf2>
     b4c:	18 16       	cp	r1, r24
     b4e:	4c f5       	brge	.+82     	; 0xba2 <userCheck+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b50:	20 e0       	ldi	r18, 0x00	; 0
     b52:	30 e0       	ldi	r19, 0x00	; 0
     b54:	40 e2       	ldi	r20, 0x20	; 32
     b56:	51 e4       	ldi	r21, 0x41	; 65
     b58:	69 85       	ldd	r22, Y+9	; 0x09
     b5a:	7a 85       	ldd	r23, Y+10	; 0x0a
     b5c:	8b 85       	ldd	r24, Y+11	; 0x0b
     b5e:	9c 85       	ldd	r25, Y+12	; 0x0c
     b60:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <__mulsf3>
     b64:	dc 01       	movw	r26, r24
     b66:	cb 01       	movw	r24, r22
     b68:	bc 01       	movw	r22, r24
     b6a:	cd 01       	movw	r24, r26
     b6c:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <__fixunssfsi>
     b70:	dc 01       	movw	r26, r24
     b72:	cb 01       	movw	r24, r22
     b74:	9a 8b       	std	Y+18, r25	; 0x12
     b76:	89 8b       	std	Y+17, r24	; 0x11
     b78:	0f c0       	rjmp	.+30     	; 0xb98 <userCheck+0x148>
     b7a:	80 e9       	ldi	r24, 0x90	; 144
     b7c:	91 e0       	ldi	r25, 0x01	; 1
     b7e:	9c 8b       	std	Y+20, r25	; 0x14
     b80:	8b 8b       	std	Y+19, r24	; 0x13
     b82:	8b 89       	ldd	r24, Y+19	; 0x13
     b84:	9c 89       	ldd	r25, Y+20	; 0x14
     b86:	01 97       	sbiw	r24, 0x01	; 1
     b88:	f1 f7       	brne	.-4      	; 0xb86 <userCheck+0x136>
     b8a:	9c 8b       	std	Y+20, r25	; 0x14
     b8c:	8b 8b       	std	Y+19, r24	; 0x13
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b8e:	89 89       	ldd	r24, Y+17	; 0x11
     b90:	9a 89       	ldd	r25, Y+18	; 0x12
     b92:	01 97       	sbiw	r24, 0x01	; 1
     b94:	9a 8b       	std	Y+18, r25	; 0x12
     b96:	89 8b       	std	Y+17, r24	; 0x11
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b98:	89 89       	ldd	r24, Y+17	; 0x11
     b9a:	9a 89       	ldd	r25, Y+18	; 0x12
     b9c:	89 2b       	or	r24, r25
     b9e:	69 f7       	brne	.-38     	; 0xb7a <userCheck+0x12a>
     ba0:	14 c0       	rjmp	.+40     	; 0xbca <userCheck+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ba2:	6d 85       	ldd	r22, Y+13	; 0x0d
     ba4:	7e 85       	ldd	r23, Y+14	; 0x0e
     ba6:	8f 85       	ldd	r24, Y+15	; 0x0f
     ba8:	98 89       	ldd	r25, Y+16	; 0x10
     baa:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <__fixunssfsi>
     bae:	dc 01       	movw	r26, r24
     bb0:	cb 01       	movw	r24, r22
     bb2:	9a 8b       	std	Y+18, r25	; 0x12
     bb4:	89 8b       	std	Y+17, r24	; 0x11
     bb6:	89 89       	ldd	r24, Y+17	; 0x11
     bb8:	9a 89       	ldd	r25, Y+18	; 0x12
     bba:	9e 8b       	std	Y+22, r25	; 0x16
     bbc:	8d 8b       	std	Y+21, r24	; 0x15
     bbe:	8d 89       	ldd	r24, Y+21	; 0x15
     bc0:	9e 89       	ldd	r25, Y+22	; 0x16
     bc2:	01 97       	sbiw	r24, 0x01	; 1
     bc4:	f1 f7       	brne	.-4      	; 0xbc2 <userCheck+0x172>
     bc6:	9e 8b       	std	Y+22, r25	; 0x16
     bc8:	8d 8b       	std	Y+21, r24	; 0x15
								   _delay_ms(300);
								   flag=1;
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	8a 83       	std	Y+2, r24	; 0x02
								   break;
     bce:	0b c0       	rjmp	.+22     	; 0xbe6 <userCheck+0x196>
							   }
						    }
					    }
					    else
					    {
						    correct=0;
     bd0:	19 82       	std	Y+1, r1	; 0x01
		location=0;
		    for (u8 i=101;i<200;i+=20)
		    {
			    if(EEPROM_readData(i)!=255)
			    {
				    for(u8 l=0,j=i; l<10; j++,l++)
     bd2:	8e 81       	ldd	r24, Y+6	; 0x06
     bd4:	8f 5f       	subi	r24, 0xFF	; 255
     bd6:	8e 83       	std	Y+6, r24	; 0x06
     bd8:	8d 81       	ldd	r24, Y+5	; 0x05
     bda:	8f 5f       	subi	r24, 0xFF	; 255
     bdc:	8d 83       	std	Y+5, r24	; 0x05
     bde:	8d 81       	ldd	r24, Y+5	; 0x05
     be0:	8a 30       	cpi	r24, 0x0A	; 10
     be2:	08 f4       	brcc	.+2      	; 0xbe6 <userCheck+0x196>
     be4:	5a cf       	rjmp	.-332    	; 0xa9a <userCheck+0x4a>
					    {
						    correct=0;
					    }
				    }
			    }
				if(flag==1){break;}
     be6:	8a 81       	ldd	r24, Y+2	; 0x02
     be8:	81 30       	cpi	r24, 0x01	; 1
     bea:	41 f0       	breq	.+16     	; 0xbfc <userCheck+0x1ac>
		UART_sendString("user=");
		userInput(user);
		u8 correct=0,flag=0;
		u8 location;
		location=0;
		    for (u8 i=101;i<200;i+=20)
     bec:	8c 81       	ldd	r24, Y+4	; 0x04
     bee:	8c 5e       	subi	r24, 0xEC	; 236
     bf0:	8c 83       	std	Y+4, r24	; 0x04
     bf2:	8c 81       	ldd	r24, Y+4	; 0x04
     bf4:	88 3c       	cpi	r24, 0xC8	; 200
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <userCheck+0x1aa>
     bf8:	44 cf       	rjmp	.-376    	; 0xa82 <userCheck+0x32>
     bfa:	01 c0       	rjmp	.+2      	; 0xbfe <userCheck+0x1ae>
					    {
						    correct=0;
					    }
				    }
			    }
				if(flag==1){break;}
     bfc:	00 00       	nop
		    }
		if (location!=0)
     bfe:	8b 81       	ldd	r24, Y+3	; 0x03
     c00:	88 23       	and	r24, r24
     c02:	e1 f1       	breq	.+120    	; 0xc7c <userCheck+0x22c>
		{
			UART_sendString("password=");
     c04:	8a e9       	ldi	r24, 0x9A	; 154
     c06:	91 e0       	ldi	r25, 0x01	; 1
     c08:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <UART_sendString>
			userInput(pass);
     c0c:	ce 01       	movw	r24, r28
     c0e:	81 96       	adiw	r24, 0x21	; 33
     c10:	0e 94 47 03 	call	0x68e	; 0x68e <userInput>
			location+=10;
     c14:	8b 81       	ldd	r24, Y+3	; 0x03
     c16:	86 5f       	subi	r24, 0xF6	; 246
     c18:	8b 83       	std	Y+3, r24	; 0x03
			correct=0;
     c1a:	19 82       	std	Y+1, r1	; 0x01
			for(u8 l=0,j=location; l<10; j++,l++)
     c1c:	1f 82       	std	Y+7, r1	; 0x07
     c1e:	8b 81       	ldd	r24, Y+3	; 0x03
     c20:	88 87       	std	Y+8, r24	; 0x08
     c22:	29 c0       	rjmp	.+82     	; 0xc76 <userCheck+0x226>
			{
				if (pass[l]==EEPROM_readData(j))
     c24:	8f 81       	ldd	r24, Y+7	; 0x07
     c26:	88 2f       	mov	r24, r24
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	9e 01       	movw	r18, r28
     c2c:	2f 5d       	subi	r18, 0xDF	; 223
     c2e:	3f 4f       	sbci	r19, 0xFF	; 255
     c30:	82 0f       	add	r24, r18
     c32:	93 1f       	adc	r25, r19
     c34:	fc 01       	movw	r30, r24
     c36:	10 81       	ld	r17, Z
     c38:	88 85       	ldd	r24, Y+8	; 0x08
     c3a:	88 2f       	mov	r24, r24
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	0e 94 6f 08 	call	0x10de	; 0x10de <EEPROM_readData>
     c42:	18 17       	cp	r17, r24
     c44:	91 f4       	brne	.+36     	; 0xc6a <userCheck+0x21a>
				{
					correct++;
     c46:	89 81       	ldd	r24, Y+1	; 0x01
     c48:	8f 5f       	subi	r24, 0xFF	; 255
     c4a:	89 83       	std	Y+1, r24	; 0x01
					if (correct==charCounter)
     c4c:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <charCounter>
     c50:	99 81       	ldd	r25, Y+1	; 0x01
     c52:	98 17       	cp	r25, r24
     c54:	51 f4       	brne	.+20     	; 0xc6a <userCheck+0x21a>
					{
						if(EEPROM_readData(j+1)==255)
     c56:	88 85       	ldd	r24, Y+8	; 0x08
     c58:	88 2f       	mov	r24, r24
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	01 96       	adiw	r24, 0x01	; 1
     c5e:	0e 94 6f 08 	call	0x10de	; 0x10de <EEPROM_readData>
     c62:	8f 3f       	cpi	r24, 0xFF	; 255
     c64:	11 f4       	brne	.+4      	; 0xc6a <userCheck+0x21a>
						{
						return 1;
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <userCheck+0x22e>
		{
			UART_sendString("password=");
			userInput(pass);
			location+=10;
			correct=0;
			for(u8 l=0,j=location; l<10; j++,l++)
     c6a:	88 85       	ldd	r24, Y+8	; 0x08
     c6c:	8f 5f       	subi	r24, 0xFF	; 255
     c6e:	88 87       	std	Y+8, r24	; 0x08
     c70:	8f 81       	ldd	r24, Y+7	; 0x07
     c72:	8f 5f       	subi	r24, 0xFF	; 255
     c74:	8f 83       	std	Y+7, r24	; 0x07
     c76:	8f 81       	ldd	r24, Y+7	; 0x07
     c78:	8a 30       	cpi	r24, 0x0A	; 10
     c7a:	a0 f2       	brcs	.-88     	; 0xc24 <userCheck+0x1d4>
						}
					}
				}
			}
		}
			return 0;
     c7c:	80 e0       	ldi	r24, 0x00	; 0
}
     c7e:	aa 96       	adiw	r28, 0x2a	; 42
     c80:	0f b6       	in	r0, 0x3f	; 63
     c82:	f8 94       	cli
     c84:	de bf       	out	0x3e, r29	; 62
     c86:	0f be       	out	0x3f, r0	; 63
     c88:	cd bf       	out	0x3d, r28	; 61
     c8a:	df 91       	pop	r29
     c8c:	cf 91       	pop	r28
     c8e:	1f 91       	pop	r17
     c90:	08 95       	ret

00000c92 <ext_fun>:

void ext_fun()
{
     c92:	cf 93       	push	r28
     c94:	df 93       	push	r29
     c96:	cd b7       	in	r28, 0x3d	; 61
     c98:	de b7       	in	r29, 0x3e	; 62
     c9a:	a9 97       	sbiw	r28, 0x29	; 41
     c9c:	0f b6       	in	r0, 0x3f	; 63
     c9e:	f8 94       	cli
     ca0:	de bf       	out	0x3e, r29	; 62
     ca2:	0f be       	out	0x3f, r0	; 63
     ca4:	cd bf       	out	0x3d, r28	; 61
	//external interrupt that activates the keypad mode
	DIO_setPinDir(DIO_PINA2,DIO_OUTPUT);
     ca6:	61 e0       	ldi	r22, 0x01	; 1
     ca8:	82 e0       	ldi	r24, 0x02	; 2
     caa:	0e 94 56 10 	call	0x20ac	; 0x20ac <DIO_setPinDir>
	u8 incorrect,flag=1,flag1=1;
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	89 83       	std	Y+1, r24	; 0x01
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	8a 83       	std	Y+2, r24	; 0x02
	while (flag==1)
     cb6:	05 c2       	rjmp	.+1034   	; 0x10c2 <ext_fun+0x430>
	{
		u8 userchoice[10];
		incorrect=0;
     cb8:	1b 82       	std	Y+3, r1	; 0x03
		if (incorrect!=3)
     cba:	8b 81       	ldd	r24, Y+3	; 0x03
     cbc:	83 30       	cpi	r24, 0x03	; 3
     cbe:	09 f4       	brne	.+2      	; 0xcc2 <ext_fun+0x30>
     cc0:	85 c1       	rjmp	.+778    	; 0xfcc <ext_fun+0x33a>
		{
			if (userkeypadCheck())
     cc2:	0e 94 87 03 	call	0x70e	; 0x70e <userkeypadCheck>
     cc6:	88 23       	and	r24, r24
     cc8:	09 f4       	brne	.+2      	; 0xccc <ext_fun+0x3a>
     cca:	71 c1       	rjmp	.+738    	; 0xfae <ext_fun+0x31c>
			{
				incorrect=0;
     ccc:	1b 82       	std	Y+3, r1	; 0x03
				LCD_clearDis();
     cce:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <LCD_clearDis>
				LCD_writeStr("Welcome");
     cd2:	84 ea       	ldi	r24, 0xA4	; 164
     cd4:	91 e0       	ldi	r25, 0x01	; 1
     cd6:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <LCD_writeStr>
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	aa ef       	ldi	r26, 0xFA	; 250
     ce0:	b3 e4       	ldi	r27, 0x43	; 67
     ce2:	88 87       	std	Y+8, r24	; 0x08
     ce4:	99 87       	std	Y+9, r25	; 0x09
     ce6:	aa 87       	std	Y+10, r26	; 0x0a
     ce8:	bb 87       	std	Y+11, r27	; 0x0b

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     cea:	20 e0       	ldi	r18, 0x00	; 0
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	4a e7       	ldi	r20, 0x7A	; 122
     cf0:	55 e4       	ldi	r21, 0x45	; 69
     cf2:	68 85       	ldd	r22, Y+8	; 0x08
     cf4:	79 85       	ldd	r23, Y+9	; 0x09
     cf6:	8a 85       	ldd	r24, Y+10	; 0x0a
     cf8:	9b 85       	ldd	r25, Y+11	; 0x0b
     cfa:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <__mulsf3>
     cfe:	dc 01       	movw	r26, r24
     d00:	cb 01       	movw	r24, r22
     d02:	8c 87       	std	Y+12, r24	; 0x0c
     d04:	9d 87       	std	Y+13, r25	; 0x0d
     d06:	ae 87       	std	Y+14, r26	; 0x0e
     d08:	bf 87       	std	Y+15, r27	; 0x0f
	if (__tmp < 1.0)
     d0a:	20 e0       	ldi	r18, 0x00	; 0
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	40 e8       	ldi	r20, 0x80	; 128
     d10:	5f e3       	ldi	r21, 0x3F	; 63
     d12:	6c 85       	ldd	r22, Y+12	; 0x0c
     d14:	7d 85       	ldd	r23, Y+13	; 0x0d
     d16:	8e 85       	ldd	r24, Y+14	; 0x0e
     d18:	9f 85       	ldd	r25, Y+15	; 0x0f
     d1a:	0e 94 40 15 	call	0x2a80	; 0x2a80 <__cmpsf2>
     d1e:	88 23       	and	r24, r24
     d20:	2c f4       	brge	.+10     	; 0xd2c <ext_fun+0x9a>
		__ticks = 1;
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	99 8b       	std	Y+17, r25	; 0x11
     d28:	88 8b       	std	Y+16, r24	; 0x10
     d2a:	3f c0       	rjmp	.+126    	; 0xdaa <ext_fun+0x118>
	else if (__tmp > 65535)
     d2c:	20 e0       	ldi	r18, 0x00	; 0
     d2e:	3f ef       	ldi	r19, 0xFF	; 255
     d30:	4f e7       	ldi	r20, 0x7F	; 127
     d32:	57 e4       	ldi	r21, 0x47	; 71
     d34:	6c 85       	ldd	r22, Y+12	; 0x0c
     d36:	7d 85       	ldd	r23, Y+13	; 0x0d
     d38:	8e 85       	ldd	r24, Y+14	; 0x0e
     d3a:	9f 85       	ldd	r25, Y+15	; 0x0f
     d3c:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <__gesf2>
     d40:	18 16       	cp	r1, r24
     d42:	4c f5       	brge	.+82     	; 0xd96 <ext_fun+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d44:	20 e0       	ldi	r18, 0x00	; 0
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	40 e2       	ldi	r20, 0x20	; 32
     d4a:	51 e4       	ldi	r21, 0x41	; 65
     d4c:	68 85       	ldd	r22, Y+8	; 0x08
     d4e:	79 85       	ldd	r23, Y+9	; 0x09
     d50:	8a 85       	ldd	r24, Y+10	; 0x0a
     d52:	9b 85       	ldd	r25, Y+11	; 0x0b
     d54:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <__mulsf3>
     d58:	dc 01       	movw	r26, r24
     d5a:	cb 01       	movw	r24, r22
     d5c:	bc 01       	movw	r22, r24
     d5e:	cd 01       	movw	r24, r26
     d60:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <__fixunssfsi>
     d64:	dc 01       	movw	r26, r24
     d66:	cb 01       	movw	r24, r22
     d68:	99 8b       	std	Y+17, r25	; 0x11
     d6a:	88 8b       	std	Y+16, r24	; 0x10
     d6c:	0f c0       	rjmp	.+30     	; 0xd8c <ext_fun+0xfa>
     d6e:	80 e9       	ldi	r24, 0x90	; 144
     d70:	91 e0       	ldi	r25, 0x01	; 1
     d72:	9b 8b       	std	Y+19, r25	; 0x13
     d74:	8a 8b       	std	Y+18, r24	; 0x12
     d76:	8a 89       	ldd	r24, Y+18	; 0x12
     d78:	9b 89       	ldd	r25, Y+19	; 0x13
     d7a:	01 97       	sbiw	r24, 0x01	; 1
     d7c:	f1 f7       	brne	.-4      	; 0xd7a <ext_fun+0xe8>
     d7e:	9b 8b       	std	Y+19, r25	; 0x13
     d80:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d82:	88 89       	ldd	r24, Y+16	; 0x10
     d84:	99 89       	ldd	r25, Y+17	; 0x11
     d86:	01 97       	sbiw	r24, 0x01	; 1
     d88:	99 8b       	std	Y+17, r25	; 0x11
     d8a:	88 8b       	std	Y+16, r24	; 0x10
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d8c:	88 89       	ldd	r24, Y+16	; 0x10
     d8e:	99 89       	ldd	r25, Y+17	; 0x11
     d90:	89 2b       	or	r24, r25
     d92:	69 f7       	brne	.-38     	; 0xd6e <ext_fun+0xdc>
     d94:	14 c0       	rjmp	.+40     	; 0xdbe <ext_fun+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d96:	6c 85       	ldd	r22, Y+12	; 0x0c
     d98:	7d 85       	ldd	r23, Y+13	; 0x0d
     d9a:	8e 85       	ldd	r24, Y+14	; 0x0e
     d9c:	9f 85       	ldd	r25, Y+15	; 0x0f
     d9e:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <__fixunssfsi>
     da2:	dc 01       	movw	r26, r24
     da4:	cb 01       	movw	r24, r22
     da6:	99 8b       	std	Y+17, r25	; 0x11
     da8:	88 8b       	std	Y+16, r24	; 0x10
     daa:	88 89       	ldd	r24, Y+16	; 0x10
     dac:	99 89       	ldd	r25, Y+17	; 0x11
     dae:	9d 8b       	std	Y+21, r25	; 0x15
     db0:	8c 8b       	std	Y+20, r24	; 0x14
     db2:	8c 89       	ldd	r24, Y+20	; 0x14
     db4:	9d 89       	ldd	r25, Y+21	; 0x15
     db6:	01 97       	sbiw	r24, 0x01	; 1
     db8:	f1 f7       	brne	.-4      	; 0xdb6 <ext_fun+0x124>
     dba:	9d 8b       	std	Y+21, r25	; 0x15
     dbc:	8c 8b       	std	Y+20, r24	; 0x14
				_delay_ms(500);
				LCD_clearDis();
     dbe:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <LCD_clearDis>
				
				while(flag1==1)
     dc2:	f0 c0       	rjmp	.+480    	; 0xfa4 <ext_fun+0x312>
				{
					//LCD_writeStr("p f 1to6 to led contro");
					userkeypadInput(userchoice);
     dc4:	ce 01       	movw	r24, r28
     dc6:	80 96       	adiw	r24, 0x20	; 32
     dc8:	0e 94 02 03 	call	0x604	; 0x604 <userkeypadInput>
					if((!(strcmp(userchoice,"1-1"))))
     dcc:	ce 01       	movw	r24, r28
     dce:	80 96       	adiw	r24, 0x20	; 32
     dd0:	6c ea       	ldi	r22, 0xAC	; 172
     dd2:	71 e0       	ldi	r23, 0x01	; 1
     dd4:	0e 94 98 16 	call	0x2d30	; 0x2d30 <strcmp>
     dd8:	89 2b       	or	r24, r25
     dda:	31 f4       	brne	.+12     	; 0xde8 <ext_fun+0x156>
					{
						SPI_Write('g');
     ddc:	87 e6       	ldi	r24, 0x67	; 103
     dde:	0e 94 32 13 	call	0x2664	; 0x2664 <SPI_Write>
						LCD_clearDis();
     de2:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <LCD_clearDis>
     de6:	de c0       	rjmp	.+444    	; 0xfa4 <ext_fun+0x312>
						
					}
					else if((!(strcmp(userchoice,"2-1"))))
     de8:	ce 01       	movw	r24, r28
     dea:	80 96       	adiw	r24, 0x20	; 32
     dec:	60 eb       	ldi	r22, 0xB0	; 176
     dee:	71 e0       	ldi	r23, 0x01	; 1
     df0:	0e 94 98 16 	call	0x2d30	; 0x2d30 <strcmp>
     df4:	89 2b       	or	r24, r25
     df6:	31 f4       	brne	.+12     	; 0xe04 <ext_fun+0x172>
					{
						SPI_Write('h');
     df8:	88 e6       	ldi	r24, 0x68	; 104
     dfa:	0e 94 32 13 	call	0x2664	; 0x2664 <SPI_Write>
						LCD_clearDis();
     dfe:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <LCD_clearDis>
     e02:	d0 c0       	rjmp	.+416    	; 0xfa4 <ext_fun+0x312>
					}
					else if((!(strcmp(userchoice,"3-1"))))
     e04:	ce 01       	movw	r24, r28
     e06:	80 96       	adiw	r24, 0x20	; 32
     e08:	64 eb       	ldi	r22, 0xB4	; 180
     e0a:	71 e0       	ldi	r23, 0x01	; 1
     e0c:	0e 94 98 16 	call	0x2d30	; 0x2d30 <strcmp>
     e10:	89 2b       	or	r24, r25
     e12:	31 f4       	brne	.+12     	; 0xe20 <ext_fun+0x18e>
					{
						SPI_Write('i');
     e14:	89 e6       	ldi	r24, 0x69	; 105
     e16:	0e 94 32 13 	call	0x2664	; 0x2664 <SPI_Write>
						LCD_clearDis();
     e1a:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <LCD_clearDis>
     e1e:	c2 c0       	rjmp	.+388    	; 0xfa4 <ext_fun+0x312>
					}
					else if((!(strcmp(userchoice,"4-1"))))
     e20:	ce 01       	movw	r24, r28
     e22:	80 96       	adiw	r24, 0x20	; 32
     e24:	68 eb       	ldi	r22, 0xB8	; 184
     e26:	71 e0       	ldi	r23, 0x01	; 1
     e28:	0e 94 98 16 	call	0x2d30	; 0x2d30 <strcmp>
     e2c:	89 2b       	or	r24, r25
     e2e:	31 f4       	brne	.+12     	; 0xe3c <ext_fun+0x1aa>
					{
						SPI_Write('j');
     e30:	8a e6       	ldi	r24, 0x6A	; 106
     e32:	0e 94 32 13 	call	0x2664	; 0x2664 <SPI_Write>
						LCD_clearDis();
     e36:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <LCD_clearDis>
     e3a:	b4 c0       	rjmp	.+360    	; 0xfa4 <ext_fun+0x312>
					}
					else if((!(strcmp(userchoice,"5-1"))))
     e3c:	ce 01       	movw	r24, r28
     e3e:	80 96       	adiw	r24, 0x20	; 32
     e40:	6c eb       	ldi	r22, 0xBC	; 188
     e42:	71 e0       	ldi	r23, 0x01	; 1
     e44:	0e 94 98 16 	call	0x2d30	; 0x2d30 <strcmp>
     e48:	89 2b       	or	r24, r25
     e4a:	31 f4       	brne	.+12     	; 0xe58 <ext_fun+0x1c6>
					{
						SPI_Write('k');
     e4c:	8b e6       	ldi	r24, 0x6B	; 107
     e4e:	0e 94 32 13 	call	0x2664	; 0x2664 <SPI_Write>
						LCD_clearDis();
     e52:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <LCD_clearDis>
     e56:	a6 c0       	rjmp	.+332    	; 0xfa4 <ext_fun+0x312>
					}
					else if((!(strcmp(userchoice,"1-0"))))
     e58:	ce 01       	movw	r24, r28
     e5a:	80 96       	adiw	r24, 0x20	; 32
     e5c:	60 ec       	ldi	r22, 0xC0	; 192
     e5e:	71 e0       	ldi	r23, 0x01	; 1
     e60:	0e 94 98 16 	call	0x2d30	; 0x2d30 <strcmp>
     e64:	89 2b       	or	r24, r25
     e66:	31 f4       	brne	.+12     	; 0xe74 <ext_fun+0x1e2>
					{
						SPI_Write('l');
     e68:	8c e6       	ldi	r24, 0x6C	; 108
     e6a:	0e 94 32 13 	call	0x2664	; 0x2664 <SPI_Write>
						LCD_clearDis();
     e6e:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <LCD_clearDis>
     e72:	98 c0       	rjmp	.+304    	; 0xfa4 <ext_fun+0x312>
					}
					else if((!(strcmp(userchoice,"2-0"))))
     e74:	ce 01       	movw	r24, r28
     e76:	80 96       	adiw	r24, 0x20	; 32
     e78:	64 ec       	ldi	r22, 0xC4	; 196
     e7a:	71 e0       	ldi	r23, 0x01	; 1
     e7c:	0e 94 98 16 	call	0x2d30	; 0x2d30 <strcmp>
     e80:	89 2b       	or	r24, r25
     e82:	31 f4       	brne	.+12     	; 0xe90 <ext_fun+0x1fe>
					{
						SPI_Write('m');
     e84:	8d e6       	ldi	r24, 0x6D	; 109
     e86:	0e 94 32 13 	call	0x2664	; 0x2664 <SPI_Write>
						LCD_clearDis();
     e8a:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <LCD_clearDis>
     e8e:	8a c0       	rjmp	.+276    	; 0xfa4 <ext_fun+0x312>
					}
					else if((!(strcmp(userchoice,"3-0"))))
     e90:	ce 01       	movw	r24, r28
     e92:	80 96       	adiw	r24, 0x20	; 32
     e94:	68 ec       	ldi	r22, 0xC8	; 200
     e96:	71 e0       	ldi	r23, 0x01	; 1
     e98:	0e 94 98 16 	call	0x2d30	; 0x2d30 <strcmp>
     e9c:	89 2b       	or	r24, r25
     e9e:	31 f4       	brne	.+12     	; 0xeac <ext_fun+0x21a>
					{
						SPI_Write('n');
     ea0:	8e e6       	ldi	r24, 0x6E	; 110
     ea2:	0e 94 32 13 	call	0x2664	; 0x2664 <SPI_Write>
						LCD_clearDis();
     ea6:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <LCD_clearDis>
     eaa:	7c c0       	rjmp	.+248    	; 0xfa4 <ext_fun+0x312>
					}
					else if((!(strcmp(userchoice,"4-0"))))
     eac:	ce 01       	movw	r24, r28
     eae:	80 96       	adiw	r24, 0x20	; 32
     eb0:	6c ec       	ldi	r22, 0xCC	; 204
     eb2:	71 e0       	ldi	r23, 0x01	; 1
     eb4:	0e 94 98 16 	call	0x2d30	; 0x2d30 <strcmp>
     eb8:	89 2b       	or	r24, r25
     eba:	31 f4       	brne	.+12     	; 0xec8 <ext_fun+0x236>
					{
						SPI_Write('o');
     ebc:	8f e6       	ldi	r24, 0x6F	; 111
     ebe:	0e 94 32 13 	call	0x2664	; 0x2664 <SPI_Write>
						LCD_clearDis();
     ec2:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <LCD_clearDis>
     ec6:	6e c0       	rjmp	.+220    	; 0xfa4 <ext_fun+0x312>
					}
					else if((!(strcmp(userchoice,"5-0"))))
     ec8:	ce 01       	movw	r24, r28
     eca:	80 96       	adiw	r24, 0x20	; 32
     ecc:	60 ed       	ldi	r22, 0xD0	; 208
     ece:	71 e0       	ldi	r23, 0x01	; 1
     ed0:	0e 94 98 16 	call	0x2d30	; 0x2d30 <strcmp>
     ed4:	89 2b       	or	r24, r25
     ed6:	31 f4       	brne	.+12     	; 0xee4 <ext_fun+0x252>
					{
						SPI_Write('p');
     ed8:	80 e7       	ldi	r24, 0x70	; 112
     eda:	0e 94 32 13 	call	0x2664	; 0x2664 <SPI_Write>
						LCD_clearDis();
     ede:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <LCD_clearDis>
     ee2:	60 c0       	rjmp	.+192    	; 0xfa4 <ext_fun+0x312>
					}
					
					else if((!(strcmp(userchoice,"6-0"))))
     ee4:	ce 01       	movw	r24, r28
     ee6:	80 96       	adiw	r24, 0x20	; 32
     ee8:	64 ed       	ldi	r22, 0xD4	; 212
     eea:	71 e0       	ldi	r23, 0x01	; 1
     eec:	0e 94 98 16 	call	0x2d30	; 0x2d30 <strcmp>
     ef0:	89 2b       	or	r24, r25
     ef2:	31 f4       	brne	.+12     	; 0xf00 <ext_fun+0x26e>
					{
						SPI_Write('a');
     ef4:	81 e6       	ldi	r24, 0x61	; 97
     ef6:	0e 94 32 13 	call	0x2664	; 0x2664 <SPI_Write>
						LCD_clearDis();
     efa:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <LCD_clearDis>
     efe:	52 c0       	rjmp	.+164    	; 0xfa4 <ext_fun+0x312>
					}
					else if((!(strcmp(userchoice,"6-1"))))
     f00:	ce 01       	movw	r24, r28
     f02:	80 96       	adiw	r24, 0x20	; 32
     f04:	68 ed       	ldi	r22, 0xD8	; 216
     f06:	71 e0       	ldi	r23, 0x01	; 1
     f08:	0e 94 98 16 	call	0x2d30	; 0x2d30 <strcmp>
     f0c:	89 2b       	or	r24, r25
     f0e:	31 f4       	brne	.+12     	; 0xf1c <ext_fun+0x28a>
					{
						SPI_Write('b');
     f10:	82 e6       	ldi	r24, 0x62	; 98
     f12:	0e 94 32 13 	call	0x2664	; 0x2664 <SPI_Write>
						LCD_clearDis();
     f16:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <LCD_clearDis>
     f1a:	44 c0       	rjmp	.+136    	; 0xfa4 <ext_fun+0x312>
					}
					else if((!(strcmp(userchoice,"6-3"))))
     f1c:	ce 01       	movw	r24, r28
     f1e:	80 96       	adiw	r24, 0x20	; 32
     f20:	6c ed       	ldi	r22, 0xDC	; 220
     f22:	71 e0       	ldi	r23, 0x01	; 1
     f24:	0e 94 98 16 	call	0x2d30	; 0x2d30 <strcmp>
     f28:	89 2b       	or	r24, r25
     f2a:	31 f4       	brne	.+12     	; 0xf38 <ext_fun+0x2a6>
					{
						SPI_Write('d');
     f2c:	84 e6       	ldi	r24, 0x64	; 100
     f2e:	0e 94 32 13 	call	0x2664	; 0x2664 <SPI_Write>
						LCD_clearDis();
     f32:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <LCD_clearDis>
     f36:	36 c0       	rjmp	.+108    	; 0xfa4 <ext_fun+0x312>
					}
					else if((!(strcmp(userchoice,"6-4"))))
     f38:	ce 01       	movw	r24, r28
     f3a:	80 96       	adiw	r24, 0x20	; 32
     f3c:	60 ee       	ldi	r22, 0xE0	; 224
     f3e:	71 e0       	ldi	r23, 0x01	; 1
     f40:	0e 94 98 16 	call	0x2d30	; 0x2d30 <strcmp>
     f44:	89 2b       	or	r24, r25
     f46:	31 f4       	brne	.+12     	; 0xf54 <ext_fun+0x2c2>
					{
						SPI_Write('e');
     f48:	85 e6       	ldi	r24, 0x65	; 101
     f4a:	0e 94 32 13 	call	0x2664	; 0x2664 <SPI_Write>
						LCD_clearDis();
     f4e:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <LCD_clearDis>
     f52:	28 c0       	rjmp	.+80     	; 0xfa4 <ext_fun+0x312>
					}
					else if((!(strcmp(userchoice,"6-5"))))
     f54:	ce 01       	movw	r24, r28
     f56:	80 96       	adiw	r24, 0x20	; 32
     f58:	64 ee       	ldi	r22, 0xE4	; 228
     f5a:	71 e0       	ldi	r23, 0x01	; 1
     f5c:	0e 94 98 16 	call	0x2d30	; 0x2d30 <strcmp>
     f60:	89 2b       	or	r24, r25
     f62:	31 f4       	brne	.+12     	; 0xf70 <ext_fun+0x2de>
					{
						SPI_Write('f');
     f64:	86 e6       	ldi	r24, 0x66	; 102
     f66:	0e 94 32 13 	call	0x2664	; 0x2664 <SPI_Write>
						LCD_clearDis();
     f6a:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <LCD_clearDis>
     f6e:	1a c0       	rjmp	.+52     	; 0xfa4 <ext_fun+0x312>
					}
					else if((!(strcmp(userchoice,"6-2"))))
     f70:	ce 01       	movw	r24, r28
     f72:	80 96       	adiw	r24, 0x20	; 32
     f74:	68 ee       	ldi	r22, 0xE8	; 232
     f76:	71 e0       	ldi	r23, 0x01	; 1
     f78:	0e 94 98 16 	call	0x2d30	; 0x2d30 <strcmp>
     f7c:	89 2b       	or	r24, r25
     f7e:	31 f4       	brne	.+12     	; 0xf8c <ext_fun+0x2fa>
					{
						SPI_Write('c');
     f80:	83 e6       	ldi	r24, 0x63	; 99
     f82:	0e 94 32 13 	call	0x2664	; 0x2664 <SPI_Write>
						LCD_clearDis();
     f86:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <LCD_clearDis>
     f8a:	0c c0       	rjmp	.+24     	; 0xfa4 <ext_fun+0x312>
					}
					else if((!(strcmp(userchoice,"0"))))
     f8c:	ce 01       	movw	r24, r28
     f8e:	80 96       	adiw	r24, 0x20	; 32
     f90:	6c ee       	ldi	r22, 0xEC	; 236
     f92:	71 e0       	ldi	r23, 0x01	; 1
     f94:	0e 94 98 16 	call	0x2d30	; 0x2d30 <strcmp>
     f98:	89 2b       	or	r24, r25
     f9a:	21 f4       	brne	.+8      	; 0xfa4 <ext_fun+0x312>
					{
						flag=0;
     f9c:	19 82       	std	Y+1, r1	; 0x01
						flag1=0;
     f9e:	1a 82       	std	Y+2, r1	; 0x02
						LCD_clearDis();
     fa0:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <LCD_clearDis>
				LCD_clearDis();
				LCD_writeStr("Welcome");
				_delay_ms(500);
				LCD_clearDis();
				
				while(flag1==1)
     fa4:	8a 81       	ldd	r24, Y+2	; 0x02
     fa6:	81 30       	cpi	r24, 0x01	; 1
     fa8:	09 f4       	brne	.+2      	; 0xfac <ext_fun+0x31a>
     faa:	0c cf       	rjmp	.-488    	; 0xdc4 <ext_fun+0x132>
     fac:	8a c0       	rjmp	.+276    	; 0x10c2 <ext_fun+0x430>
					}
				}


			}
			else if(!userkeypadCheck())
     fae:	0e 94 87 03 	call	0x70e	; 0x70e <userkeypadCheck>
     fb2:	88 23       	and	r24, r24
     fb4:	09 f0       	breq	.+2      	; 0xfb8 <ext_fun+0x326>
     fb6:	85 c0       	rjmp	.+266    	; 0x10c2 <ext_fun+0x430>
			{
				LCD_clearDis();
     fb8:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <LCD_clearDis>
				LCD_writeStr("error");
     fbc:	8e ee       	ldi	r24, 0xEE	; 238
     fbe:	91 e0       	ldi	r25, 0x01	; 1
     fc0:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <LCD_writeStr>
				incorrect++;
     fc4:	8b 81       	ldd	r24, Y+3	; 0x03
     fc6:	8f 5f       	subi	r24, 0xFF	; 255
     fc8:	8b 83       	std	Y+3, r24	; 0x03
     fca:	7b c0       	rjmp	.+246    	; 0x10c2 <ext_fun+0x430>
			}
		}
		else
		{
			DIO_setPinValue(DIO_PINA2,DIO_HIGH);
     fcc:	61 e0       	ldi	r22, 0x01	; 1
     fce:	82 e0       	ldi	r24, 0x02	; 2
     fd0:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <DIO_setPinValue>
     fd4:	80 e0       	ldi	r24, 0x00	; 0
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	aa ef       	ldi	r26, 0xFA	; 250
     fda:	b4 e4       	ldi	r27, 0x44	; 68
     fdc:	8c 83       	std	Y+4, r24	; 0x04
     fde:	9d 83       	std	Y+5, r25	; 0x05
     fe0:	ae 83       	std	Y+6, r26	; 0x06
     fe2:	bf 83       	std	Y+7, r27	; 0x07

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     fe4:	20 e0       	ldi	r18, 0x00	; 0
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	4a e7       	ldi	r20, 0x7A	; 122
     fea:	55 e4       	ldi	r21, 0x45	; 69
     fec:	6c 81       	ldd	r22, Y+4	; 0x04
     fee:	7d 81       	ldd	r23, Y+5	; 0x05
     ff0:	8e 81       	ldd	r24, Y+6	; 0x06
     ff2:	9f 81       	ldd	r25, Y+7	; 0x07
     ff4:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <__mulsf3>
     ff8:	dc 01       	movw	r26, r24
     ffa:	cb 01       	movw	r24, r22
     ffc:	8e 8b       	std	Y+22, r24	; 0x16
     ffe:	9f 8b       	std	Y+23, r25	; 0x17
    1000:	a8 8f       	std	Y+24, r26	; 0x18
    1002:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1004:	20 e0       	ldi	r18, 0x00	; 0
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	40 e8       	ldi	r20, 0x80	; 128
    100a:	5f e3       	ldi	r21, 0x3F	; 63
    100c:	6e 89       	ldd	r22, Y+22	; 0x16
    100e:	7f 89       	ldd	r23, Y+23	; 0x17
    1010:	88 8d       	ldd	r24, Y+24	; 0x18
    1012:	99 8d       	ldd	r25, Y+25	; 0x19
    1014:	0e 94 40 15 	call	0x2a80	; 0x2a80 <__cmpsf2>
    1018:	88 23       	and	r24, r24
    101a:	2c f4       	brge	.+10     	; 0x1026 <ext_fun+0x394>
		__ticks = 1;
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	9b 8f       	std	Y+27, r25	; 0x1b
    1022:	8a 8f       	std	Y+26, r24	; 0x1a
    1024:	3f c0       	rjmp	.+126    	; 0x10a4 <ext_fun+0x412>
	else if (__tmp > 65535)
    1026:	20 e0       	ldi	r18, 0x00	; 0
    1028:	3f ef       	ldi	r19, 0xFF	; 255
    102a:	4f e7       	ldi	r20, 0x7F	; 127
    102c:	57 e4       	ldi	r21, 0x47	; 71
    102e:	6e 89       	ldd	r22, Y+22	; 0x16
    1030:	7f 89       	ldd	r23, Y+23	; 0x17
    1032:	88 8d       	ldd	r24, Y+24	; 0x18
    1034:	99 8d       	ldd	r25, Y+25	; 0x19
    1036:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <__gesf2>
    103a:	18 16       	cp	r1, r24
    103c:	4c f5       	brge	.+82     	; 0x1090 <ext_fun+0x3fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    103e:	20 e0       	ldi	r18, 0x00	; 0
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	40 e2       	ldi	r20, 0x20	; 32
    1044:	51 e4       	ldi	r21, 0x41	; 65
    1046:	6c 81       	ldd	r22, Y+4	; 0x04
    1048:	7d 81       	ldd	r23, Y+5	; 0x05
    104a:	8e 81       	ldd	r24, Y+6	; 0x06
    104c:	9f 81       	ldd	r25, Y+7	; 0x07
    104e:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <__mulsf3>
    1052:	dc 01       	movw	r26, r24
    1054:	cb 01       	movw	r24, r22
    1056:	bc 01       	movw	r22, r24
    1058:	cd 01       	movw	r24, r26
    105a:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <__fixunssfsi>
    105e:	dc 01       	movw	r26, r24
    1060:	cb 01       	movw	r24, r22
    1062:	9b 8f       	std	Y+27, r25	; 0x1b
    1064:	8a 8f       	std	Y+26, r24	; 0x1a
    1066:	0f c0       	rjmp	.+30     	; 0x1086 <ext_fun+0x3f4>
    1068:	80 e9       	ldi	r24, 0x90	; 144
    106a:	91 e0       	ldi	r25, 0x01	; 1
    106c:	9d 8f       	std	Y+29, r25	; 0x1d
    106e:	8c 8f       	std	Y+28, r24	; 0x1c
    1070:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1072:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1074:	01 97       	sbiw	r24, 0x01	; 1
    1076:	f1 f7       	brne	.-4      	; 0x1074 <ext_fun+0x3e2>
    1078:	9d 8f       	std	Y+29, r25	; 0x1d
    107a:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    107c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    107e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1080:	01 97       	sbiw	r24, 0x01	; 1
    1082:	9b 8f       	std	Y+27, r25	; 0x1b
    1084:	8a 8f       	std	Y+26, r24	; 0x1a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1086:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1088:	9b 8d       	ldd	r25, Y+27	; 0x1b
    108a:	89 2b       	or	r24, r25
    108c:	69 f7       	brne	.-38     	; 0x1068 <ext_fun+0x3d6>
    108e:	14 c0       	rjmp	.+40     	; 0x10b8 <ext_fun+0x426>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1090:	6e 89       	ldd	r22, Y+22	; 0x16
    1092:	7f 89       	ldd	r23, Y+23	; 0x17
    1094:	88 8d       	ldd	r24, Y+24	; 0x18
    1096:	99 8d       	ldd	r25, Y+25	; 0x19
    1098:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <__fixunssfsi>
    109c:	dc 01       	movw	r26, r24
    109e:	cb 01       	movw	r24, r22
    10a0:	9b 8f       	std	Y+27, r25	; 0x1b
    10a2:	8a 8f       	std	Y+26, r24	; 0x1a
    10a4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    10a6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    10a8:	9f 8f       	std	Y+31, r25	; 0x1f
    10aa:	8e 8f       	std	Y+30, r24	; 0x1e
    10ac:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10ae:	9f 8d       	ldd	r25, Y+31	; 0x1f
    10b0:	01 97       	sbiw	r24, 0x01	; 1
    10b2:	f1 f7       	brne	.-4      	; 0x10b0 <ext_fun+0x41e>
    10b4:	9f 8f       	std	Y+31, r25	; 0x1f
    10b6:	8e 8f       	std	Y+30, r24	; 0x1e
			_delay_ms(2000);
			DIO_setPinValue(DIO_PINA2,DIO_LOW);
    10b8:	60 e0       	ldi	r22, 0x00	; 0
    10ba:	82 e0       	ldi	r24, 0x02	; 2
    10bc:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <DIO_setPinValue>
			incorrect=0;
    10c0:	1b 82       	std	Y+3, r1	; 0x03
void ext_fun()
{
	//external interrupt that activates the keypad mode
	DIO_setPinDir(DIO_PINA2,DIO_OUTPUT);
	u8 incorrect,flag=1,flag1=1;
	while (flag==1)
    10c2:	89 81       	ldd	r24, Y+1	; 0x01
    10c4:	81 30       	cpi	r24, 0x01	; 1
    10c6:	09 f4       	brne	.+2      	; 0x10ca <ext_fun+0x438>
    10c8:	f7 cd       	rjmp	.-1042   	; 0xcb8 <ext_fun+0x26>
			_delay_ms(2000);
			DIO_setPinValue(DIO_PINA2,DIO_LOW);
			incorrect=0;
		}
	}
    10ca:	00 00       	nop
    10cc:	a9 96       	adiw	r28, 0x29	; 41
    10ce:	0f b6       	in	r0, 0x3f	; 63
    10d0:	f8 94       	cli
    10d2:	de bf       	out	0x3e, r29	; 62
    10d4:	0f be       	out	0x3f, r0	; 63
    10d6:	cd bf       	out	0x3d, r28	; 61
    10d8:	df 91       	pop	r29
    10da:	cf 91       	pop	r28
    10dc:	08 95       	ret

000010de <EEPROM_readData>:
	
	//send stop
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
}
u8 EEPROM_readData(u16 location)
{
    10de:	cf 93       	push	r28
    10e0:	df 93       	push	r29
    10e2:	cd b7       	in	r28, 0x3d	; 61
    10e4:	de b7       	in	r29, 0x3e	; 62
    10e6:	27 97       	sbiw	r28, 0x07	; 7
    10e8:	0f b6       	in	r0, 0x3f	; 63
    10ea:	f8 94       	cli
    10ec:	de bf       	out	0x3e, r29	; 62
    10ee:	0f be       	out	0x3f, r0	; 63
    10f0:	cd bf       	out	0x3d, r28	; 61
    10f2:	9f 83       	std	Y+7, r25	; 0x07
    10f4:	8e 83       	std	Y+6, r24	; 0x06
	/////dummy write/////
	//send start
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    10f6:	86 e5       	ldi	r24, 0x56	; 86
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	24 ea       	ldi	r18, 0xA4	; 164
    10fc:	fc 01       	movw	r30, r24
    10fe:	20 83       	st	Z, r18
	while( GET_BIT(TWCR,TWINT) ==0 );
    1100:	00 00       	nop
    1102:	86 e5       	ldi	r24, 0x56	; 86
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	fc 01       	movw	r30, r24
    1108:	80 81       	ld	r24, Z
    110a:	88 1f       	adc	r24, r24
    110c:	88 27       	eor	r24, r24
    110e:	88 1f       	adc	r24, r24
    1110:	88 2f       	mov	r24, r24
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	81 70       	andi	r24, 0x01	; 1
    1116:	99 27       	eor	r25, r25
    1118:	89 2b       	or	r24, r25
    111a:	99 f3       	breq	.-26     	; 0x1102 <EEPROM_readData+0x24>
	
	//address(1010)_3bitLocation_w
	u16 x = location & (0b11100000000);
    111c:	8e 81       	ldd	r24, Y+6	; 0x06
    111e:	9f 81       	ldd	r25, Y+7	; 0x07
    1120:	88 27       	eor	r24, r24
    1122:	97 70       	andi	r25, 0x07	; 7
    1124:	9a 83       	std	Y+2, r25	; 0x02
    1126:	89 83       	std	Y+1, r24	; 0x01
	u8 y = x>>7;
    1128:	89 81       	ldd	r24, Y+1	; 0x01
    112a:	9a 81       	ldd	r25, Y+2	; 0x02
    112c:	88 0f       	add	r24, r24
    112e:	89 2f       	mov	r24, r25
    1130:	88 1f       	adc	r24, r24
    1132:	99 0b       	sbc	r25, r25
    1134:	91 95       	neg	r25
    1136:	8b 83       	std	Y+3, r24	; 0x03
	u8 result  = y | 0b10100000;
    1138:	8b 81       	ldd	r24, Y+3	; 0x03
    113a:	80 6a       	ori	r24, 0xA0	; 160
    113c:	8c 83       	std	Y+4, r24	; 0x04
	TWDR = result;
    113e:	83 e2       	ldi	r24, 0x23	; 35
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	2c 81       	ldd	r18, Y+4	; 0x04
    1144:	fc 01       	movw	r30, r24
    1146:	20 83       	st	Z, r18
	
	TWCR = (1<<TWINT) | (1<<TWEN);
    1148:	86 e5       	ldi	r24, 0x56	; 86
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	24 e8       	ldi	r18, 0x84	; 132
    114e:	fc 01       	movw	r30, r24
    1150:	20 83       	st	Z, r18
	while( GET_BIT(TWCR,TWINT) ==0 );
    1152:	00 00       	nop
    1154:	86 e5       	ldi	r24, 0x56	; 86
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	fc 01       	movw	r30, r24
    115a:	80 81       	ld	r24, Z
    115c:	88 1f       	adc	r24, r24
    115e:	88 27       	eor	r24, r24
    1160:	88 1f       	adc	r24, r24
    1162:	88 2f       	mov	r24, r24
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	81 70       	andi	r24, 0x01	; 1
    1168:	99 27       	eor	r25, r25
    116a:	89 2b       	or	r24, r25
    116c:	99 f3       	breq	.-26     	; 0x1154 <EEPROM_readData+0x76>
	
	//8bitLocation
	TWDR = (u8)location;
    116e:	83 e2       	ldi	r24, 0x23	; 35
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	2e 81       	ldd	r18, Y+6	; 0x06
    1174:	fc 01       	movw	r30, r24
    1176:	20 83       	st	Z, r18
	TWCR = (1<<TWINT) | (1<<TWEN);
    1178:	86 e5       	ldi	r24, 0x56	; 86
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	24 e8       	ldi	r18, 0x84	; 132
    117e:	fc 01       	movw	r30, r24
    1180:	20 83       	st	Z, r18
	while( GET_BIT(TWCR,TWINT) ==0 );
    1182:	00 00       	nop
    1184:	86 e5       	ldi	r24, 0x56	; 86
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	fc 01       	movw	r30, r24
    118a:	80 81       	ld	r24, Z
    118c:	88 1f       	adc	r24, r24
    118e:	88 27       	eor	r24, r24
    1190:	88 1f       	adc	r24, r24
    1192:	88 2f       	mov	r24, r24
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	81 70       	andi	r24, 0x01	; 1
    1198:	99 27       	eor	r25, r25
    119a:	89 2b       	or	r24, r25
    119c:	99 f3       	breq	.-26     	; 0x1184 <EEPROM_readData+0xa6>
	
	//send start
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    119e:	86 e5       	ldi	r24, 0x56	; 86
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	24 ea       	ldi	r18, 0xA4	; 164
    11a4:	fc 01       	movw	r30, r24
    11a6:	20 83       	st	Z, r18
	while( GET_BIT(TWCR,TWINT) ==0 );
    11a8:	00 00       	nop
    11aa:	86 e5       	ldi	r24, 0x56	; 86
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	fc 01       	movw	r30, r24
    11b0:	80 81       	ld	r24, Z
    11b2:	88 1f       	adc	r24, r24
    11b4:	88 27       	eor	r24, r24
    11b6:	88 1f       	adc	r24, r24
    11b8:	88 2f       	mov	r24, r24
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	81 70       	andi	r24, 0x01	; 1
    11be:	99 27       	eor	r25, r25
    11c0:	89 2b       	or	r24, r25
    11c2:	99 f3       	breq	.-26     	; 0x11aa <EEPROM_readData+0xcc>
	
	//address(1010_3bitLocation_r
	x = location & (0b11100000000);
    11c4:	8e 81       	ldd	r24, Y+6	; 0x06
    11c6:	9f 81       	ldd	r25, Y+7	; 0x07
    11c8:	88 27       	eor	r24, r24
    11ca:	97 70       	andi	r25, 0x07	; 7
    11cc:	9a 83       	std	Y+2, r25	; 0x02
    11ce:	89 83       	std	Y+1, r24	; 0x01
	y = x>>7;
    11d0:	89 81       	ldd	r24, Y+1	; 0x01
    11d2:	9a 81       	ldd	r25, Y+2	; 0x02
    11d4:	88 0f       	add	r24, r24
    11d6:	89 2f       	mov	r24, r25
    11d8:	88 1f       	adc	r24, r24
    11da:	99 0b       	sbc	r25, r25
    11dc:	91 95       	neg	r25
    11de:	8b 83       	std	Y+3, r24	; 0x03
	result  = y | 0b10100001;
    11e0:	8b 81       	ldd	r24, Y+3	; 0x03
    11e2:	81 6a       	ori	r24, 0xA1	; 161
    11e4:	8c 83       	std	Y+4, r24	; 0x04
	TWDR = result;
    11e6:	83 e2       	ldi	r24, 0x23	; 35
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	2c 81       	ldd	r18, Y+4	; 0x04
    11ec:	fc 01       	movw	r30, r24
    11ee:	20 83       	st	Z, r18
	TWCR = (1<<TWINT) | (1<<TWEN);
    11f0:	86 e5       	ldi	r24, 0x56	; 86
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	24 e8       	ldi	r18, 0x84	; 132
    11f6:	fc 01       	movw	r30, r24
    11f8:	20 83       	st	Z, r18
	while( GET_BIT(TWCR,TWINT) ==0 );
    11fa:	00 00       	nop
    11fc:	86 e5       	ldi	r24, 0x56	; 86
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	fc 01       	movw	r30, r24
    1202:	80 81       	ld	r24, Z
    1204:	88 1f       	adc	r24, r24
    1206:	88 27       	eor	r24, r24
    1208:	88 1f       	adc	r24, r24
    120a:	88 2f       	mov	r24, r24
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	81 70       	andi	r24, 0x01	; 1
    1210:	99 27       	eor	r25, r25
    1212:	89 2b       	or	r24, r25
    1214:	99 f3       	breq	.-26     	; 0x11fc <EEPROM_readData+0x11e>
	
	//read data -> NACK
	TWCR = (1<<TWINT) | (1<<TWEN);
    1216:	86 e5       	ldi	r24, 0x56	; 86
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	24 e8       	ldi	r18, 0x84	; 132
    121c:	fc 01       	movw	r30, r24
    121e:	20 83       	st	Z, r18
	while( GET_BIT(TWCR,TWINT) ==0 );
    1220:	00 00       	nop
    1222:	86 e5       	ldi	r24, 0x56	; 86
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	fc 01       	movw	r30, r24
    1228:	80 81       	ld	r24, Z
    122a:	88 1f       	adc	r24, r24
    122c:	88 27       	eor	r24, r24
    122e:	88 1f       	adc	r24, r24
    1230:	88 2f       	mov	r24, r24
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	81 70       	andi	r24, 0x01	; 1
    1236:	99 27       	eor	r25, r25
    1238:	89 2b       	or	r24, r25
    123a:	99 f3       	breq	.-26     	; 0x1222 <EEPROM_readData+0x144>
	u8 data = TWDR;
    123c:	83 e2       	ldi	r24, 0x23	; 35
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	fc 01       	movw	r30, r24
    1242:	80 81       	ld	r24, Z
    1244:	8d 83       	std	Y+5, r24	; 0x05
	
	//send stop
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    1246:	86 e5       	ldi	r24, 0x56	; 86
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	24 e9       	ldi	r18, 0x94	; 148
    124c:	fc 01       	movw	r30, r24
    124e:	20 83       	st	Z, r18
	
	return data;
    1250:	8d 81       	ldd	r24, Y+5	; 0x05

    1252:	27 96       	adiw	r28, 0x07	; 7
    1254:	0f b6       	in	r0, 0x3f	; 63
    1256:	f8 94       	cli
    1258:	de bf       	out	0x3e, r29	; 62
    125a:	0f be       	out	0x3f, r0	; 63
    125c:	cd bf       	out	0x3d, r28	; 61
    125e:	df 91       	pop	r29
    1260:	cf 91       	pop	r28
    1262:	08 95       	ret

00001264 <KEYPAD_init>:
 */ 
#include "KEYPAD_INT.h"
#include "DIO_INT.h"

void KEYPAD_init()
{
    1264:	cf 93       	push	r28
    1266:	df 93       	push	r29
    1268:	cd b7       	in	r28, 0x3d	; 61
    126a:	de b7       	in	r29, 0x3e	; 62
	DIO_setPinDir(KEYPAD_ROW0, DIO_INPUT);
    126c:	60 e0       	ldi	r22, 0x00	; 0
    126e:	82 e1       	ldi	r24, 0x12	; 18
    1270:	0e 94 56 10 	call	0x20ac	; 0x20ac <DIO_setPinDir>
	DIO_setPinDir(KEYPAD_ROW1, DIO_INPUT);
    1274:	60 e0       	ldi	r22, 0x00	; 0
    1276:	83 e1       	ldi	r24, 0x13	; 19
    1278:	0e 94 56 10 	call	0x20ac	; 0x20ac <DIO_setPinDir>
	DIO_setPinDir(KEYPAD_ROW2, DIO_INPUT);
    127c:	60 e0       	ldi	r22, 0x00	; 0
    127e:	84 e1       	ldi	r24, 0x14	; 20
    1280:	0e 94 56 10 	call	0x20ac	; 0x20ac <DIO_setPinDir>
	DIO_setPinDir(KEYPAD_ROW3, DIO_INPUT);
    1284:	60 e0       	ldi	r22, 0x00	; 0
    1286:	85 e1       	ldi	r24, 0x15	; 21
    1288:	0e 94 56 10 	call	0x20ac	; 0x20ac <DIO_setPinDir>
	
	DIO_setPinPullup(KEYPAD_ROW0);
    128c:	82 e1       	ldi	r24, 0x12	; 18
    128e:	0e 94 b3 11 	call	0x2366	; 0x2366 <DIO_setPinPullup>
	DIO_setPinPullup(KEYPAD_ROW1);
    1292:	83 e1       	ldi	r24, 0x13	; 19
    1294:	0e 94 b3 11 	call	0x2366	; 0x2366 <DIO_setPinPullup>
	DIO_setPinPullup(KEYPAD_ROW2);
    1298:	84 e1       	ldi	r24, 0x14	; 20
    129a:	0e 94 b3 11 	call	0x2366	; 0x2366 <DIO_setPinPullup>
	DIO_setPinPullup(KEYPAD_ROW3);
    129e:	85 e1       	ldi	r24, 0x15	; 21
    12a0:	0e 94 b3 11 	call	0x2366	; 0x2366 <DIO_setPinPullup>
	
	DIO_setPinDir(KEYPAD_COL0, DIO_OUTPUT);
    12a4:	61 e0       	ldi	r22, 0x01	; 1
    12a6:	86 e1       	ldi	r24, 0x16	; 22
    12a8:	0e 94 56 10 	call	0x20ac	; 0x20ac <DIO_setPinDir>
	DIO_setPinDir(KEYPAD_COL1, DIO_OUTPUT);
    12ac:	61 e0       	ldi	r22, 0x01	; 1
    12ae:	87 e1       	ldi	r24, 0x17	; 23
    12b0:	0e 94 56 10 	call	0x20ac	; 0x20ac <DIO_setPinDir>
	DIO_setPinDir(KEYPAD_COL2, DIO_OUTPUT);
    12b4:	61 e0       	ldi	r22, 0x01	; 1
    12b6:	8d e1       	ldi	r24, 0x1D	; 29
    12b8:	0e 94 56 10 	call	0x20ac	; 0x20ac <DIO_setPinDir>
	DIO_setPinDir(KEYPAD_COL3, DIO_OUTPUT);
    12bc:	61 e0       	ldi	r22, 0x01	; 1
    12be:	83 e0       	ldi	r24, 0x03	; 3
    12c0:	0e 94 56 10 	call	0x20ac	; 0x20ac <DIO_setPinDir>
	
}
    12c4:	00 00       	nop
    12c6:	df 91       	pop	r29
    12c8:	cf 91       	pop	r28
    12ca:	08 95       	ret

000012cc <KEYPAD_read>:

u8 KEYPAD_read()
{
    12cc:	cf 93       	push	r28
    12ce:	df 93       	push	r29
    12d0:	cd b7       	in	r28, 0x3d	; 61
    12d2:	de b7       	in	r29, 0x3e	; 62
	
	DIO_setPinValue(KEYPAD_COL0, DIO_LOW);
    12d4:	60 e0       	ldi	r22, 0x00	; 0
    12d6:	86 e1       	ldi	r24, 0x16	; 22
    12d8:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <DIO_setPinValue>
	DIO_setPinValue(KEYPAD_COL1, DIO_HIGH);
    12dc:	61 e0       	ldi	r22, 0x01	; 1
    12de:	87 e1       	ldi	r24, 0x17	; 23
    12e0:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <DIO_setPinValue>
	DIO_setPinValue(KEYPAD_COL2, DIO_HIGH);
    12e4:	61 e0       	ldi	r22, 0x01	; 1
    12e6:	8d e1       	ldi	r24, 0x1D	; 29
    12e8:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <DIO_setPinValue>
	DIO_setPinValue(KEYPAD_COL3, DIO_HIGH);
    12ec:	61 e0       	ldi	r22, 0x01	; 1
    12ee:	83 e0       	ldi	r24, 0x03	; 3
    12f0:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <DIO_setPinValue>
	
	if(DIO_readPinValue(KEYPAD_ROW0) == DIO_LOW)
    12f4:	82 e1       	ldi	r24, 0x12	; 18
    12f6:	0e 94 4b 11 	call	0x2296	; 0x2296 <DIO_readPinValue>
    12fa:	88 23       	and	r24, r24
    12fc:	11 f4       	brne	.+4      	; 0x1302 <KEYPAD_read+0x36>
	{
		return KEYPAD_ROW0_COL0;
    12fe:	87 e3       	ldi	r24, 0x37	; 55
    1300:	9a c0       	rjmp	.+308    	; 0x1436 <KEYPAD_read+0x16a>
	}
	else if(DIO_readPinValue(KEYPAD_ROW1) == DIO_LOW)
    1302:	83 e1       	ldi	r24, 0x13	; 19
    1304:	0e 94 4b 11 	call	0x2296	; 0x2296 <DIO_readPinValue>
    1308:	88 23       	and	r24, r24
    130a:	11 f4       	brne	.+4      	; 0x1310 <KEYPAD_read+0x44>
	{
		return KEYPAD_ROW1_COL0;
    130c:	84 e3       	ldi	r24, 0x34	; 52
    130e:	93 c0       	rjmp	.+294    	; 0x1436 <KEYPAD_read+0x16a>
	}
	else if(DIO_readPinValue(KEYPAD_ROW2) == DIO_LOW)
    1310:	84 e1       	ldi	r24, 0x14	; 20
    1312:	0e 94 4b 11 	call	0x2296	; 0x2296 <DIO_readPinValue>
    1316:	88 23       	and	r24, r24
    1318:	11 f4       	brne	.+4      	; 0x131e <KEYPAD_read+0x52>
	{
		return KEYPAD_ROW2_COL0;
    131a:	81 e3       	ldi	r24, 0x31	; 49
    131c:	8c c0       	rjmp	.+280    	; 0x1436 <KEYPAD_read+0x16a>
	}
	else if(DIO_readPinValue(KEYPAD_ROW3) == DIO_LOW)
    131e:	85 e1       	ldi	r24, 0x15	; 21
    1320:	0e 94 4b 11 	call	0x2296	; 0x2296 <DIO_readPinValue>
    1324:	88 23       	and	r24, r24
    1326:	11 f4       	brne	.+4      	; 0x132c <KEYPAD_read+0x60>
	{
		return KEYPAD_ROW3_COL0;
    1328:	83 e6       	ldi	r24, 0x63	; 99
    132a:	85 c0       	rjmp	.+266    	; 0x1436 <KEYPAD_read+0x16a>
	
	
	
	
	
	DIO_setPinValue(KEYPAD_COL0, DIO_HIGH);
    132c:	61 e0       	ldi	r22, 0x01	; 1
    132e:	86 e1       	ldi	r24, 0x16	; 22
    1330:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <DIO_setPinValue>
	DIO_setPinValue(KEYPAD_COL1, DIO_LOW);
    1334:	60 e0       	ldi	r22, 0x00	; 0
    1336:	87 e1       	ldi	r24, 0x17	; 23
    1338:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <DIO_setPinValue>
	DIO_setPinValue(KEYPAD_COL2, DIO_HIGH);
    133c:	61 e0       	ldi	r22, 0x01	; 1
    133e:	8d e1       	ldi	r24, 0x1D	; 29
    1340:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <DIO_setPinValue>
	DIO_setPinValue(KEYPAD_COL3, DIO_HIGH);
    1344:	61 e0       	ldi	r22, 0x01	; 1
    1346:	83 e0       	ldi	r24, 0x03	; 3
    1348:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <DIO_setPinValue>
	
	if(DIO_readPinValue(KEYPAD_ROW0) == DIO_LOW)
    134c:	82 e1       	ldi	r24, 0x12	; 18
    134e:	0e 94 4b 11 	call	0x2296	; 0x2296 <DIO_readPinValue>
    1352:	88 23       	and	r24, r24
    1354:	11 f4       	brne	.+4      	; 0x135a <KEYPAD_read+0x8e>
	{
		return KEYPAD_ROW0_COL1;
    1356:	88 e3       	ldi	r24, 0x38	; 56
    1358:	6e c0       	rjmp	.+220    	; 0x1436 <KEYPAD_read+0x16a>
	}
	else if(DIO_readPinValue(KEYPAD_ROW1) == DIO_LOW)
    135a:	83 e1       	ldi	r24, 0x13	; 19
    135c:	0e 94 4b 11 	call	0x2296	; 0x2296 <DIO_readPinValue>
    1360:	88 23       	and	r24, r24
    1362:	11 f4       	brne	.+4      	; 0x1368 <KEYPAD_read+0x9c>
	{
		return KEYPAD_ROW1_COL1;
    1364:	85 e3       	ldi	r24, 0x35	; 53
    1366:	67 c0       	rjmp	.+206    	; 0x1436 <KEYPAD_read+0x16a>
	}
	else if(DIO_readPinValue(KEYPAD_ROW2) == DIO_LOW)
    1368:	84 e1       	ldi	r24, 0x14	; 20
    136a:	0e 94 4b 11 	call	0x2296	; 0x2296 <DIO_readPinValue>
    136e:	88 23       	and	r24, r24
    1370:	11 f4       	brne	.+4      	; 0x1376 <KEYPAD_read+0xaa>
	{
		return KEYPAD_ROW2_COL1;
    1372:	82 e3       	ldi	r24, 0x32	; 50
    1374:	60 c0       	rjmp	.+192    	; 0x1436 <KEYPAD_read+0x16a>
	}
	else if(DIO_readPinValue(KEYPAD_ROW3) == DIO_LOW)
    1376:	85 e1       	ldi	r24, 0x15	; 21
    1378:	0e 94 4b 11 	call	0x2296	; 0x2296 <DIO_readPinValue>
    137c:	88 23       	and	r24, r24
    137e:	11 f4       	brne	.+4      	; 0x1384 <KEYPAD_read+0xb8>
	{
		return KEYPAD_ROW3_COL1;
    1380:	80 e3       	ldi	r24, 0x30	; 48
    1382:	59 c0       	rjmp	.+178    	; 0x1436 <KEYPAD_read+0x16a>
	}
	
	
	
	DIO_setPinValue(KEYPAD_COL0, DIO_HIGH);
    1384:	61 e0       	ldi	r22, 0x01	; 1
    1386:	86 e1       	ldi	r24, 0x16	; 22
    1388:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <DIO_setPinValue>
	DIO_setPinValue(KEYPAD_COL1, DIO_HIGH);
    138c:	61 e0       	ldi	r22, 0x01	; 1
    138e:	87 e1       	ldi	r24, 0x17	; 23
    1390:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <DIO_setPinValue>
	DIO_setPinValue(KEYPAD_COL2, DIO_LOW);
    1394:	60 e0       	ldi	r22, 0x00	; 0
    1396:	8d e1       	ldi	r24, 0x1D	; 29
    1398:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <DIO_setPinValue>
	DIO_setPinValue(KEYPAD_COL3, DIO_HIGH);
    139c:	61 e0       	ldi	r22, 0x01	; 1
    139e:	83 e0       	ldi	r24, 0x03	; 3
    13a0:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <DIO_setPinValue>
	
	if(DIO_readPinValue(KEYPAD_ROW0) == DIO_LOW)
    13a4:	82 e1       	ldi	r24, 0x12	; 18
    13a6:	0e 94 4b 11 	call	0x2296	; 0x2296 <DIO_readPinValue>
    13aa:	88 23       	and	r24, r24
    13ac:	11 f4       	brne	.+4      	; 0x13b2 <KEYPAD_read+0xe6>
	{
		return KEYPAD_ROW0_COL2;
    13ae:	89 e3       	ldi	r24, 0x39	; 57
    13b0:	42 c0       	rjmp	.+132    	; 0x1436 <KEYPAD_read+0x16a>
	}
	else if(DIO_readPinValue(KEYPAD_ROW1) == DIO_LOW)
    13b2:	83 e1       	ldi	r24, 0x13	; 19
    13b4:	0e 94 4b 11 	call	0x2296	; 0x2296 <DIO_readPinValue>
    13b8:	88 23       	and	r24, r24
    13ba:	11 f4       	brne	.+4      	; 0x13c0 <KEYPAD_read+0xf4>
	{
		return KEYPAD_ROW1_COL2;
    13bc:	86 e3       	ldi	r24, 0x36	; 54
    13be:	3b c0       	rjmp	.+118    	; 0x1436 <KEYPAD_read+0x16a>
	}
	else if(DIO_readPinValue(KEYPAD_ROW2) == DIO_LOW)
    13c0:	84 e1       	ldi	r24, 0x14	; 20
    13c2:	0e 94 4b 11 	call	0x2296	; 0x2296 <DIO_readPinValue>
    13c6:	88 23       	and	r24, r24
    13c8:	11 f4       	brne	.+4      	; 0x13ce <KEYPAD_read+0x102>
	{
		return KEYPAD_ROW2_COL2;
    13ca:	83 e3       	ldi	r24, 0x33	; 51
    13cc:	34 c0       	rjmp	.+104    	; 0x1436 <KEYPAD_read+0x16a>
	}
	else if(DIO_readPinValue(KEYPAD_ROW3) == DIO_LOW)
    13ce:	85 e1       	ldi	r24, 0x15	; 21
    13d0:	0e 94 4b 11 	call	0x2296	; 0x2296 <DIO_readPinValue>
    13d4:	88 23       	and	r24, r24
    13d6:	11 f4       	brne	.+4      	; 0x13dc <KEYPAD_read+0x110>
	{
		return KEYPAD_ROW3_COL2;
    13d8:	8d e3       	ldi	r24, 0x3D	; 61
    13da:	2d c0       	rjmp	.+90     	; 0x1436 <KEYPAD_read+0x16a>
	}
	
	
	DIO_setPinValue(KEYPAD_COL0, DIO_HIGH);
    13dc:	61 e0       	ldi	r22, 0x01	; 1
    13de:	86 e1       	ldi	r24, 0x16	; 22
    13e0:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <DIO_setPinValue>
	DIO_setPinValue(KEYPAD_COL1, DIO_HIGH);
    13e4:	61 e0       	ldi	r22, 0x01	; 1
    13e6:	87 e1       	ldi	r24, 0x17	; 23
    13e8:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <DIO_setPinValue>
	DIO_setPinValue(KEYPAD_COL2, DIO_HIGH);
    13ec:	61 e0       	ldi	r22, 0x01	; 1
    13ee:	8d e1       	ldi	r24, 0x1D	; 29
    13f0:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <DIO_setPinValue>
	DIO_setPinValue(KEYPAD_COL3, DIO_LOW);
    13f4:	60 e0       	ldi	r22, 0x00	; 0
    13f6:	83 e0       	ldi	r24, 0x03	; 3
    13f8:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <DIO_setPinValue>
	
	if(DIO_readPinValue(KEYPAD_ROW0) == DIO_LOW)
    13fc:	82 e1       	ldi	r24, 0x12	; 18
    13fe:	0e 94 4b 11 	call	0x2296	; 0x2296 <DIO_readPinValue>
    1402:	88 23       	and	r24, r24
    1404:	11 f4       	brne	.+4      	; 0x140a <KEYPAD_read+0x13e>
	{
		return KEYPAD_ROW0_COL3;
    1406:	8f e2       	ldi	r24, 0x2F	; 47
    1408:	16 c0       	rjmp	.+44     	; 0x1436 <KEYPAD_read+0x16a>
	}
	else if(DIO_readPinValue(KEYPAD_ROW1) == DIO_LOW)
    140a:	83 e1       	ldi	r24, 0x13	; 19
    140c:	0e 94 4b 11 	call	0x2296	; 0x2296 <DIO_readPinValue>
    1410:	88 23       	and	r24, r24
    1412:	11 f4       	brne	.+4      	; 0x1418 <KEYPAD_read+0x14c>
	{
		return KEYPAD_ROW1_COL3;
    1414:	8a e2       	ldi	r24, 0x2A	; 42
    1416:	0f c0       	rjmp	.+30     	; 0x1436 <KEYPAD_read+0x16a>
	}
	else if(DIO_readPinValue(KEYPAD_ROW2) == DIO_LOW)
    1418:	84 e1       	ldi	r24, 0x14	; 20
    141a:	0e 94 4b 11 	call	0x2296	; 0x2296 <DIO_readPinValue>
    141e:	88 23       	and	r24, r24
    1420:	11 f4       	brne	.+4      	; 0x1426 <KEYPAD_read+0x15a>
	{
		return KEYPAD_ROW2_COL3;
    1422:	8d e2       	ldi	r24, 0x2D	; 45
    1424:	08 c0       	rjmp	.+16     	; 0x1436 <KEYPAD_read+0x16a>
	}
	else if(DIO_readPinValue(KEYPAD_ROW3) == DIO_LOW)
    1426:	85 e1       	ldi	r24, 0x15	; 21
    1428:	0e 94 4b 11 	call	0x2296	; 0x2296 <DIO_readPinValue>
    142c:	88 23       	and	r24, r24
    142e:	11 f4       	brne	.+4      	; 0x1434 <KEYPAD_read+0x168>
	{
		return KEYPAD_ROW3_COL3;
    1430:	8b e2       	ldi	r24, 0x2B	; 43
    1432:	01 c0       	rjmp	.+2      	; 0x1436 <KEYPAD_read+0x16a>
	}
	
	return KEYPAD_UNPRESSED;
    1434:	88 e7       	ldi	r24, 0x78	; 120
	
    1436:	df 91       	pop	r29
    1438:	cf 91       	pop	r28
    143a:	08 95       	ret

0000143c <LCD_init>:
	s32 k;
	for(k=i-1; k>=0; k--)
	{
		LCD_writeChar(arr[k]);
	}
}
    143c:	cf 93       	push	r28
    143e:	df 93       	push	r29
    1440:	cd b7       	in	r28, 0x3d	; 61
    1442:	de b7       	in	r29, 0x3e	; 62
    1444:	e8 97       	sbiw	r28, 0x38	; 56
    1446:	0f b6       	in	r0, 0x3f	; 63
    1448:	f8 94       	cli
    144a:	de bf       	out	0x3e, r29	; 62
    144c:	0f be       	out	0x3f, r0	; 63
    144e:	cd bf       	out	0x3d, r28	; 61
    1450:	61 e0       	ldi	r22, 0x01	; 1
    1452:	84 e0       	ldi	r24, 0x04	; 4
    1454:	0e 94 56 10 	call	0x20ac	; 0x20ac <DIO_setPinDir>
    1458:	61 e0       	ldi	r22, 0x01	; 1
    145a:	85 e0       	ldi	r24, 0x05	; 5
    145c:	0e 94 56 10 	call	0x20ac	; 0x20ac <DIO_setPinDir>
    1460:	61 e0       	ldi	r22, 0x01	; 1
    1462:	86 e0       	ldi	r24, 0x06	; 6
    1464:	0e 94 56 10 	call	0x20ac	; 0x20ac <DIO_setPinDir>
    1468:	61 e0       	ldi	r22, 0x01	; 1
    146a:	87 e0       	ldi	r24, 0x07	; 7
    146c:	0e 94 56 10 	call	0x20ac	; 0x20ac <DIO_setPinDir>
    1470:	61 e0       	ldi	r22, 0x01	; 1
    1472:	89 e0       	ldi	r24, 0x09	; 9
    1474:	0e 94 56 10 	call	0x20ac	; 0x20ac <DIO_setPinDir>
    1478:	61 e0       	ldi	r22, 0x01	; 1
    147a:	8a e0       	ldi	r24, 0x0A	; 10
    147c:	0e 94 56 10 	call	0x20ac	; 0x20ac <DIO_setPinDir>
    1480:	61 e0       	ldi	r22, 0x01	; 1
    1482:	8b e0       	ldi	r24, 0x0B	; 11
    1484:	0e 94 56 10 	call	0x20ac	; 0x20ac <DIO_setPinDir>
    1488:	82 e0       	ldi	r24, 0x02	; 2
    148a:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <LCD_writeCmd>
    148e:	80 e0       	ldi	r24, 0x00	; 0
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	a8 e4       	ldi	r26, 0x48	; 72
    1494:	b2 e4       	ldi	r27, 0x42	; 66
    1496:	89 83       	std	Y+1, r24	; 0x01
    1498:	9a 83       	std	Y+2, r25	; 0x02
    149a:	ab 83       	std	Y+3, r26	; 0x03
    149c:	bc 83       	std	Y+4, r27	; 0x04
    149e:	20 e0       	ldi	r18, 0x00	; 0
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	4a e7       	ldi	r20, 0x7A	; 122
    14a4:	55 e4       	ldi	r21, 0x45	; 69
    14a6:	69 81       	ldd	r22, Y+1	; 0x01
    14a8:	7a 81       	ldd	r23, Y+2	; 0x02
    14aa:	8b 81       	ldd	r24, Y+3	; 0x03
    14ac:	9c 81       	ldd	r25, Y+4	; 0x04
    14ae:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <__mulsf3>
    14b2:	dc 01       	movw	r26, r24
    14b4:	cb 01       	movw	r24, r22
    14b6:	8f a7       	std	Y+47, r24	; 0x2f
    14b8:	98 ab       	std	Y+48, r25	; 0x30
    14ba:	a9 ab       	std	Y+49, r26	; 0x31
    14bc:	ba ab       	std	Y+50, r27	; 0x32
    14be:	20 e0       	ldi	r18, 0x00	; 0
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	40 e8       	ldi	r20, 0x80	; 128
    14c4:	5f e3       	ldi	r21, 0x3F	; 63
    14c6:	6f a5       	ldd	r22, Y+47	; 0x2f
    14c8:	78 a9       	ldd	r23, Y+48	; 0x30
    14ca:	89 a9       	ldd	r24, Y+49	; 0x31
    14cc:	9a a9       	ldd	r25, Y+50	; 0x32
    14ce:	0e 94 40 15 	call	0x2a80	; 0x2a80 <__cmpsf2>
    14d2:	88 23       	and	r24, r24
    14d4:	2c f4       	brge	.+10     	; 0x14e0 <LCD_init+0xa4>
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	9c ab       	std	Y+52, r25	; 0x34
    14dc:	8b ab       	std	Y+51, r24	; 0x33
    14de:	3f c0       	rjmp	.+126    	; 0x155e <LCD_init+0x122>
    14e0:	20 e0       	ldi	r18, 0x00	; 0
    14e2:	3f ef       	ldi	r19, 0xFF	; 255
    14e4:	4f e7       	ldi	r20, 0x7F	; 127
    14e6:	57 e4       	ldi	r21, 0x47	; 71
    14e8:	6f a5       	ldd	r22, Y+47	; 0x2f
    14ea:	78 a9       	ldd	r23, Y+48	; 0x30
    14ec:	89 a9       	ldd	r24, Y+49	; 0x31
    14ee:	9a a9       	ldd	r25, Y+50	; 0x32
    14f0:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <__gesf2>
    14f4:	18 16       	cp	r1, r24
    14f6:	4c f5       	brge	.+82     	; 0x154a <LCD_init+0x10e>
    14f8:	20 e0       	ldi	r18, 0x00	; 0
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	40 e2       	ldi	r20, 0x20	; 32
    14fe:	51 e4       	ldi	r21, 0x41	; 65
    1500:	69 81       	ldd	r22, Y+1	; 0x01
    1502:	7a 81       	ldd	r23, Y+2	; 0x02
    1504:	8b 81       	ldd	r24, Y+3	; 0x03
    1506:	9c 81       	ldd	r25, Y+4	; 0x04
    1508:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <__mulsf3>
    150c:	dc 01       	movw	r26, r24
    150e:	cb 01       	movw	r24, r22
    1510:	bc 01       	movw	r22, r24
    1512:	cd 01       	movw	r24, r26
    1514:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <__fixunssfsi>
    1518:	dc 01       	movw	r26, r24
    151a:	cb 01       	movw	r24, r22
    151c:	9c ab       	std	Y+52, r25	; 0x34
    151e:	8b ab       	std	Y+51, r24	; 0x33
    1520:	0f c0       	rjmp	.+30     	; 0x1540 <LCD_init+0x104>
    1522:	80 e9       	ldi	r24, 0x90	; 144
    1524:	91 e0       	ldi	r25, 0x01	; 1
    1526:	9e ab       	std	Y+54, r25	; 0x36
    1528:	8d ab       	std	Y+53, r24	; 0x35
    152a:	8d a9       	ldd	r24, Y+53	; 0x35
    152c:	9e a9       	ldd	r25, Y+54	; 0x36
    152e:	01 97       	sbiw	r24, 0x01	; 1
    1530:	f1 f7       	brne	.-4      	; 0x152e <LCD_init+0xf2>
    1532:	9e ab       	std	Y+54, r25	; 0x36
    1534:	8d ab       	std	Y+53, r24	; 0x35
    1536:	8b a9       	ldd	r24, Y+51	; 0x33
    1538:	9c a9       	ldd	r25, Y+52	; 0x34
    153a:	01 97       	sbiw	r24, 0x01	; 1
    153c:	9c ab       	std	Y+52, r25	; 0x34
    153e:	8b ab       	std	Y+51, r24	; 0x33
    1540:	8b a9       	ldd	r24, Y+51	; 0x33
    1542:	9c a9       	ldd	r25, Y+52	; 0x34
    1544:	89 2b       	or	r24, r25
    1546:	69 f7       	brne	.-38     	; 0x1522 <LCD_init+0xe6>
    1548:	14 c0       	rjmp	.+40     	; 0x1572 <LCD_init+0x136>
    154a:	6f a5       	ldd	r22, Y+47	; 0x2f
    154c:	78 a9       	ldd	r23, Y+48	; 0x30
    154e:	89 a9       	ldd	r24, Y+49	; 0x31
    1550:	9a a9       	ldd	r25, Y+50	; 0x32
    1552:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <__fixunssfsi>
    1556:	dc 01       	movw	r26, r24
    1558:	cb 01       	movw	r24, r22
    155a:	9c ab       	std	Y+52, r25	; 0x34
    155c:	8b ab       	std	Y+51, r24	; 0x33
    155e:	8b a9       	ldd	r24, Y+51	; 0x33
    1560:	9c a9       	ldd	r25, Y+52	; 0x34
    1562:	98 af       	std	Y+56, r25	; 0x38
    1564:	8f ab       	std	Y+55, r24	; 0x37
    1566:	8f a9       	ldd	r24, Y+55	; 0x37
    1568:	98 ad       	ldd	r25, Y+56	; 0x38
    156a:	01 97       	sbiw	r24, 0x01	; 1
    156c:	f1 f7       	brne	.-4      	; 0x156a <LCD_init+0x12e>
    156e:	98 af       	std	Y+56, r25	; 0x38
    1570:	8f ab       	std	Y+55, r24	; 0x37
    1572:	88 e2       	ldi	r24, 0x28	; 40
    1574:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <LCD_writeCmd>
    1578:	80 e0       	ldi	r24, 0x00	; 0
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	a0 e8       	ldi	r26, 0x80	; 128
    157e:	bf e3       	ldi	r27, 0x3F	; 63
    1580:	8d 83       	std	Y+5, r24	; 0x05
    1582:	9e 83       	std	Y+6, r25	; 0x06
    1584:	af 83       	std	Y+7, r26	; 0x07
    1586:	b8 87       	std	Y+8, r27	; 0x08
    1588:	20 e0       	ldi	r18, 0x00	; 0
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	4a e7       	ldi	r20, 0x7A	; 122
    158e:	55 e4       	ldi	r21, 0x45	; 69
    1590:	6d 81       	ldd	r22, Y+5	; 0x05
    1592:	7e 81       	ldd	r23, Y+6	; 0x06
    1594:	8f 81       	ldd	r24, Y+7	; 0x07
    1596:	98 85       	ldd	r25, Y+8	; 0x08
    1598:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <__mulsf3>
    159c:	dc 01       	movw	r26, r24
    159e:	cb 01       	movw	r24, r22
    15a0:	8d a3       	std	Y+37, r24	; 0x25
    15a2:	9e a3       	std	Y+38, r25	; 0x26
    15a4:	af a3       	std	Y+39, r26	; 0x27
    15a6:	b8 a7       	std	Y+40, r27	; 0x28
    15a8:	20 e0       	ldi	r18, 0x00	; 0
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	40 e8       	ldi	r20, 0x80	; 128
    15ae:	5f e3       	ldi	r21, 0x3F	; 63
    15b0:	6d a1       	ldd	r22, Y+37	; 0x25
    15b2:	7e a1       	ldd	r23, Y+38	; 0x26
    15b4:	8f a1       	ldd	r24, Y+39	; 0x27
    15b6:	98 a5       	ldd	r25, Y+40	; 0x28
    15b8:	0e 94 40 15 	call	0x2a80	; 0x2a80 <__cmpsf2>
    15bc:	88 23       	and	r24, r24
    15be:	2c f4       	brge	.+10     	; 0x15ca <LCD_init+0x18e>
    15c0:	81 e0       	ldi	r24, 0x01	; 1
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	9a a7       	std	Y+42, r25	; 0x2a
    15c6:	89 a7       	std	Y+41, r24	; 0x29
    15c8:	3f c0       	rjmp	.+126    	; 0x1648 <LCD_init+0x20c>
    15ca:	20 e0       	ldi	r18, 0x00	; 0
    15cc:	3f ef       	ldi	r19, 0xFF	; 255
    15ce:	4f e7       	ldi	r20, 0x7F	; 127
    15d0:	57 e4       	ldi	r21, 0x47	; 71
    15d2:	6d a1       	ldd	r22, Y+37	; 0x25
    15d4:	7e a1       	ldd	r23, Y+38	; 0x26
    15d6:	8f a1       	ldd	r24, Y+39	; 0x27
    15d8:	98 a5       	ldd	r25, Y+40	; 0x28
    15da:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <__gesf2>
    15de:	18 16       	cp	r1, r24
    15e0:	4c f5       	brge	.+82     	; 0x1634 <LCD_init+0x1f8>
    15e2:	20 e0       	ldi	r18, 0x00	; 0
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	40 e2       	ldi	r20, 0x20	; 32
    15e8:	51 e4       	ldi	r21, 0x41	; 65
    15ea:	6d 81       	ldd	r22, Y+5	; 0x05
    15ec:	7e 81       	ldd	r23, Y+6	; 0x06
    15ee:	8f 81       	ldd	r24, Y+7	; 0x07
    15f0:	98 85       	ldd	r25, Y+8	; 0x08
    15f2:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <__mulsf3>
    15f6:	dc 01       	movw	r26, r24
    15f8:	cb 01       	movw	r24, r22
    15fa:	bc 01       	movw	r22, r24
    15fc:	cd 01       	movw	r24, r26
    15fe:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <__fixunssfsi>
    1602:	dc 01       	movw	r26, r24
    1604:	cb 01       	movw	r24, r22
    1606:	9a a7       	std	Y+42, r25	; 0x2a
    1608:	89 a7       	std	Y+41, r24	; 0x29
    160a:	0f c0       	rjmp	.+30     	; 0x162a <LCD_init+0x1ee>
    160c:	80 e9       	ldi	r24, 0x90	; 144
    160e:	91 e0       	ldi	r25, 0x01	; 1
    1610:	9c a7       	std	Y+44, r25	; 0x2c
    1612:	8b a7       	std	Y+43, r24	; 0x2b
    1614:	8b a5       	ldd	r24, Y+43	; 0x2b
    1616:	9c a5       	ldd	r25, Y+44	; 0x2c
    1618:	01 97       	sbiw	r24, 0x01	; 1
    161a:	f1 f7       	brne	.-4      	; 0x1618 <LCD_init+0x1dc>
    161c:	9c a7       	std	Y+44, r25	; 0x2c
    161e:	8b a7       	std	Y+43, r24	; 0x2b
    1620:	89 a5       	ldd	r24, Y+41	; 0x29
    1622:	9a a5       	ldd	r25, Y+42	; 0x2a
    1624:	01 97       	sbiw	r24, 0x01	; 1
    1626:	9a a7       	std	Y+42, r25	; 0x2a
    1628:	89 a7       	std	Y+41, r24	; 0x29
    162a:	89 a5       	ldd	r24, Y+41	; 0x29
    162c:	9a a5       	ldd	r25, Y+42	; 0x2a
    162e:	89 2b       	or	r24, r25
    1630:	69 f7       	brne	.-38     	; 0x160c <LCD_init+0x1d0>
    1632:	14 c0       	rjmp	.+40     	; 0x165c <LCD_init+0x220>
    1634:	6d a1       	ldd	r22, Y+37	; 0x25
    1636:	7e a1       	ldd	r23, Y+38	; 0x26
    1638:	8f a1       	ldd	r24, Y+39	; 0x27
    163a:	98 a5       	ldd	r25, Y+40	; 0x28
    163c:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <__fixunssfsi>
    1640:	dc 01       	movw	r26, r24
    1642:	cb 01       	movw	r24, r22
    1644:	9a a7       	std	Y+42, r25	; 0x2a
    1646:	89 a7       	std	Y+41, r24	; 0x29
    1648:	89 a5       	ldd	r24, Y+41	; 0x29
    164a:	9a a5       	ldd	r25, Y+42	; 0x2a
    164c:	9e a7       	std	Y+46, r25	; 0x2e
    164e:	8d a7       	std	Y+45, r24	; 0x2d
    1650:	8d a5       	ldd	r24, Y+45	; 0x2d
    1652:	9e a5       	ldd	r25, Y+46	; 0x2e
    1654:	01 97       	sbiw	r24, 0x01	; 1
    1656:	f1 f7       	brne	.-4      	; 0x1654 <LCD_init+0x218>
    1658:	9e a7       	std	Y+46, r25	; 0x2e
    165a:	8d a7       	std	Y+45, r24	; 0x2d
    165c:	8e e0       	ldi	r24, 0x0E	; 14
    165e:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <LCD_writeCmd>
    1662:	80 e0       	ldi	r24, 0x00	; 0
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	a0 e8       	ldi	r26, 0x80	; 128
    1668:	bf e3       	ldi	r27, 0x3F	; 63
    166a:	89 87       	std	Y+9, r24	; 0x09
    166c:	9a 87       	std	Y+10, r25	; 0x0a
    166e:	ab 87       	std	Y+11, r26	; 0x0b
    1670:	bc 87       	std	Y+12, r27	; 0x0c
    1672:	20 e0       	ldi	r18, 0x00	; 0
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	4a e7       	ldi	r20, 0x7A	; 122
    1678:	55 e4       	ldi	r21, 0x45	; 69
    167a:	69 85       	ldd	r22, Y+9	; 0x09
    167c:	7a 85       	ldd	r23, Y+10	; 0x0a
    167e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1680:	9c 85       	ldd	r25, Y+12	; 0x0c
    1682:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <__mulsf3>
    1686:	dc 01       	movw	r26, r24
    1688:	cb 01       	movw	r24, r22
    168a:	8b 8f       	std	Y+27, r24	; 0x1b
    168c:	9c 8f       	std	Y+28, r25	; 0x1c
    168e:	ad 8f       	std	Y+29, r26	; 0x1d
    1690:	be 8f       	std	Y+30, r27	; 0x1e
    1692:	20 e0       	ldi	r18, 0x00	; 0
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	40 e8       	ldi	r20, 0x80	; 128
    1698:	5f e3       	ldi	r21, 0x3F	; 63
    169a:	6b 8d       	ldd	r22, Y+27	; 0x1b
    169c:	7c 8d       	ldd	r23, Y+28	; 0x1c
    169e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16a0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    16a2:	0e 94 40 15 	call	0x2a80	; 0x2a80 <__cmpsf2>
    16a6:	88 23       	and	r24, r24
    16a8:	2c f4       	brge	.+10     	; 0x16b4 <LCD_init+0x278>
    16aa:	81 e0       	ldi	r24, 0x01	; 1
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	98 a3       	std	Y+32, r25	; 0x20
    16b0:	8f 8f       	std	Y+31, r24	; 0x1f
    16b2:	3f c0       	rjmp	.+126    	; 0x1732 <LCD_init+0x2f6>
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	3f ef       	ldi	r19, 0xFF	; 255
    16b8:	4f e7       	ldi	r20, 0x7F	; 127
    16ba:	57 e4       	ldi	r21, 0x47	; 71
    16bc:	6b 8d       	ldd	r22, Y+27	; 0x1b
    16be:	7c 8d       	ldd	r23, Y+28	; 0x1c
    16c0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16c2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    16c4:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <__gesf2>
    16c8:	18 16       	cp	r1, r24
    16ca:	4c f5       	brge	.+82     	; 0x171e <LCD_init+0x2e2>
    16cc:	20 e0       	ldi	r18, 0x00	; 0
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	40 e2       	ldi	r20, 0x20	; 32
    16d2:	51 e4       	ldi	r21, 0x41	; 65
    16d4:	69 85       	ldd	r22, Y+9	; 0x09
    16d6:	7a 85       	ldd	r23, Y+10	; 0x0a
    16d8:	8b 85       	ldd	r24, Y+11	; 0x0b
    16da:	9c 85       	ldd	r25, Y+12	; 0x0c
    16dc:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <__mulsf3>
    16e0:	dc 01       	movw	r26, r24
    16e2:	cb 01       	movw	r24, r22
    16e4:	bc 01       	movw	r22, r24
    16e6:	cd 01       	movw	r24, r26
    16e8:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <__fixunssfsi>
    16ec:	dc 01       	movw	r26, r24
    16ee:	cb 01       	movw	r24, r22
    16f0:	98 a3       	std	Y+32, r25	; 0x20
    16f2:	8f 8f       	std	Y+31, r24	; 0x1f
    16f4:	0f c0       	rjmp	.+30     	; 0x1714 <LCD_init+0x2d8>
    16f6:	80 e9       	ldi	r24, 0x90	; 144
    16f8:	91 e0       	ldi	r25, 0x01	; 1
    16fa:	9a a3       	std	Y+34, r25	; 0x22
    16fc:	89 a3       	std	Y+33, r24	; 0x21
    16fe:	89 a1       	ldd	r24, Y+33	; 0x21
    1700:	9a a1       	ldd	r25, Y+34	; 0x22
    1702:	01 97       	sbiw	r24, 0x01	; 1
    1704:	f1 f7       	brne	.-4      	; 0x1702 <LCD_init+0x2c6>
    1706:	9a a3       	std	Y+34, r25	; 0x22
    1708:	89 a3       	std	Y+33, r24	; 0x21
    170a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    170c:	98 a1       	ldd	r25, Y+32	; 0x20
    170e:	01 97       	sbiw	r24, 0x01	; 1
    1710:	98 a3       	std	Y+32, r25	; 0x20
    1712:	8f 8f       	std	Y+31, r24	; 0x1f
    1714:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1716:	98 a1       	ldd	r25, Y+32	; 0x20
    1718:	89 2b       	or	r24, r25
    171a:	69 f7       	brne	.-38     	; 0x16f6 <LCD_init+0x2ba>
    171c:	14 c0       	rjmp	.+40     	; 0x1746 <LCD_init+0x30a>
    171e:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1720:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1722:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1724:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1726:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <__fixunssfsi>
    172a:	dc 01       	movw	r26, r24
    172c:	cb 01       	movw	r24, r22
    172e:	98 a3       	std	Y+32, r25	; 0x20
    1730:	8f 8f       	std	Y+31, r24	; 0x1f
    1732:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1734:	98 a1       	ldd	r25, Y+32	; 0x20
    1736:	9c a3       	std	Y+36, r25	; 0x24
    1738:	8b a3       	std	Y+35, r24	; 0x23
    173a:	8b a1       	ldd	r24, Y+35	; 0x23
    173c:	9c a1       	ldd	r25, Y+36	; 0x24
    173e:	01 97       	sbiw	r24, 0x01	; 1
    1740:	f1 f7       	brne	.-4      	; 0x173e <LCD_init+0x302>
    1742:	9c a3       	std	Y+36, r25	; 0x24
    1744:	8b a3       	std	Y+35, r24	; 0x23
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <LCD_writeCmd>
    174c:	80 e0       	ldi	r24, 0x00	; 0
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	a0 ea       	ldi	r26, 0xA0	; 160
    1752:	b0 e4       	ldi	r27, 0x40	; 64
    1754:	8d 87       	std	Y+13, r24	; 0x0d
    1756:	9e 87       	std	Y+14, r25	; 0x0e
    1758:	af 87       	std	Y+15, r26	; 0x0f
    175a:	b8 8b       	std	Y+16, r27	; 0x10
    175c:	20 e0       	ldi	r18, 0x00	; 0
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	4a e7       	ldi	r20, 0x7A	; 122
    1762:	55 e4       	ldi	r21, 0x45	; 69
    1764:	6d 85       	ldd	r22, Y+13	; 0x0d
    1766:	7e 85       	ldd	r23, Y+14	; 0x0e
    1768:	8f 85       	ldd	r24, Y+15	; 0x0f
    176a:	98 89       	ldd	r25, Y+16	; 0x10
    176c:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <__mulsf3>
    1770:	dc 01       	movw	r26, r24
    1772:	cb 01       	movw	r24, r22
    1774:	89 8b       	std	Y+17, r24	; 0x11
    1776:	9a 8b       	std	Y+18, r25	; 0x12
    1778:	ab 8b       	std	Y+19, r26	; 0x13
    177a:	bc 8b       	std	Y+20, r27	; 0x14
    177c:	20 e0       	ldi	r18, 0x00	; 0
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	40 e8       	ldi	r20, 0x80	; 128
    1782:	5f e3       	ldi	r21, 0x3F	; 63
    1784:	69 89       	ldd	r22, Y+17	; 0x11
    1786:	7a 89       	ldd	r23, Y+18	; 0x12
    1788:	8b 89       	ldd	r24, Y+19	; 0x13
    178a:	9c 89       	ldd	r25, Y+20	; 0x14
    178c:	0e 94 40 15 	call	0x2a80	; 0x2a80 <__cmpsf2>
    1790:	88 23       	and	r24, r24
    1792:	2c f4       	brge	.+10     	; 0x179e <LCD_init+0x362>
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	9e 8b       	std	Y+22, r25	; 0x16
    179a:	8d 8b       	std	Y+21, r24	; 0x15
    179c:	3f c0       	rjmp	.+126    	; 0x181c <LCD_init+0x3e0>
    179e:	20 e0       	ldi	r18, 0x00	; 0
    17a0:	3f ef       	ldi	r19, 0xFF	; 255
    17a2:	4f e7       	ldi	r20, 0x7F	; 127
    17a4:	57 e4       	ldi	r21, 0x47	; 71
    17a6:	69 89       	ldd	r22, Y+17	; 0x11
    17a8:	7a 89       	ldd	r23, Y+18	; 0x12
    17aa:	8b 89       	ldd	r24, Y+19	; 0x13
    17ac:	9c 89       	ldd	r25, Y+20	; 0x14
    17ae:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <__gesf2>
    17b2:	18 16       	cp	r1, r24
    17b4:	4c f5       	brge	.+82     	; 0x1808 <LCD_init+0x3cc>
    17b6:	20 e0       	ldi	r18, 0x00	; 0
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	40 e2       	ldi	r20, 0x20	; 32
    17bc:	51 e4       	ldi	r21, 0x41	; 65
    17be:	6d 85       	ldd	r22, Y+13	; 0x0d
    17c0:	7e 85       	ldd	r23, Y+14	; 0x0e
    17c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    17c4:	98 89       	ldd	r25, Y+16	; 0x10
    17c6:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <__mulsf3>
    17ca:	dc 01       	movw	r26, r24
    17cc:	cb 01       	movw	r24, r22
    17ce:	bc 01       	movw	r22, r24
    17d0:	cd 01       	movw	r24, r26
    17d2:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <__fixunssfsi>
    17d6:	dc 01       	movw	r26, r24
    17d8:	cb 01       	movw	r24, r22
    17da:	9e 8b       	std	Y+22, r25	; 0x16
    17dc:	8d 8b       	std	Y+21, r24	; 0x15
    17de:	0f c0       	rjmp	.+30     	; 0x17fe <LCD_init+0x3c2>
    17e0:	80 e9       	ldi	r24, 0x90	; 144
    17e2:	91 e0       	ldi	r25, 0x01	; 1
    17e4:	98 8f       	std	Y+24, r25	; 0x18
    17e6:	8f 8b       	std	Y+23, r24	; 0x17
    17e8:	8f 89       	ldd	r24, Y+23	; 0x17
    17ea:	98 8d       	ldd	r25, Y+24	; 0x18
    17ec:	01 97       	sbiw	r24, 0x01	; 1
    17ee:	f1 f7       	brne	.-4      	; 0x17ec <LCD_init+0x3b0>
    17f0:	98 8f       	std	Y+24, r25	; 0x18
    17f2:	8f 8b       	std	Y+23, r24	; 0x17
    17f4:	8d 89       	ldd	r24, Y+21	; 0x15
    17f6:	9e 89       	ldd	r25, Y+22	; 0x16
    17f8:	01 97       	sbiw	r24, 0x01	; 1
    17fa:	9e 8b       	std	Y+22, r25	; 0x16
    17fc:	8d 8b       	std	Y+21, r24	; 0x15
    17fe:	8d 89       	ldd	r24, Y+21	; 0x15
    1800:	9e 89       	ldd	r25, Y+22	; 0x16
    1802:	89 2b       	or	r24, r25
    1804:	69 f7       	brne	.-38     	; 0x17e0 <LCD_init+0x3a4>
    1806:	14 c0       	rjmp	.+40     	; 0x1830 <LCD_init+0x3f4>
    1808:	69 89       	ldd	r22, Y+17	; 0x11
    180a:	7a 89       	ldd	r23, Y+18	; 0x12
    180c:	8b 89       	ldd	r24, Y+19	; 0x13
    180e:	9c 89       	ldd	r25, Y+20	; 0x14
    1810:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <__fixunssfsi>
    1814:	dc 01       	movw	r26, r24
    1816:	cb 01       	movw	r24, r22
    1818:	9e 8b       	std	Y+22, r25	; 0x16
    181a:	8d 8b       	std	Y+21, r24	; 0x15
    181c:	8d 89       	ldd	r24, Y+21	; 0x15
    181e:	9e 89       	ldd	r25, Y+22	; 0x16
    1820:	9a 8f       	std	Y+26, r25	; 0x1a
    1822:	89 8f       	std	Y+25, r24	; 0x19
    1824:	89 8d       	ldd	r24, Y+25	; 0x19
    1826:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1828:	01 97       	sbiw	r24, 0x01	; 1
    182a:	f1 f7       	brne	.-4      	; 0x1828 <LCD_init+0x3ec>
    182c:	9a 8f       	std	Y+26, r25	; 0x1a
    182e:	89 8f       	std	Y+25, r24	; 0x19
    1830:	86 e0       	ldi	r24, 0x06	; 6
    1832:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <LCD_writeCmd>
    1836:	00 00       	nop
    1838:	e8 96       	adiw	r28, 0x38	; 56
    183a:	0f b6       	in	r0, 0x3f	; 63
    183c:	f8 94       	cli
    183e:	de bf       	out	0x3e, r29	; 62
    1840:	0f be       	out	0x3f, r0	; 63
    1842:	cd bf       	out	0x3d, r28	; 61
    1844:	df 91       	pop	r29
    1846:	cf 91       	pop	r28
    1848:	08 95       	ret

0000184a <LCD_sendData>:
    184a:	cf 93       	push	r28
    184c:	df 93       	push	r29
    184e:	cd b7       	in	r28, 0x3d	; 61
    1850:	de b7       	in	r29, 0x3e	; 62
    1852:	6d 97       	sbiw	r28, 0x1d	; 29
    1854:	0f b6       	in	r0, 0x3f	; 63
    1856:	f8 94       	cli
    1858:	de bf       	out	0x3e, r29	; 62
    185a:	0f be       	out	0x3f, r0	; 63
    185c:	cd bf       	out	0x3d, r28	; 61
    185e:	8d 8f       	std	Y+29, r24	; 0x1d
    1860:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1862:	82 95       	swap	r24
    1864:	8f 70       	andi	r24, 0x0F	; 15
    1866:	81 70       	andi	r24, 0x01	; 1
    1868:	68 2f       	mov	r22, r24
    186a:	84 e0       	ldi	r24, 0x04	; 4
    186c:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <DIO_setPinValue>
    1870:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1872:	82 95       	swap	r24
    1874:	86 95       	lsr	r24
    1876:	87 70       	andi	r24, 0x07	; 7
    1878:	81 70       	andi	r24, 0x01	; 1
    187a:	68 2f       	mov	r22, r24
    187c:	85 e0       	ldi	r24, 0x05	; 5
    187e:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <DIO_setPinValue>
    1882:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1884:	82 95       	swap	r24
    1886:	86 95       	lsr	r24
    1888:	86 95       	lsr	r24
    188a:	83 70       	andi	r24, 0x03	; 3
    188c:	81 70       	andi	r24, 0x01	; 1
    188e:	68 2f       	mov	r22, r24
    1890:	86 e0       	ldi	r24, 0x06	; 6
    1892:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <DIO_setPinValue>
    1896:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1898:	88 1f       	adc	r24, r24
    189a:	88 27       	eor	r24, r24
    189c:	88 1f       	adc	r24, r24
    189e:	68 2f       	mov	r22, r24
    18a0:	87 e0       	ldi	r24, 0x07	; 7
    18a2:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <DIO_setPinValue>
    18a6:	61 e0       	ldi	r22, 0x01	; 1
    18a8:	8b e0       	ldi	r24, 0x0B	; 11
    18aa:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <DIO_setPinValue>
    18ae:	80 e0       	ldi	r24, 0x00	; 0
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	a0 e8       	ldi	r26, 0x80	; 128
    18b4:	bf e3       	ldi	r27, 0x3F	; 63
    18b6:	89 83       	std	Y+1, r24	; 0x01
    18b8:	9a 83       	std	Y+2, r25	; 0x02
    18ba:	ab 83       	std	Y+3, r26	; 0x03
    18bc:	bc 83       	std	Y+4, r27	; 0x04
    18be:	20 e0       	ldi	r18, 0x00	; 0
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	4a e7       	ldi	r20, 0x7A	; 122
    18c4:	55 e4       	ldi	r21, 0x45	; 69
    18c6:	69 81       	ldd	r22, Y+1	; 0x01
    18c8:	7a 81       	ldd	r23, Y+2	; 0x02
    18ca:	8b 81       	ldd	r24, Y+3	; 0x03
    18cc:	9c 81       	ldd	r25, Y+4	; 0x04
    18ce:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <__mulsf3>
    18d2:	dc 01       	movw	r26, r24
    18d4:	cb 01       	movw	r24, r22
    18d6:	8b 8b       	std	Y+19, r24	; 0x13
    18d8:	9c 8b       	std	Y+20, r25	; 0x14
    18da:	ad 8b       	std	Y+21, r26	; 0x15
    18dc:	be 8b       	std	Y+22, r27	; 0x16
    18de:	20 e0       	ldi	r18, 0x00	; 0
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	40 e8       	ldi	r20, 0x80	; 128
    18e4:	5f e3       	ldi	r21, 0x3F	; 63
    18e6:	6b 89       	ldd	r22, Y+19	; 0x13
    18e8:	7c 89       	ldd	r23, Y+20	; 0x14
    18ea:	8d 89       	ldd	r24, Y+21	; 0x15
    18ec:	9e 89       	ldd	r25, Y+22	; 0x16
    18ee:	0e 94 40 15 	call	0x2a80	; 0x2a80 <__cmpsf2>
    18f2:	88 23       	and	r24, r24
    18f4:	2c f4       	brge	.+10     	; 0x1900 <LCD_sendData+0xb6>
    18f6:	81 e0       	ldi	r24, 0x01	; 1
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	98 8f       	std	Y+24, r25	; 0x18
    18fc:	8f 8b       	std	Y+23, r24	; 0x17
    18fe:	3f c0       	rjmp	.+126    	; 0x197e <LCD_sendData+0x134>
    1900:	20 e0       	ldi	r18, 0x00	; 0
    1902:	3f ef       	ldi	r19, 0xFF	; 255
    1904:	4f e7       	ldi	r20, 0x7F	; 127
    1906:	57 e4       	ldi	r21, 0x47	; 71
    1908:	6b 89       	ldd	r22, Y+19	; 0x13
    190a:	7c 89       	ldd	r23, Y+20	; 0x14
    190c:	8d 89       	ldd	r24, Y+21	; 0x15
    190e:	9e 89       	ldd	r25, Y+22	; 0x16
    1910:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <__gesf2>
    1914:	18 16       	cp	r1, r24
    1916:	4c f5       	brge	.+82     	; 0x196a <LCD_sendData+0x120>
    1918:	20 e0       	ldi	r18, 0x00	; 0
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	40 e2       	ldi	r20, 0x20	; 32
    191e:	51 e4       	ldi	r21, 0x41	; 65
    1920:	69 81       	ldd	r22, Y+1	; 0x01
    1922:	7a 81       	ldd	r23, Y+2	; 0x02
    1924:	8b 81       	ldd	r24, Y+3	; 0x03
    1926:	9c 81       	ldd	r25, Y+4	; 0x04
    1928:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <__mulsf3>
    192c:	dc 01       	movw	r26, r24
    192e:	cb 01       	movw	r24, r22
    1930:	bc 01       	movw	r22, r24
    1932:	cd 01       	movw	r24, r26
    1934:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <__fixunssfsi>
    1938:	dc 01       	movw	r26, r24
    193a:	cb 01       	movw	r24, r22
    193c:	98 8f       	std	Y+24, r25	; 0x18
    193e:	8f 8b       	std	Y+23, r24	; 0x17
    1940:	0f c0       	rjmp	.+30     	; 0x1960 <LCD_sendData+0x116>
    1942:	80 e9       	ldi	r24, 0x90	; 144
    1944:	91 e0       	ldi	r25, 0x01	; 1
    1946:	9a 8f       	std	Y+26, r25	; 0x1a
    1948:	89 8f       	std	Y+25, r24	; 0x19
    194a:	89 8d       	ldd	r24, Y+25	; 0x19
    194c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    194e:	01 97       	sbiw	r24, 0x01	; 1
    1950:	f1 f7       	brne	.-4      	; 0x194e <LCD_sendData+0x104>
    1952:	9a 8f       	std	Y+26, r25	; 0x1a
    1954:	89 8f       	std	Y+25, r24	; 0x19
    1956:	8f 89       	ldd	r24, Y+23	; 0x17
    1958:	98 8d       	ldd	r25, Y+24	; 0x18
    195a:	01 97       	sbiw	r24, 0x01	; 1
    195c:	98 8f       	std	Y+24, r25	; 0x18
    195e:	8f 8b       	std	Y+23, r24	; 0x17
    1960:	8f 89       	ldd	r24, Y+23	; 0x17
    1962:	98 8d       	ldd	r25, Y+24	; 0x18
    1964:	89 2b       	or	r24, r25
    1966:	69 f7       	brne	.-38     	; 0x1942 <LCD_sendData+0xf8>
    1968:	14 c0       	rjmp	.+40     	; 0x1992 <LCD_sendData+0x148>
    196a:	6b 89       	ldd	r22, Y+19	; 0x13
    196c:	7c 89       	ldd	r23, Y+20	; 0x14
    196e:	8d 89       	ldd	r24, Y+21	; 0x15
    1970:	9e 89       	ldd	r25, Y+22	; 0x16
    1972:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <__fixunssfsi>
    1976:	dc 01       	movw	r26, r24
    1978:	cb 01       	movw	r24, r22
    197a:	98 8f       	std	Y+24, r25	; 0x18
    197c:	8f 8b       	std	Y+23, r24	; 0x17
    197e:	8f 89       	ldd	r24, Y+23	; 0x17
    1980:	98 8d       	ldd	r25, Y+24	; 0x18
    1982:	9c 8f       	std	Y+28, r25	; 0x1c
    1984:	8b 8f       	std	Y+27, r24	; 0x1b
    1986:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1988:	9c 8d       	ldd	r25, Y+28	; 0x1c
    198a:	01 97       	sbiw	r24, 0x01	; 1
    198c:	f1 f7       	brne	.-4      	; 0x198a <LCD_sendData+0x140>
    198e:	9c 8f       	std	Y+28, r25	; 0x1c
    1990:	8b 8f       	std	Y+27, r24	; 0x1b
    1992:	60 e0       	ldi	r22, 0x00	; 0
    1994:	8b e0       	ldi	r24, 0x0B	; 11
    1996:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <DIO_setPinValue>
    199a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    199c:	81 70       	andi	r24, 0x01	; 1
    199e:	68 2f       	mov	r22, r24
    19a0:	84 e0       	ldi	r24, 0x04	; 4
    19a2:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <DIO_setPinValue>
    19a6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19a8:	86 95       	lsr	r24
    19aa:	81 70       	andi	r24, 0x01	; 1
    19ac:	68 2f       	mov	r22, r24
    19ae:	85 e0       	ldi	r24, 0x05	; 5
    19b0:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <DIO_setPinValue>
    19b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19b6:	86 95       	lsr	r24
    19b8:	86 95       	lsr	r24
    19ba:	81 70       	andi	r24, 0x01	; 1
    19bc:	68 2f       	mov	r22, r24
    19be:	86 e0       	ldi	r24, 0x06	; 6
    19c0:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <DIO_setPinValue>
    19c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19c6:	86 95       	lsr	r24
    19c8:	86 95       	lsr	r24
    19ca:	86 95       	lsr	r24
    19cc:	81 70       	andi	r24, 0x01	; 1
    19ce:	68 2f       	mov	r22, r24
    19d0:	87 e0       	ldi	r24, 0x07	; 7
    19d2:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <DIO_setPinValue>
    19d6:	61 e0       	ldi	r22, 0x01	; 1
    19d8:	8b e0       	ldi	r24, 0x0B	; 11
    19da:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <DIO_setPinValue>
    19de:	80 e0       	ldi	r24, 0x00	; 0
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	a0 e8       	ldi	r26, 0x80	; 128
    19e4:	bf e3       	ldi	r27, 0x3F	; 63
    19e6:	8d 83       	std	Y+5, r24	; 0x05
    19e8:	9e 83       	std	Y+6, r25	; 0x06
    19ea:	af 83       	std	Y+7, r26	; 0x07
    19ec:	b8 87       	std	Y+8, r27	; 0x08
    19ee:	20 e0       	ldi	r18, 0x00	; 0
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	4a e7       	ldi	r20, 0x7A	; 122
    19f4:	55 e4       	ldi	r21, 0x45	; 69
    19f6:	6d 81       	ldd	r22, Y+5	; 0x05
    19f8:	7e 81       	ldd	r23, Y+6	; 0x06
    19fa:	8f 81       	ldd	r24, Y+7	; 0x07
    19fc:	98 85       	ldd	r25, Y+8	; 0x08
    19fe:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <__mulsf3>
    1a02:	dc 01       	movw	r26, r24
    1a04:	cb 01       	movw	r24, r22
    1a06:	89 87       	std	Y+9, r24	; 0x09
    1a08:	9a 87       	std	Y+10, r25	; 0x0a
    1a0a:	ab 87       	std	Y+11, r26	; 0x0b
    1a0c:	bc 87       	std	Y+12, r27	; 0x0c
    1a0e:	20 e0       	ldi	r18, 0x00	; 0
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	40 e8       	ldi	r20, 0x80	; 128
    1a14:	5f e3       	ldi	r21, 0x3F	; 63
    1a16:	69 85       	ldd	r22, Y+9	; 0x09
    1a18:	7a 85       	ldd	r23, Y+10	; 0x0a
    1a1a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a1c:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a1e:	0e 94 40 15 	call	0x2a80	; 0x2a80 <__cmpsf2>
    1a22:	88 23       	and	r24, r24
    1a24:	2c f4       	brge	.+10     	; 0x1a30 <LCD_sendData+0x1e6>
    1a26:	81 e0       	ldi	r24, 0x01	; 1
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	9e 87       	std	Y+14, r25	; 0x0e
    1a2c:	8d 87       	std	Y+13, r24	; 0x0d
    1a2e:	3f c0       	rjmp	.+126    	; 0x1aae <LCD_sendData+0x264>
    1a30:	20 e0       	ldi	r18, 0x00	; 0
    1a32:	3f ef       	ldi	r19, 0xFF	; 255
    1a34:	4f e7       	ldi	r20, 0x7F	; 127
    1a36:	57 e4       	ldi	r21, 0x47	; 71
    1a38:	69 85       	ldd	r22, Y+9	; 0x09
    1a3a:	7a 85       	ldd	r23, Y+10	; 0x0a
    1a3c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a3e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a40:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <__gesf2>
    1a44:	18 16       	cp	r1, r24
    1a46:	4c f5       	brge	.+82     	; 0x1a9a <LCD_sendData+0x250>
    1a48:	20 e0       	ldi	r18, 0x00	; 0
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	40 e2       	ldi	r20, 0x20	; 32
    1a4e:	51 e4       	ldi	r21, 0x41	; 65
    1a50:	6d 81       	ldd	r22, Y+5	; 0x05
    1a52:	7e 81       	ldd	r23, Y+6	; 0x06
    1a54:	8f 81       	ldd	r24, Y+7	; 0x07
    1a56:	98 85       	ldd	r25, Y+8	; 0x08
    1a58:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <__mulsf3>
    1a5c:	dc 01       	movw	r26, r24
    1a5e:	cb 01       	movw	r24, r22
    1a60:	bc 01       	movw	r22, r24
    1a62:	cd 01       	movw	r24, r26
    1a64:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <__fixunssfsi>
    1a68:	dc 01       	movw	r26, r24
    1a6a:	cb 01       	movw	r24, r22
    1a6c:	9e 87       	std	Y+14, r25	; 0x0e
    1a6e:	8d 87       	std	Y+13, r24	; 0x0d
    1a70:	0f c0       	rjmp	.+30     	; 0x1a90 <LCD_sendData+0x246>
    1a72:	80 e9       	ldi	r24, 0x90	; 144
    1a74:	91 e0       	ldi	r25, 0x01	; 1
    1a76:	98 8b       	std	Y+16, r25	; 0x10
    1a78:	8f 87       	std	Y+15, r24	; 0x0f
    1a7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a7c:	98 89       	ldd	r25, Y+16	; 0x10
    1a7e:	01 97       	sbiw	r24, 0x01	; 1
    1a80:	f1 f7       	brne	.-4      	; 0x1a7e <LCD_sendData+0x234>
    1a82:	98 8b       	std	Y+16, r25	; 0x10
    1a84:	8f 87       	std	Y+15, r24	; 0x0f
    1a86:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a88:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a8a:	01 97       	sbiw	r24, 0x01	; 1
    1a8c:	9e 87       	std	Y+14, r25	; 0x0e
    1a8e:	8d 87       	std	Y+13, r24	; 0x0d
    1a90:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a92:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a94:	89 2b       	or	r24, r25
    1a96:	69 f7       	brne	.-38     	; 0x1a72 <LCD_sendData+0x228>
    1a98:	14 c0       	rjmp	.+40     	; 0x1ac2 <LCD_sendData+0x278>
    1a9a:	69 85       	ldd	r22, Y+9	; 0x09
    1a9c:	7a 85       	ldd	r23, Y+10	; 0x0a
    1a9e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1aa0:	9c 85       	ldd	r25, Y+12	; 0x0c
    1aa2:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <__fixunssfsi>
    1aa6:	dc 01       	movw	r26, r24
    1aa8:	cb 01       	movw	r24, r22
    1aaa:	9e 87       	std	Y+14, r25	; 0x0e
    1aac:	8d 87       	std	Y+13, r24	; 0x0d
    1aae:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ab0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ab2:	9a 8b       	std	Y+18, r25	; 0x12
    1ab4:	89 8b       	std	Y+17, r24	; 0x11
    1ab6:	89 89       	ldd	r24, Y+17	; 0x11
    1ab8:	9a 89       	ldd	r25, Y+18	; 0x12
    1aba:	01 97       	sbiw	r24, 0x01	; 1
    1abc:	f1 f7       	brne	.-4      	; 0x1aba <LCD_sendData+0x270>
    1abe:	9a 8b       	std	Y+18, r25	; 0x12
    1ac0:	89 8b       	std	Y+17, r24	; 0x11
    1ac2:	60 e0       	ldi	r22, 0x00	; 0
    1ac4:	8b e0       	ldi	r24, 0x0B	; 11
    1ac6:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <DIO_setPinValue>
    1aca:	00 00       	nop
    1acc:	6d 96       	adiw	r28, 0x1d	; 29
    1ace:	0f b6       	in	r0, 0x3f	; 63
    1ad0:	f8 94       	cli
    1ad2:	de bf       	out	0x3e, r29	; 62
    1ad4:	0f be       	out	0x3f, r0	; 63
    1ad6:	cd bf       	out	0x3d, r28	; 61
    1ad8:	df 91       	pop	r29
    1ada:	cf 91       	pop	r28
    1adc:	08 95       	ret

00001ade <LCD_writeChar>:
    1ade:	cf 93       	push	r28
    1ae0:	df 93       	push	r29
    1ae2:	1f 92       	push	r1
    1ae4:	cd b7       	in	r28, 0x3d	; 61
    1ae6:	de b7       	in	r29, 0x3e	; 62
    1ae8:	89 83       	std	Y+1, r24	; 0x01
    1aea:	60 e0       	ldi	r22, 0x00	; 0
    1aec:	8a e0       	ldi	r24, 0x0A	; 10
    1aee:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <DIO_setPinValue>
    1af2:	61 e0       	ldi	r22, 0x01	; 1
    1af4:	89 e0       	ldi	r24, 0x09	; 9
    1af6:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <DIO_setPinValue>
    1afa:	89 81       	ldd	r24, Y+1	; 0x01
    1afc:	0e 94 25 0c 	call	0x184a	; 0x184a <LCD_sendData>
    1b00:	00 00       	nop
    1b02:	0f 90       	pop	r0
    1b04:	df 91       	pop	r29
    1b06:	cf 91       	pop	r28
    1b08:	08 95       	ret

00001b0a <LCD_writeCmd>:
    1b0a:	cf 93       	push	r28
    1b0c:	df 93       	push	r29
    1b0e:	1f 92       	push	r1
    1b10:	cd b7       	in	r28, 0x3d	; 61
    1b12:	de b7       	in	r29, 0x3e	; 62
    1b14:	89 83       	std	Y+1, r24	; 0x01
    1b16:	60 e0       	ldi	r22, 0x00	; 0
    1b18:	8a e0       	ldi	r24, 0x0A	; 10
    1b1a:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <DIO_setPinValue>
    1b1e:	60 e0       	ldi	r22, 0x00	; 0
    1b20:	89 e0       	ldi	r24, 0x09	; 9
    1b22:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <DIO_setPinValue>
    1b26:	89 81       	ldd	r24, Y+1	; 0x01
    1b28:	0e 94 25 0c 	call	0x184a	; 0x184a <LCD_sendData>
    1b2c:	00 00       	nop
    1b2e:	0f 90       	pop	r0
    1b30:	df 91       	pop	r29
    1b32:	cf 91       	pop	r28
    1b34:	08 95       	ret

00001b36 <LCD_writeStr>:
    1b36:	cf 93       	push	r28
    1b38:	df 93       	push	r29
    1b3a:	00 d0       	rcall	.+0      	; 0x1b3c <LCD_writeStr+0x6>
    1b3c:	1f 92       	push	r1
    1b3e:	cd b7       	in	r28, 0x3d	; 61
    1b40:	de b7       	in	r29, 0x3e	; 62
    1b42:	9b 83       	std	Y+3, r25	; 0x03
    1b44:	8a 83       	std	Y+2, r24	; 0x02
    1b46:	19 82       	std	Y+1, r1	; 0x01
    1b48:	0e c0       	rjmp	.+28     	; 0x1b66 <LCD_writeStr+0x30>
    1b4a:	89 81       	ldd	r24, Y+1	; 0x01
    1b4c:	88 2f       	mov	r24, r24
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	2a 81       	ldd	r18, Y+2	; 0x02
    1b52:	3b 81       	ldd	r19, Y+3	; 0x03
    1b54:	82 0f       	add	r24, r18
    1b56:	93 1f       	adc	r25, r19
    1b58:	fc 01       	movw	r30, r24
    1b5a:	80 81       	ld	r24, Z
    1b5c:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <LCD_writeChar>
    1b60:	89 81       	ldd	r24, Y+1	; 0x01
    1b62:	8f 5f       	subi	r24, 0xFF	; 255
    1b64:	89 83       	std	Y+1, r24	; 0x01
    1b66:	89 81       	ldd	r24, Y+1	; 0x01
    1b68:	88 2f       	mov	r24, r24
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	2a 81       	ldd	r18, Y+2	; 0x02
    1b6e:	3b 81       	ldd	r19, Y+3	; 0x03
    1b70:	82 0f       	add	r24, r18
    1b72:	93 1f       	adc	r25, r19
    1b74:	fc 01       	movw	r30, r24
    1b76:	80 81       	ld	r24, Z
    1b78:	88 23       	and	r24, r24
    1b7a:	39 f7       	brne	.-50     	; 0x1b4a <LCD_writeStr+0x14>
    1b7c:	00 00       	nop
    1b7e:	0f 90       	pop	r0
    1b80:	0f 90       	pop	r0
    1b82:	0f 90       	pop	r0
    1b84:	df 91       	pop	r29
    1b86:	cf 91       	pop	r28
    1b88:	08 95       	ret

00001b8a <LCD_clearDis>:

void LCD_clearDis()
{
    1b8a:	cf 93       	push	r28
    1b8c:	df 93       	push	r29
    1b8e:	cd b7       	in	r28, 0x3d	; 61
    1b90:	de b7       	in	r29, 0x3e	; 62
    1b92:	2e 97       	sbiw	r28, 0x0e	; 14
    1b94:	0f b6       	in	r0, 0x3f	; 63
    1b96:	f8 94       	cli
    1b98:	de bf       	out	0x3e, r29	; 62
    1b9a:	0f be       	out	0x3f, r0	; 63
    1b9c:	cd bf       	out	0x3d, r28	; 61
	LCD_writeCmd(0b00000001);
    1b9e:	81 e0       	ldi	r24, 0x01	; 1
    1ba0:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <LCD_writeCmd>
    1ba4:	80 e0       	ldi	r24, 0x00	; 0
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	a0 e8       	ldi	r26, 0x80	; 128
    1baa:	bf e3       	ldi	r27, 0x3F	; 63
    1bac:	89 83       	std	Y+1, r24	; 0x01
    1bae:	9a 83       	std	Y+2, r25	; 0x02
    1bb0:	ab 83       	std	Y+3, r26	; 0x03
    1bb2:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1bb4:	20 e0       	ldi	r18, 0x00	; 0
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	4a e7       	ldi	r20, 0x7A	; 122
    1bba:	55 e4       	ldi	r21, 0x45	; 69
    1bbc:	69 81       	ldd	r22, Y+1	; 0x01
    1bbe:	7a 81       	ldd	r23, Y+2	; 0x02
    1bc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc4:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <__mulsf3>
    1bc8:	dc 01       	movw	r26, r24
    1bca:	cb 01       	movw	r24, r22
    1bcc:	8d 83       	std	Y+5, r24	; 0x05
    1bce:	9e 83       	std	Y+6, r25	; 0x06
    1bd0:	af 83       	std	Y+7, r26	; 0x07
    1bd2:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1bd4:	20 e0       	ldi	r18, 0x00	; 0
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	40 e8       	ldi	r20, 0x80	; 128
    1bda:	5f e3       	ldi	r21, 0x3F	; 63
    1bdc:	6d 81       	ldd	r22, Y+5	; 0x05
    1bde:	7e 81       	ldd	r23, Y+6	; 0x06
    1be0:	8f 81       	ldd	r24, Y+7	; 0x07
    1be2:	98 85       	ldd	r25, Y+8	; 0x08
    1be4:	0e 94 40 15 	call	0x2a80	; 0x2a80 <__cmpsf2>
    1be8:	88 23       	and	r24, r24
    1bea:	2c f4       	brge	.+10     	; 0x1bf6 <LCD_clearDis+0x6c>
		__ticks = 1;
    1bec:	81 e0       	ldi	r24, 0x01	; 1
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	9a 87       	std	Y+10, r25	; 0x0a
    1bf2:	89 87       	std	Y+9, r24	; 0x09
    1bf4:	3f c0       	rjmp	.+126    	; 0x1c74 <LCD_clearDis+0xea>
	else if (__tmp > 65535)
    1bf6:	20 e0       	ldi	r18, 0x00	; 0
    1bf8:	3f ef       	ldi	r19, 0xFF	; 255
    1bfa:	4f e7       	ldi	r20, 0x7F	; 127
    1bfc:	57 e4       	ldi	r21, 0x47	; 71
    1bfe:	6d 81       	ldd	r22, Y+5	; 0x05
    1c00:	7e 81       	ldd	r23, Y+6	; 0x06
    1c02:	8f 81       	ldd	r24, Y+7	; 0x07
    1c04:	98 85       	ldd	r25, Y+8	; 0x08
    1c06:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <__gesf2>
    1c0a:	18 16       	cp	r1, r24
    1c0c:	4c f5       	brge	.+82     	; 0x1c60 <LCD_clearDis+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	40 e2       	ldi	r20, 0x20	; 32
    1c14:	51 e4       	ldi	r21, 0x41	; 65
    1c16:	69 81       	ldd	r22, Y+1	; 0x01
    1c18:	7a 81       	ldd	r23, Y+2	; 0x02
    1c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c1e:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <__mulsf3>
    1c22:	dc 01       	movw	r26, r24
    1c24:	cb 01       	movw	r24, r22
    1c26:	bc 01       	movw	r22, r24
    1c28:	cd 01       	movw	r24, r26
    1c2a:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <__fixunssfsi>
    1c2e:	dc 01       	movw	r26, r24
    1c30:	cb 01       	movw	r24, r22
    1c32:	9a 87       	std	Y+10, r25	; 0x0a
    1c34:	89 87       	std	Y+9, r24	; 0x09
    1c36:	0f c0       	rjmp	.+30     	; 0x1c56 <LCD_clearDis+0xcc>
    1c38:	80 e9       	ldi	r24, 0x90	; 144
    1c3a:	91 e0       	ldi	r25, 0x01	; 1
    1c3c:	9c 87       	std	Y+12, r25	; 0x0c
    1c3e:	8b 87       	std	Y+11, r24	; 0x0b
    1c40:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c42:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c44:	01 97       	sbiw	r24, 0x01	; 1
    1c46:	f1 f7       	brne	.-4      	; 0x1c44 <LCD_clearDis+0xba>
    1c48:	9c 87       	std	Y+12, r25	; 0x0c
    1c4a:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c4c:	89 85       	ldd	r24, Y+9	; 0x09
    1c4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c50:	01 97       	sbiw	r24, 0x01	; 1
    1c52:	9a 87       	std	Y+10, r25	; 0x0a
    1c54:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c56:	89 85       	ldd	r24, Y+9	; 0x09
    1c58:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c5a:	89 2b       	or	r24, r25
    1c5c:	69 f7       	brne	.-38     	; 0x1c38 <LCD_clearDis+0xae>
	_delay_ms(1);
}
    1c5e:	14 c0       	rjmp	.+40     	; 0x1c88 <LCD_clearDis+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c60:	6d 81       	ldd	r22, Y+5	; 0x05
    1c62:	7e 81       	ldd	r23, Y+6	; 0x06
    1c64:	8f 81       	ldd	r24, Y+7	; 0x07
    1c66:	98 85       	ldd	r25, Y+8	; 0x08
    1c68:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <__fixunssfsi>
    1c6c:	dc 01       	movw	r26, r24
    1c6e:	cb 01       	movw	r24, r22
    1c70:	9a 87       	std	Y+10, r25	; 0x0a
    1c72:	89 87       	std	Y+9, r24	; 0x09
    1c74:	89 85       	ldd	r24, Y+9	; 0x09
    1c76:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c78:	9e 87       	std	Y+14, r25	; 0x0e
    1c7a:	8d 87       	std	Y+13, r24	; 0x0d
    1c7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c80:	01 97       	sbiw	r24, 0x01	; 1
    1c82:	f1 f7       	brne	.-4      	; 0x1c80 <LCD_clearDis+0xf6>
    1c84:	9e 87       	std	Y+14, r25	; 0x0e
    1c86:	8d 87       	std	Y+13, r24	; 0x0d
    1c88:	00 00       	nop
    1c8a:	2e 96       	adiw	r28, 0x0e	; 14
    1c8c:	0f b6       	in	r0, 0x3f	; 63
    1c8e:	f8 94       	cli
    1c90:	de bf       	out	0x3e, r29	; 62
    1c92:	0f be       	out	0x3f, r0	; 63
    1c94:	cd bf       	out	0x3d, r28	; 61
    1c96:	df 91       	pop	r29
    1c98:	cf 91       	pop	r28
    1c9a:	08 95       	ret

00001c9c <LCD_goto>:

void LCD_goto(u8 x, u8 y)
{
    1c9c:	cf 93       	push	r28
    1c9e:	df 93       	push	r29
    1ca0:	00 d0       	rcall	.+0      	; 0x1ca2 <LCD_goto+0x6>
    1ca2:	cd b7       	in	r28, 0x3d	; 61
    1ca4:	de b7       	in	r29, 0x3e	; 62
    1ca6:	89 83       	std	Y+1, r24	; 0x01
    1ca8:	6a 83       	std	Y+2, r22	; 0x02
	if(y==1)
    1caa:	8a 81       	ldd	r24, Y+2	; 0x02
    1cac:	81 30       	cpi	r24, 0x01	; 1
    1cae:	29 f4       	brne	.+10     	; 0x1cba <LCD_goto+0x1e>
	{
	//line 1
	LCD_writeCmd(0b10000000+x);
    1cb0:	89 81       	ldd	r24, Y+1	; 0x01
    1cb2:	80 58       	subi	r24, 0x80	; 128
    1cb4:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <LCD_writeCmd>
	else if(y==2)
	{
	//line 2
	LCD_writeCmd(0b10000000+0x40+x);
	}
}
    1cb8:	07 c0       	rjmp	.+14     	; 0x1cc8 <LCD_goto+0x2c>
	if(y==1)
	{
	//line 1
	LCD_writeCmd(0b10000000+x);
	}
	else if(y==2)
    1cba:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbc:	82 30       	cpi	r24, 0x02	; 2
    1cbe:	21 f4       	brne	.+8      	; 0x1cc8 <LCD_goto+0x2c>
	{
	//line 2
	LCD_writeCmd(0b10000000+0x40+x);
    1cc0:	89 81       	ldd	r24, Y+1	; 0x01
    1cc2:	80 54       	subi	r24, 0x40	; 64
    1cc4:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <LCD_writeCmd>
	}
}
    1cc8:	00 00       	nop
    1cca:	0f 90       	pop	r0
    1ccc:	0f 90       	pop	r0
    1cce:	df 91       	pop	r29
    1cd0:	cf 91       	pop	r28
    1cd2:	08 95       	ret

00001cd4 <ADC_init>:

#include "EXT_INT.h"
#include "DIO_INT.h"
#include "ADC_INT.h"
void ADC_init()
{
    1cd4:	cf 93       	push	r28
    1cd6:	df 93       	push	r29
    1cd8:	cd b7       	in	r28, 0x3d	; 61
    1cda:	de b7       	in	r29, 0x3e	; 62
	//Select ref voltage(AVCC)
	SET_BIT(ADMUX,REFS0);
    1cdc:	87 e2       	ldi	r24, 0x27	; 39
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	27 e2       	ldi	r18, 0x27	; 39
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	f9 01       	movw	r30, r18
    1ce6:	20 81       	ld	r18, Z
    1ce8:	20 64       	ori	r18, 0x40	; 64
    1cea:	fc 01       	movw	r30, r24
    1cec:	20 83       	st	Z, r18
	CLEAR_BIT(ADMUX,REFS1);
    1cee:	87 e2       	ldi	r24, 0x27	; 39
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	27 e2       	ldi	r18, 0x27	; 39
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	f9 01       	movw	r30, r18
    1cf8:	20 81       	ld	r18, Z
    1cfa:	2f 77       	andi	r18, 0x7F	; 127
    1cfc:	fc 01       	movw	r30, r24
    1cfe:	20 83       	st	Z, r18

	//select prescaler
	SET_BIT(ADCSRA,ADPS0);
    1d00:	86 e2       	ldi	r24, 0x26	; 38
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	26 e2       	ldi	r18, 0x26	; 38
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	f9 01       	movw	r30, r18
    1d0a:	20 81       	ld	r18, Z
    1d0c:	21 60       	ori	r18, 0x01	; 1
    1d0e:	fc 01       	movw	r30, r24
    1d10:	20 83       	st	Z, r18
	SET_BIT(ADCSRA,ADPS1);
    1d12:	86 e2       	ldi	r24, 0x26	; 38
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	26 e2       	ldi	r18, 0x26	; 38
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	f9 01       	movw	r30, r18
    1d1c:	20 81       	ld	r18, Z
    1d1e:	22 60       	ori	r18, 0x02	; 2
    1d20:	fc 01       	movw	r30, r24
    1d22:	20 83       	st	Z, r18
	SET_BIT(ADCSRA,ADPS2);
    1d24:	86 e2       	ldi	r24, 0x26	; 38
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	26 e2       	ldi	r18, 0x26	; 38
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	f9 01       	movw	r30, r18
    1d2e:	20 81       	ld	r18, Z
    1d30:	24 60       	ori	r18, 0x04	; 4
    1d32:	fc 01       	movw	r30, r24
    1d34:	20 83       	st	Z, r18

	//enable
	SET_BIT(ADCSRA,ADEN);
    1d36:	86 e2       	ldi	r24, 0x26	; 38
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	26 e2       	ldi	r18, 0x26	; 38
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	f9 01       	movw	r30, r18
    1d40:	20 81       	ld	r18, Z
    1d42:	20 68       	ori	r18, 0x80	; 128
    1d44:	fc 01       	movw	r30, r24
    1d46:	20 83       	st	Z, r18

}
    1d48:	00 00       	nop
    1d4a:	df 91       	pop	r29
    1d4c:	cf 91       	pop	r28
    1d4e:	08 95       	ret

00001d50 <ADC_read>:

u16 ADC_read(u8 channel)//return digital
{
    1d50:	cf 93       	push	r28
    1d52:	df 93       	push	r29
    1d54:	1f 92       	push	r1
    1d56:	cd b7       	in	r28, 0x3d	; 61
    1d58:	de b7       	in	r29, 0x3e	; 62
    1d5a:	89 83       	std	Y+1, r24	; 0x01
	//select ch
	if (channel==ADC0)
    1d5c:	89 81       	ldd	r24, Y+1	; 0x01
    1d5e:	88 23       	and	r24, r24
    1d60:	71 f5       	brne	.+92     	; 0x1dbe <ADC_read+0x6e>
	{
	
	CLEAR_BIT(ADMUX,MUX0);
    1d62:	87 e2       	ldi	r24, 0x27	; 39
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	27 e2       	ldi	r18, 0x27	; 39
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	f9 01       	movw	r30, r18
    1d6c:	20 81       	ld	r18, Z
    1d6e:	2e 7f       	andi	r18, 0xFE	; 254
    1d70:	fc 01       	movw	r30, r24
    1d72:	20 83       	st	Z, r18
	CLEAR_BIT(ADMUX,MUX1);
    1d74:	87 e2       	ldi	r24, 0x27	; 39
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	27 e2       	ldi	r18, 0x27	; 39
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	f9 01       	movw	r30, r18
    1d7e:	20 81       	ld	r18, Z
    1d80:	2d 7f       	andi	r18, 0xFD	; 253
    1d82:	fc 01       	movw	r30, r24
    1d84:	20 83       	st	Z, r18
	CLEAR_BIT(ADMUX,MUX2);
    1d86:	87 e2       	ldi	r24, 0x27	; 39
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	27 e2       	ldi	r18, 0x27	; 39
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	f9 01       	movw	r30, r18
    1d90:	20 81       	ld	r18, Z
    1d92:	2b 7f       	andi	r18, 0xFB	; 251
    1d94:	fc 01       	movw	r30, r24
    1d96:	20 83       	st	Z, r18
	CLEAR_BIT(ADMUX,MUX3);
    1d98:	87 e2       	ldi	r24, 0x27	; 39
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	27 e2       	ldi	r18, 0x27	; 39
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	f9 01       	movw	r30, r18
    1da2:	20 81       	ld	r18, Z
    1da4:	27 7f       	andi	r18, 0xF7	; 247
    1da6:	fc 01       	movw	r30, r24
    1da8:	20 83       	st	Z, r18
	CLEAR_BIT(ADMUX,MUX4);
    1daa:	87 e2       	ldi	r24, 0x27	; 39
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	27 e2       	ldi	r18, 0x27	; 39
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	f9 01       	movw	r30, r18
    1db4:	20 81       	ld	r18, Z
    1db6:	2f 7e       	andi	r18, 0xEF	; 239
    1db8:	fc 01       	movw	r30, r24
    1dba:	20 83       	st	Z, r18
    1dbc:	61 c0       	rjmp	.+194    	; 0x1e80 <ADC_read+0x130>
	}
	else if (channel==ADC1)
    1dbe:	89 81       	ldd	r24, Y+1	; 0x01
    1dc0:	81 30       	cpi	r24, 0x01	; 1
    1dc2:	71 f5       	brne	.+92     	; 0x1e20 <ADC_read+0xd0>
	{
		
		SET_BIT(ADMUX,MUX0);
    1dc4:	87 e2       	ldi	r24, 0x27	; 39
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	27 e2       	ldi	r18, 0x27	; 39
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	f9 01       	movw	r30, r18
    1dce:	20 81       	ld	r18, Z
    1dd0:	21 60       	ori	r18, 0x01	; 1
    1dd2:	fc 01       	movw	r30, r24
    1dd4:	20 83       	st	Z, r18
		CLEAR_BIT(ADMUX,MUX1);
    1dd6:	87 e2       	ldi	r24, 0x27	; 39
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	27 e2       	ldi	r18, 0x27	; 39
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	f9 01       	movw	r30, r18
    1de0:	20 81       	ld	r18, Z
    1de2:	2d 7f       	andi	r18, 0xFD	; 253
    1de4:	fc 01       	movw	r30, r24
    1de6:	20 83       	st	Z, r18
		CLEAR_BIT(ADMUX,MUX2);
    1de8:	87 e2       	ldi	r24, 0x27	; 39
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	27 e2       	ldi	r18, 0x27	; 39
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	f9 01       	movw	r30, r18
    1df2:	20 81       	ld	r18, Z
    1df4:	2b 7f       	andi	r18, 0xFB	; 251
    1df6:	fc 01       	movw	r30, r24
    1df8:	20 83       	st	Z, r18
		CLEAR_BIT(ADMUX,MUX3);
    1dfa:	87 e2       	ldi	r24, 0x27	; 39
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	27 e2       	ldi	r18, 0x27	; 39
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	f9 01       	movw	r30, r18
    1e04:	20 81       	ld	r18, Z
    1e06:	27 7f       	andi	r18, 0xF7	; 247
    1e08:	fc 01       	movw	r30, r24
    1e0a:	20 83       	st	Z, r18
		CLEAR_BIT(ADMUX,MUX4);
    1e0c:	87 e2       	ldi	r24, 0x27	; 39
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	27 e2       	ldi	r18, 0x27	; 39
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	f9 01       	movw	r30, r18
    1e16:	20 81       	ld	r18, Z
    1e18:	2f 7e       	andi	r18, 0xEF	; 239
    1e1a:	fc 01       	movw	r30, r24
    1e1c:	20 83       	st	Z, r18
    1e1e:	30 c0       	rjmp	.+96     	; 0x1e80 <ADC_read+0x130>
	}
	else if (channel==ADC2)
    1e20:	89 81       	ldd	r24, Y+1	; 0x01
    1e22:	82 30       	cpi	r24, 0x02	; 2
    1e24:	69 f5       	brne	.+90     	; 0x1e80 <ADC_read+0x130>
	{
		
		CLEAR_BIT(ADMUX,MUX0);
    1e26:	87 e2       	ldi	r24, 0x27	; 39
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	27 e2       	ldi	r18, 0x27	; 39
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	f9 01       	movw	r30, r18
    1e30:	20 81       	ld	r18, Z
    1e32:	2e 7f       	andi	r18, 0xFE	; 254
    1e34:	fc 01       	movw	r30, r24
    1e36:	20 83       	st	Z, r18
		SET_BIT(ADMUX,MUX1);
    1e38:	87 e2       	ldi	r24, 0x27	; 39
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	27 e2       	ldi	r18, 0x27	; 39
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	f9 01       	movw	r30, r18
    1e42:	20 81       	ld	r18, Z
    1e44:	22 60       	ori	r18, 0x02	; 2
    1e46:	fc 01       	movw	r30, r24
    1e48:	20 83       	st	Z, r18
		CLEAR_BIT(ADMUX,MUX2);
    1e4a:	87 e2       	ldi	r24, 0x27	; 39
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	27 e2       	ldi	r18, 0x27	; 39
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	f9 01       	movw	r30, r18
    1e54:	20 81       	ld	r18, Z
    1e56:	2b 7f       	andi	r18, 0xFB	; 251
    1e58:	fc 01       	movw	r30, r24
    1e5a:	20 83       	st	Z, r18
		CLEAR_BIT(ADMUX,MUX3);
    1e5c:	87 e2       	ldi	r24, 0x27	; 39
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	27 e2       	ldi	r18, 0x27	; 39
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	f9 01       	movw	r30, r18
    1e66:	20 81       	ld	r18, Z
    1e68:	27 7f       	andi	r18, 0xF7	; 247
    1e6a:	fc 01       	movw	r30, r24
    1e6c:	20 83       	st	Z, r18
		CLEAR_BIT(ADMUX,MUX4);
    1e6e:	87 e2       	ldi	r24, 0x27	; 39
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	27 e2       	ldi	r18, 0x27	; 39
    1e74:	30 e0       	ldi	r19, 0x00	; 0
    1e76:	f9 01       	movw	r30, r18
    1e78:	20 81       	ld	r18, Z
    1e7a:	2f 7e       	andi	r18, 0xEF	; 239
    1e7c:	fc 01       	movw	r30, r24
    1e7e:	20 83       	st	Z, r18
	}

	//start conv
	SET_BIT(ADCSRA,ADSC);
    1e80:	86 e2       	ldi	r24, 0x26	; 38
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	26 e2       	ldi	r18, 0x26	; 38
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	f9 01       	movw	r30, r18
    1e8a:	20 81       	ld	r18, Z
    1e8c:	20 64       	ori	r18, 0x40	; 64
    1e8e:	fc 01       	movw	r30, r24
    1e90:	20 83       	st	Z, r18
	//check if finish
	while (	GET_BIT(ADCSRA,ADSC));
    1e92:	00 00       	nop
    1e94:	86 e2       	ldi	r24, 0x26	; 38
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	fc 01       	movw	r30, r24
    1e9a:	80 81       	ld	r24, Z
    1e9c:	82 95       	swap	r24
    1e9e:	86 95       	lsr	r24
    1ea0:	86 95       	lsr	r24
    1ea2:	83 70       	andi	r24, 0x03	; 3
    1ea4:	88 2f       	mov	r24, r24
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	81 70       	andi	r24, 0x01	; 1
    1eaa:	99 27       	eor	r25, r25
    1eac:	89 2b       	or	r24, r25
    1eae:	91 f7       	brne	.-28     	; 0x1e94 <ADC_read+0x144>

	//read result
	return ADCLH;
    1eb0:	84 e2       	ldi	r24, 0x24	; 36
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	fc 01       	movw	r30, r24
    1eb6:	80 81       	ld	r24, Z
    1eb8:	91 81       	ldd	r25, Z+1	; 0x01
}
    1eba:	0f 90       	pop	r0
    1ebc:	df 91       	pop	r29
    1ebe:	cf 91       	pop	r28
    1ec0:	08 95       	ret

00001ec2 <DIO_setPinValue>:
 */ 
#include "DIO_INT.h"
#include "STD_TYPES.h"
#include "BIT_MATH.h"
void DIO_setPinValue(u8 pinNum,u8 level)
{
    1ec2:	cf 93       	push	r28
    1ec4:	df 93       	push	r29
    1ec6:	00 d0       	rcall	.+0      	; 0x1ec8 <DIO_setPinValue+0x6>
    1ec8:	cd b7       	in	r28, 0x3d	; 61
    1eca:	de b7       	in	r29, 0x3e	; 62
    1ecc:	89 83       	std	Y+1, r24	; 0x01
    1ece:	6a 83       	std	Y+2, r22	; 0x02
	if (pinNum>=0 && pinNum<=7)
    1ed0:	89 81       	ldd	r24, Y+1	; 0x01
    1ed2:	88 30       	cpi	r24, 0x08	; 8
    1ed4:	90 f5       	brcc	.+100    	; 0x1f3a <DIO_setPinValue+0x78>
	{
		if (level==DIO_HIGH)
    1ed6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed8:	81 30       	cpi	r24, 0x01	; 1
    1eda:	a9 f4       	brne	.+42     	; 0x1f06 <DIO_setPinValue+0x44>
		{
			SET_BIT(PORTA,pinNum);
    1edc:	8b e3       	ldi	r24, 0x3B	; 59
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	2b e3       	ldi	r18, 0x3B	; 59
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	f9 01       	movw	r30, r18
    1ee6:	20 81       	ld	r18, Z
    1ee8:	62 2f       	mov	r22, r18
    1eea:	29 81       	ldd	r18, Y+1	; 0x01
    1eec:	42 2f       	mov	r20, r18
    1eee:	50 e0       	ldi	r21, 0x00	; 0
    1ef0:	21 e0       	ldi	r18, 0x01	; 1
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	02 c0       	rjmp	.+4      	; 0x1efa <DIO_setPinValue+0x38>
    1ef6:	22 0f       	add	r18, r18
    1ef8:	33 1f       	adc	r19, r19
    1efa:	4a 95       	dec	r20
    1efc:	e2 f7       	brpl	.-8      	; 0x1ef6 <DIO_setPinValue+0x34>
    1efe:	26 2b       	or	r18, r22
    1f00:	fc 01       	movw	r30, r24
    1f02:	20 83       	st	Z, r18
	  	{
		  	CLEAR_BIT(PORTD,pinNum);
	  	}
  	}
	
}
    1f04:	cd c0       	rjmp	.+410    	; 0x20a0 <DIO_setPinValue+0x1de>
	{
		if (level==DIO_HIGH)
		{
			SET_BIT(PORTA,pinNum);
		}
		else if (level==DIO_LOW)
    1f06:	8a 81       	ldd	r24, Y+2	; 0x02
    1f08:	88 23       	and	r24, r24
    1f0a:	09 f0       	breq	.+2      	; 0x1f0e <DIO_setPinValue+0x4c>
    1f0c:	c9 c0       	rjmp	.+402    	; 0x20a0 <DIO_setPinValue+0x1de>
		{
			CLEAR_BIT(PORTA,pinNum);
    1f0e:	8b e3       	ldi	r24, 0x3B	; 59
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	2b e3       	ldi	r18, 0x3B	; 59
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	f9 01       	movw	r30, r18
    1f18:	20 81       	ld	r18, Z
    1f1a:	62 2f       	mov	r22, r18
    1f1c:	29 81       	ldd	r18, Y+1	; 0x01
    1f1e:	42 2f       	mov	r20, r18
    1f20:	50 e0       	ldi	r21, 0x00	; 0
    1f22:	21 e0       	ldi	r18, 0x01	; 1
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	02 c0       	rjmp	.+4      	; 0x1f2c <DIO_setPinValue+0x6a>
    1f28:	22 0f       	add	r18, r18
    1f2a:	33 1f       	adc	r19, r19
    1f2c:	4a 95       	dec	r20
    1f2e:	e2 f7       	brpl	.-8      	; 0x1f28 <DIO_setPinValue+0x66>
    1f30:	20 95       	com	r18
    1f32:	26 23       	and	r18, r22
    1f34:	fc 01       	movw	r30, r24
    1f36:	20 83       	st	Z, r18
	  	{
		  	CLEAR_BIT(PORTD,pinNum);
	  	}
  	}
	
}
    1f38:	b3 c0       	rjmp	.+358    	; 0x20a0 <DIO_setPinValue+0x1de>
		else if (level==DIO_LOW)
		{
			CLEAR_BIT(PORTA,pinNum);
		}
	}
	else if (pinNum>=8 && pinNum<=15)
    1f3a:	89 81       	ldd	r24, Y+1	; 0x01
    1f3c:	88 30       	cpi	r24, 0x08	; 8
    1f3e:	c0 f1       	brcs	.+112    	; 0x1fb0 <DIO_setPinValue+0xee>
    1f40:	89 81       	ldd	r24, Y+1	; 0x01
    1f42:	80 31       	cpi	r24, 0x10	; 16
    1f44:	a8 f5       	brcc	.+106    	; 0x1fb0 <DIO_setPinValue+0xee>
	{
		pinNum-=8;
    1f46:	89 81       	ldd	r24, Y+1	; 0x01
    1f48:	88 50       	subi	r24, 0x08	; 8
    1f4a:	89 83       	std	Y+1, r24	; 0x01
				if (level==DIO_HIGH)
    1f4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4e:	81 30       	cpi	r24, 0x01	; 1
    1f50:	a9 f4       	brne	.+42     	; 0x1f7c <DIO_setPinValue+0xba>
		{
			SET_BIT(PORTB,pinNum);
    1f52:	88 e3       	ldi	r24, 0x38	; 56
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	28 e3       	ldi	r18, 0x38	; 56
    1f58:	30 e0       	ldi	r19, 0x00	; 0
    1f5a:	f9 01       	movw	r30, r18
    1f5c:	20 81       	ld	r18, Z
    1f5e:	62 2f       	mov	r22, r18
    1f60:	29 81       	ldd	r18, Y+1	; 0x01
    1f62:	42 2f       	mov	r20, r18
    1f64:	50 e0       	ldi	r21, 0x00	; 0
    1f66:	21 e0       	ldi	r18, 0x01	; 1
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	02 c0       	rjmp	.+4      	; 0x1f70 <DIO_setPinValue+0xae>
    1f6c:	22 0f       	add	r18, r18
    1f6e:	33 1f       	adc	r19, r19
    1f70:	4a 95       	dec	r20
    1f72:	e2 f7       	brpl	.-8      	; 0x1f6c <DIO_setPinValue+0xaa>
    1f74:	26 2b       	or	r18, r22
    1f76:	fc 01       	movw	r30, r24
    1f78:	20 83       	st	Z, r18
		}
	}
	else if (pinNum>=8 && pinNum<=15)
	{
		pinNum-=8;
				if (level==DIO_HIGH)
    1f7a:	8f c0       	rjmp	.+286    	; 0x209a <DIO_setPinValue+0x1d8>
		{
			SET_BIT(PORTB,pinNum);
		}
		else if (level==DIO_LOW)
    1f7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7e:	88 23       	and	r24, r24
    1f80:	09 f0       	breq	.+2      	; 0x1f84 <DIO_setPinValue+0xc2>
    1f82:	8b c0       	rjmp	.+278    	; 0x209a <DIO_setPinValue+0x1d8>
		{
			CLEAR_BIT(PORTB,pinNum);
    1f84:	88 e3       	ldi	r24, 0x38	; 56
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	28 e3       	ldi	r18, 0x38	; 56
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	f9 01       	movw	r30, r18
    1f8e:	20 81       	ld	r18, Z
    1f90:	62 2f       	mov	r22, r18
    1f92:	29 81       	ldd	r18, Y+1	; 0x01
    1f94:	42 2f       	mov	r20, r18
    1f96:	50 e0       	ldi	r21, 0x00	; 0
    1f98:	21 e0       	ldi	r18, 0x01	; 1
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	02 c0       	rjmp	.+4      	; 0x1fa2 <DIO_setPinValue+0xe0>
    1f9e:	22 0f       	add	r18, r18
    1fa0:	33 1f       	adc	r19, r19
    1fa2:	4a 95       	dec	r20
    1fa4:	e2 f7       	brpl	.-8      	; 0x1f9e <DIO_setPinValue+0xdc>
    1fa6:	20 95       	com	r18
    1fa8:	26 23       	and	r18, r22
    1faa:	fc 01       	movw	r30, r24
    1fac:	20 83       	st	Z, r18
		}
	}
	else if (pinNum>=8 && pinNum<=15)
	{
		pinNum-=8;
				if (level==DIO_HIGH)
    1fae:	75 c0       	rjmp	.+234    	; 0x209a <DIO_setPinValue+0x1d8>
		else if (level==DIO_LOW)
		{
			CLEAR_BIT(PORTB,pinNum);
		}
	}
  	else if (pinNum>=16 && pinNum<=24)
    1fb0:	89 81       	ldd	r24, Y+1	; 0x01
    1fb2:	80 31       	cpi	r24, 0x10	; 16
    1fb4:	c0 f1       	brcs	.+112    	; 0x2026 <DIO_setPinValue+0x164>
    1fb6:	89 81       	ldd	r24, Y+1	; 0x01
    1fb8:	89 31       	cpi	r24, 0x19	; 25
    1fba:	a8 f5       	brcc	.+106    	; 0x2026 <DIO_setPinValue+0x164>
  	{
	  	pinNum-=16;
    1fbc:	89 81       	ldd	r24, Y+1	; 0x01
    1fbe:	80 51       	subi	r24, 0x10	; 16
    1fc0:	89 83       	std	Y+1, r24	; 0x01
	  	if (level==DIO_HIGH)
    1fc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc4:	81 30       	cpi	r24, 0x01	; 1
    1fc6:	a9 f4       	brne	.+42     	; 0x1ff2 <DIO_setPinValue+0x130>
	  	{
		  	SET_BIT(PORTC,pinNum);
    1fc8:	85 e3       	ldi	r24, 0x35	; 53
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	25 e3       	ldi	r18, 0x35	; 53
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	f9 01       	movw	r30, r18
    1fd2:	20 81       	ld	r18, Z
    1fd4:	62 2f       	mov	r22, r18
    1fd6:	29 81       	ldd	r18, Y+1	; 0x01
    1fd8:	42 2f       	mov	r20, r18
    1fda:	50 e0       	ldi	r21, 0x00	; 0
    1fdc:	21 e0       	ldi	r18, 0x01	; 1
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	02 c0       	rjmp	.+4      	; 0x1fe6 <DIO_setPinValue+0x124>
    1fe2:	22 0f       	add	r18, r18
    1fe4:	33 1f       	adc	r19, r19
    1fe6:	4a 95       	dec	r20
    1fe8:	e2 f7       	brpl	.-8      	; 0x1fe2 <DIO_setPinValue+0x120>
    1fea:	26 2b       	or	r18, r22
    1fec:	fc 01       	movw	r30, r24
    1fee:	20 83       	st	Z, r18
		}
	}
  	else if (pinNum>=16 && pinNum<=24)
  	{
	  	pinNum-=16;
	  	if (level==DIO_HIGH)
    1ff0:	56 c0       	rjmp	.+172    	; 0x209e <DIO_setPinValue+0x1dc>
	  	{
		  	SET_BIT(PORTC,pinNum);
	  	}
	  	else if (level==DIO_LOW)
    1ff2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff4:	88 23       	and	r24, r24
    1ff6:	09 f0       	breq	.+2      	; 0x1ffa <DIO_setPinValue+0x138>
    1ff8:	52 c0       	rjmp	.+164    	; 0x209e <DIO_setPinValue+0x1dc>
	  	{
		  	CLEAR_BIT(PORTC,pinNum);
    1ffa:	85 e3       	ldi	r24, 0x35	; 53
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	25 e3       	ldi	r18, 0x35	; 53
    2000:	30 e0       	ldi	r19, 0x00	; 0
    2002:	f9 01       	movw	r30, r18
    2004:	20 81       	ld	r18, Z
    2006:	62 2f       	mov	r22, r18
    2008:	29 81       	ldd	r18, Y+1	; 0x01
    200a:	42 2f       	mov	r20, r18
    200c:	50 e0       	ldi	r21, 0x00	; 0
    200e:	21 e0       	ldi	r18, 0x01	; 1
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	02 c0       	rjmp	.+4      	; 0x2018 <DIO_setPinValue+0x156>
    2014:	22 0f       	add	r18, r18
    2016:	33 1f       	adc	r19, r19
    2018:	4a 95       	dec	r20
    201a:	e2 f7       	brpl	.-8      	; 0x2014 <DIO_setPinValue+0x152>
    201c:	20 95       	com	r18
    201e:	26 23       	and	r18, r22
    2020:	fc 01       	movw	r30, r24
    2022:	20 83       	st	Z, r18
		}
	}
  	else if (pinNum>=16 && pinNum<=24)
  	{
	  	pinNum-=16;
	  	if (level==DIO_HIGH)
    2024:	3c c0       	rjmp	.+120    	; 0x209e <DIO_setPinValue+0x1dc>
	  	else if (level==DIO_LOW)
	  	{
		  	CLEAR_BIT(PORTC,pinNum);
	  	}
  	}
  	else if (pinNum>=24 && pinNum<=31)
    2026:	89 81       	ldd	r24, Y+1	; 0x01
    2028:	88 31       	cpi	r24, 0x18	; 24
    202a:	d0 f1       	brcs	.+116    	; 0x20a0 <DIO_setPinValue+0x1de>
    202c:	89 81       	ldd	r24, Y+1	; 0x01
    202e:	80 32       	cpi	r24, 0x20	; 32
    2030:	b8 f5       	brcc	.+110    	; 0x20a0 <DIO_setPinValue+0x1de>
  	{
	  	pinNum-=24;
    2032:	89 81       	ldd	r24, Y+1	; 0x01
    2034:	88 51       	subi	r24, 0x18	; 24
    2036:	89 83       	std	Y+1, r24	; 0x01
	  	if (level==DIO_HIGH)
    2038:	8a 81       	ldd	r24, Y+2	; 0x02
    203a:	81 30       	cpi	r24, 0x01	; 1
    203c:	a9 f4       	brne	.+42     	; 0x2068 <DIO_setPinValue+0x1a6>
	  	{
		  	SET_BIT(PORTD,pinNum);
    203e:	82 e3       	ldi	r24, 0x32	; 50
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	22 e3       	ldi	r18, 0x32	; 50
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	f9 01       	movw	r30, r18
    2048:	20 81       	ld	r18, Z
    204a:	62 2f       	mov	r22, r18
    204c:	29 81       	ldd	r18, Y+1	; 0x01
    204e:	42 2f       	mov	r20, r18
    2050:	50 e0       	ldi	r21, 0x00	; 0
    2052:	21 e0       	ldi	r18, 0x01	; 1
    2054:	30 e0       	ldi	r19, 0x00	; 0
    2056:	02 c0       	rjmp	.+4      	; 0x205c <DIO_setPinValue+0x19a>
    2058:	22 0f       	add	r18, r18
    205a:	33 1f       	adc	r19, r19
    205c:	4a 95       	dec	r20
    205e:	e2 f7       	brpl	.-8      	; 0x2058 <DIO_setPinValue+0x196>
    2060:	26 2b       	or	r18, r22
    2062:	fc 01       	movw	r30, r24
    2064:	20 83       	st	Z, r18
	  	{
		  	CLEAR_BIT(PORTD,pinNum);
	  	}
  	}
	
}
    2066:	1c c0       	rjmp	.+56     	; 0x20a0 <DIO_setPinValue+0x1de>
	  	pinNum-=24;
	  	if (level==DIO_HIGH)
	  	{
		  	SET_BIT(PORTD,pinNum);
	  	}
	  	else if (level==DIO_LOW)
    2068:	8a 81       	ldd	r24, Y+2	; 0x02
    206a:	88 23       	and	r24, r24
    206c:	c9 f4       	brne	.+50     	; 0x20a0 <DIO_setPinValue+0x1de>
	  	{
		  	CLEAR_BIT(PORTD,pinNum);
    206e:	82 e3       	ldi	r24, 0x32	; 50
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	22 e3       	ldi	r18, 0x32	; 50
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	f9 01       	movw	r30, r18
    2078:	20 81       	ld	r18, Z
    207a:	62 2f       	mov	r22, r18
    207c:	29 81       	ldd	r18, Y+1	; 0x01
    207e:	42 2f       	mov	r20, r18
    2080:	50 e0       	ldi	r21, 0x00	; 0
    2082:	21 e0       	ldi	r18, 0x01	; 1
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	02 c0       	rjmp	.+4      	; 0x208c <DIO_setPinValue+0x1ca>
    2088:	22 0f       	add	r18, r18
    208a:	33 1f       	adc	r19, r19
    208c:	4a 95       	dec	r20
    208e:	e2 f7       	brpl	.-8      	; 0x2088 <DIO_setPinValue+0x1c6>
    2090:	20 95       	com	r18
    2092:	26 23       	and	r18, r22
    2094:	fc 01       	movw	r30, r24
    2096:	20 83       	st	Z, r18
	  	}
  	}
	
}
    2098:	03 c0       	rjmp	.+6      	; 0x20a0 <DIO_setPinValue+0x1de>
		}
	}
	else if (pinNum>=8 && pinNum<=15)
	{
		pinNum-=8;
				if (level==DIO_HIGH)
    209a:	00 00       	nop
    209c:	01 c0       	rjmp	.+2      	; 0x20a0 <DIO_setPinValue+0x1de>
		}
	}
  	else if (pinNum>=16 && pinNum<=24)
  	{
	  	pinNum-=16;
	  	if (level==DIO_HIGH)
    209e:	00 00       	nop
	  	{
		  	CLEAR_BIT(PORTD,pinNum);
	  	}
  	}
	
}
    20a0:	00 00       	nop
    20a2:	0f 90       	pop	r0
    20a4:	0f 90       	pop	r0
    20a6:	df 91       	pop	r29
    20a8:	cf 91       	pop	r28
    20aa:	08 95       	ret

000020ac <DIO_setPinDir>:
void DIO_setPinDir(u8 pinNum, u8 state){
    20ac:	cf 93       	push	r28
    20ae:	df 93       	push	r29
    20b0:	00 d0       	rcall	.+0      	; 0x20b2 <DIO_setPinDir+0x6>
    20b2:	cd b7       	in	r28, 0x3d	; 61
    20b4:	de b7       	in	r29, 0x3e	; 62
    20b6:	89 83       	std	Y+1, r24	; 0x01
    20b8:	6a 83       	std	Y+2, r22	; 0x02
		if (pinNum>=0 && pinNum<=7)
    20ba:	89 81       	ldd	r24, Y+1	; 0x01
    20bc:	88 30       	cpi	r24, 0x08	; 8
    20be:	90 f5       	brcc	.+100    	; 0x2124 <DIO_setPinDir+0x78>
	{
		if (state==DIO_OUTPUT)
    20c0:	8a 81       	ldd	r24, Y+2	; 0x02
    20c2:	81 30       	cpi	r24, 0x01	; 1
    20c4:	a9 f4       	brne	.+42     	; 0x20f0 <DIO_setPinDir+0x44>
		{
			SET_BIT(DDRA,pinNum);
    20c6:	8a e3       	ldi	r24, 0x3A	; 58
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	2a e3       	ldi	r18, 0x3A	; 58
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	f9 01       	movw	r30, r18
    20d0:	20 81       	ld	r18, Z
    20d2:	62 2f       	mov	r22, r18
    20d4:	29 81       	ldd	r18, Y+1	; 0x01
    20d6:	42 2f       	mov	r20, r18
    20d8:	50 e0       	ldi	r21, 0x00	; 0
    20da:	21 e0       	ldi	r18, 0x01	; 1
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	02 c0       	rjmp	.+4      	; 0x20e4 <DIO_setPinDir+0x38>
    20e0:	22 0f       	add	r18, r18
    20e2:	33 1f       	adc	r19, r19
    20e4:	4a 95       	dec	r20
    20e6:	e2 f7       	brpl	.-8      	; 0x20e0 <DIO_setPinDir+0x34>
    20e8:	26 2b       	or	r18, r22
    20ea:	fc 01       	movw	r30, r24
    20ec:	20 83       	st	Z, r18
		else if (state==DIO_INPUT)
		{
			CLEAR_BIT(DDRD,pinNum);
		}
	}
}
    20ee:	cd c0       	rjmp	.+410    	; 0x228a <DIO_setPinDir+0x1de>
	{
		if (state==DIO_OUTPUT)
		{
			SET_BIT(DDRA,pinNum);
		}
		else if (state==DIO_INPUT)
    20f0:	8a 81       	ldd	r24, Y+2	; 0x02
    20f2:	88 23       	and	r24, r24
    20f4:	09 f0       	breq	.+2      	; 0x20f8 <DIO_setPinDir+0x4c>
    20f6:	c9 c0       	rjmp	.+402    	; 0x228a <DIO_setPinDir+0x1de>
		{
			CLEAR_BIT(DDRA,pinNum);
    20f8:	8a e3       	ldi	r24, 0x3A	; 58
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	2a e3       	ldi	r18, 0x3A	; 58
    20fe:	30 e0       	ldi	r19, 0x00	; 0
    2100:	f9 01       	movw	r30, r18
    2102:	20 81       	ld	r18, Z
    2104:	62 2f       	mov	r22, r18
    2106:	29 81       	ldd	r18, Y+1	; 0x01
    2108:	42 2f       	mov	r20, r18
    210a:	50 e0       	ldi	r21, 0x00	; 0
    210c:	21 e0       	ldi	r18, 0x01	; 1
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	02 c0       	rjmp	.+4      	; 0x2116 <DIO_setPinDir+0x6a>
    2112:	22 0f       	add	r18, r18
    2114:	33 1f       	adc	r19, r19
    2116:	4a 95       	dec	r20
    2118:	e2 f7       	brpl	.-8      	; 0x2112 <DIO_setPinDir+0x66>
    211a:	20 95       	com	r18
    211c:	26 23       	and	r18, r22
    211e:	fc 01       	movw	r30, r24
    2120:	20 83       	st	Z, r18
		else if (state==DIO_INPUT)
		{
			CLEAR_BIT(DDRD,pinNum);
		}
	}
}
    2122:	b3 c0       	rjmp	.+358    	; 0x228a <DIO_setPinDir+0x1de>
		else if (state==DIO_INPUT)
		{
			CLEAR_BIT(DDRA,pinNum);
		}
	}
	else if (pinNum>=8 && pinNum<=15)
    2124:	89 81       	ldd	r24, Y+1	; 0x01
    2126:	88 30       	cpi	r24, 0x08	; 8
    2128:	c0 f1       	brcs	.+112    	; 0x219a <DIO_setPinDir+0xee>
    212a:	89 81       	ldd	r24, Y+1	; 0x01
    212c:	80 31       	cpi	r24, 0x10	; 16
    212e:	a8 f5       	brcc	.+106    	; 0x219a <DIO_setPinDir+0xee>
	{
		pinNum-=8;
    2130:	89 81       	ldd	r24, Y+1	; 0x01
    2132:	88 50       	subi	r24, 0x08	; 8
    2134:	89 83       	std	Y+1, r24	; 0x01
				if (state==DIO_OUTPUT)
    2136:	8a 81       	ldd	r24, Y+2	; 0x02
    2138:	81 30       	cpi	r24, 0x01	; 1
    213a:	a9 f4       	brne	.+42     	; 0x2166 <DIO_setPinDir+0xba>
		{
			SET_BIT(DDRB,pinNum);
    213c:	87 e3       	ldi	r24, 0x37	; 55
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	27 e3       	ldi	r18, 0x37	; 55
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	f9 01       	movw	r30, r18
    2146:	20 81       	ld	r18, Z
    2148:	62 2f       	mov	r22, r18
    214a:	29 81       	ldd	r18, Y+1	; 0x01
    214c:	42 2f       	mov	r20, r18
    214e:	50 e0       	ldi	r21, 0x00	; 0
    2150:	21 e0       	ldi	r18, 0x01	; 1
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	02 c0       	rjmp	.+4      	; 0x215a <DIO_setPinDir+0xae>
    2156:	22 0f       	add	r18, r18
    2158:	33 1f       	adc	r19, r19
    215a:	4a 95       	dec	r20
    215c:	e2 f7       	brpl	.-8      	; 0x2156 <DIO_setPinDir+0xaa>
    215e:	26 2b       	or	r18, r22
    2160:	fc 01       	movw	r30, r24
    2162:	20 83       	st	Z, r18
		}
	}
	else if (pinNum>=8 && pinNum<=15)
	{
		pinNum-=8;
				if (state==DIO_OUTPUT)
    2164:	8f c0       	rjmp	.+286    	; 0x2284 <DIO_setPinDir+0x1d8>
		{
			SET_BIT(DDRB,pinNum);
		}
		else if (state==DIO_INPUT)
    2166:	8a 81       	ldd	r24, Y+2	; 0x02
    2168:	88 23       	and	r24, r24
    216a:	09 f0       	breq	.+2      	; 0x216e <DIO_setPinDir+0xc2>
    216c:	8b c0       	rjmp	.+278    	; 0x2284 <DIO_setPinDir+0x1d8>
		{
			CLEAR_BIT(DDRB,pinNum);
    216e:	87 e3       	ldi	r24, 0x37	; 55
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	27 e3       	ldi	r18, 0x37	; 55
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	f9 01       	movw	r30, r18
    2178:	20 81       	ld	r18, Z
    217a:	62 2f       	mov	r22, r18
    217c:	29 81       	ldd	r18, Y+1	; 0x01
    217e:	42 2f       	mov	r20, r18
    2180:	50 e0       	ldi	r21, 0x00	; 0
    2182:	21 e0       	ldi	r18, 0x01	; 1
    2184:	30 e0       	ldi	r19, 0x00	; 0
    2186:	02 c0       	rjmp	.+4      	; 0x218c <DIO_setPinDir+0xe0>
    2188:	22 0f       	add	r18, r18
    218a:	33 1f       	adc	r19, r19
    218c:	4a 95       	dec	r20
    218e:	e2 f7       	brpl	.-8      	; 0x2188 <DIO_setPinDir+0xdc>
    2190:	20 95       	com	r18
    2192:	26 23       	and	r18, r22
    2194:	fc 01       	movw	r30, r24
    2196:	20 83       	st	Z, r18
		}
	}
	else if (pinNum>=8 && pinNum<=15)
	{
		pinNum-=8;
				if (state==DIO_OUTPUT)
    2198:	75 c0       	rjmp	.+234    	; 0x2284 <DIO_setPinDir+0x1d8>
		else if (state==DIO_INPUT)
		{
			CLEAR_BIT(DDRB,pinNum);
		}
	}
	else if (pinNum>=16 && pinNum<=23)
    219a:	89 81       	ldd	r24, Y+1	; 0x01
    219c:	80 31       	cpi	r24, 0x10	; 16
    219e:	c0 f1       	brcs	.+112    	; 0x2210 <DIO_setPinDir+0x164>
    21a0:	89 81       	ldd	r24, Y+1	; 0x01
    21a2:	88 31       	cpi	r24, 0x18	; 24
    21a4:	a8 f5       	brcc	.+106    	; 0x2210 <DIO_setPinDir+0x164>
	{
		pinNum-=16;
    21a6:	89 81       	ldd	r24, Y+1	; 0x01
    21a8:	80 51       	subi	r24, 0x10	; 16
    21aa:	89 83       	std	Y+1, r24	; 0x01
		if (state==DIO_OUTPUT)
    21ac:	8a 81       	ldd	r24, Y+2	; 0x02
    21ae:	81 30       	cpi	r24, 0x01	; 1
    21b0:	a9 f4       	brne	.+42     	; 0x21dc <DIO_setPinDir+0x130>
		{
			SET_BIT(DDRC,pinNum);
    21b2:	84 e3       	ldi	r24, 0x34	; 52
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	24 e3       	ldi	r18, 0x34	; 52
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	f9 01       	movw	r30, r18
    21bc:	20 81       	ld	r18, Z
    21be:	62 2f       	mov	r22, r18
    21c0:	29 81       	ldd	r18, Y+1	; 0x01
    21c2:	42 2f       	mov	r20, r18
    21c4:	50 e0       	ldi	r21, 0x00	; 0
    21c6:	21 e0       	ldi	r18, 0x01	; 1
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	02 c0       	rjmp	.+4      	; 0x21d0 <DIO_setPinDir+0x124>
    21cc:	22 0f       	add	r18, r18
    21ce:	33 1f       	adc	r19, r19
    21d0:	4a 95       	dec	r20
    21d2:	e2 f7       	brpl	.-8      	; 0x21cc <DIO_setPinDir+0x120>
    21d4:	26 2b       	or	r18, r22
    21d6:	fc 01       	movw	r30, r24
    21d8:	20 83       	st	Z, r18
		}
	}
	else if (pinNum>=16 && pinNum<=23)
	{
		pinNum-=16;
		if (state==DIO_OUTPUT)
    21da:	56 c0       	rjmp	.+172    	; 0x2288 <DIO_setPinDir+0x1dc>
		{
			SET_BIT(DDRC,pinNum);
		}
		else if (state==DIO_INPUT)
    21dc:	8a 81       	ldd	r24, Y+2	; 0x02
    21de:	88 23       	and	r24, r24
    21e0:	09 f0       	breq	.+2      	; 0x21e4 <DIO_setPinDir+0x138>
    21e2:	52 c0       	rjmp	.+164    	; 0x2288 <DIO_setPinDir+0x1dc>
		{
			CLEAR_BIT(DDRC,pinNum);
    21e4:	84 e3       	ldi	r24, 0x34	; 52
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	24 e3       	ldi	r18, 0x34	; 52
    21ea:	30 e0       	ldi	r19, 0x00	; 0
    21ec:	f9 01       	movw	r30, r18
    21ee:	20 81       	ld	r18, Z
    21f0:	62 2f       	mov	r22, r18
    21f2:	29 81       	ldd	r18, Y+1	; 0x01
    21f4:	42 2f       	mov	r20, r18
    21f6:	50 e0       	ldi	r21, 0x00	; 0
    21f8:	21 e0       	ldi	r18, 0x01	; 1
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	02 c0       	rjmp	.+4      	; 0x2202 <DIO_setPinDir+0x156>
    21fe:	22 0f       	add	r18, r18
    2200:	33 1f       	adc	r19, r19
    2202:	4a 95       	dec	r20
    2204:	e2 f7       	brpl	.-8      	; 0x21fe <DIO_setPinDir+0x152>
    2206:	20 95       	com	r18
    2208:	26 23       	and	r18, r22
    220a:	fc 01       	movw	r30, r24
    220c:	20 83       	st	Z, r18
		}
	}
	else if (pinNum>=16 && pinNum<=23)
	{
		pinNum-=16;
		if (state==DIO_OUTPUT)
    220e:	3c c0       	rjmp	.+120    	; 0x2288 <DIO_setPinDir+0x1dc>
		else if (state==DIO_INPUT)
		{
			CLEAR_BIT(DDRC,pinNum);
		}
	}
	else if (pinNum>=24 && pinNum<=31)
    2210:	89 81       	ldd	r24, Y+1	; 0x01
    2212:	88 31       	cpi	r24, 0x18	; 24
    2214:	d0 f1       	brcs	.+116    	; 0x228a <DIO_setPinDir+0x1de>
    2216:	89 81       	ldd	r24, Y+1	; 0x01
    2218:	80 32       	cpi	r24, 0x20	; 32
    221a:	b8 f5       	brcc	.+110    	; 0x228a <DIO_setPinDir+0x1de>
	{
		pinNum-=24;
    221c:	89 81       	ldd	r24, Y+1	; 0x01
    221e:	88 51       	subi	r24, 0x18	; 24
    2220:	89 83       	std	Y+1, r24	; 0x01
		if (state==DIO_OUTPUT)
    2222:	8a 81       	ldd	r24, Y+2	; 0x02
    2224:	81 30       	cpi	r24, 0x01	; 1
    2226:	a9 f4       	brne	.+42     	; 0x2252 <DIO_setPinDir+0x1a6>
		{
			SET_BIT(DDRD,pinNum);
    2228:	81 e3       	ldi	r24, 0x31	; 49
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	21 e3       	ldi	r18, 0x31	; 49
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	f9 01       	movw	r30, r18
    2232:	20 81       	ld	r18, Z
    2234:	62 2f       	mov	r22, r18
    2236:	29 81       	ldd	r18, Y+1	; 0x01
    2238:	42 2f       	mov	r20, r18
    223a:	50 e0       	ldi	r21, 0x00	; 0
    223c:	21 e0       	ldi	r18, 0x01	; 1
    223e:	30 e0       	ldi	r19, 0x00	; 0
    2240:	02 c0       	rjmp	.+4      	; 0x2246 <DIO_setPinDir+0x19a>
    2242:	22 0f       	add	r18, r18
    2244:	33 1f       	adc	r19, r19
    2246:	4a 95       	dec	r20
    2248:	e2 f7       	brpl	.-8      	; 0x2242 <DIO_setPinDir+0x196>
    224a:	26 2b       	or	r18, r22
    224c:	fc 01       	movw	r30, r24
    224e:	20 83       	st	Z, r18
		else if (state==DIO_INPUT)
		{
			CLEAR_BIT(DDRD,pinNum);
		}
	}
}
    2250:	1c c0       	rjmp	.+56     	; 0x228a <DIO_setPinDir+0x1de>
		pinNum-=24;
		if (state==DIO_OUTPUT)
		{
			SET_BIT(DDRD,pinNum);
		}
		else if (state==DIO_INPUT)
    2252:	8a 81       	ldd	r24, Y+2	; 0x02
    2254:	88 23       	and	r24, r24
    2256:	c9 f4       	brne	.+50     	; 0x228a <DIO_setPinDir+0x1de>
		{
			CLEAR_BIT(DDRD,pinNum);
    2258:	81 e3       	ldi	r24, 0x31	; 49
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	21 e3       	ldi	r18, 0x31	; 49
    225e:	30 e0       	ldi	r19, 0x00	; 0
    2260:	f9 01       	movw	r30, r18
    2262:	20 81       	ld	r18, Z
    2264:	62 2f       	mov	r22, r18
    2266:	29 81       	ldd	r18, Y+1	; 0x01
    2268:	42 2f       	mov	r20, r18
    226a:	50 e0       	ldi	r21, 0x00	; 0
    226c:	21 e0       	ldi	r18, 0x01	; 1
    226e:	30 e0       	ldi	r19, 0x00	; 0
    2270:	02 c0       	rjmp	.+4      	; 0x2276 <DIO_setPinDir+0x1ca>
    2272:	22 0f       	add	r18, r18
    2274:	33 1f       	adc	r19, r19
    2276:	4a 95       	dec	r20
    2278:	e2 f7       	brpl	.-8      	; 0x2272 <DIO_setPinDir+0x1c6>
    227a:	20 95       	com	r18
    227c:	26 23       	and	r18, r22
    227e:	fc 01       	movw	r30, r24
    2280:	20 83       	st	Z, r18
		}
	}
}
    2282:	03 c0       	rjmp	.+6      	; 0x228a <DIO_setPinDir+0x1de>
		}
	}
	else if (pinNum>=8 && pinNum<=15)
	{
		pinNum-=8;
				if (state==DIO_OUTPUT)
    2284:	00 00       	nop
    2286:	01 c0       	rjmp	.+2      	; 0x228a <DIO_setPinDir+0x1de>
		}
	}
	else if (pinNum>=16 && pinNum<=23)
	{
		pinNum-=16;
		if (state==DIO_OUTPUT)
    2288:	00 00       	nop
		else if (state==DIO_INPUT)
		{
			CLEAR_BIT(DDRD,pinNum);
		}
	}
}
    228a:	00 00       	nop
    228c:	0f 90       	pop	r0
    228e:	0f 90       	pop	r0
    2290:	df 91       	pop	r29
    2292:	cf 91       	pop	r28
    2294:	08 95       	ret

00002296 <DIO_readPinValue>:


u8 DIO_readPinValue(u8 pinNum){
    2296:	cf 93       	push	r28
    2298:	df 93       	push	r29
    229a:	1f 92       	push	r1
    229c:	cd b7       	in	r28, 0x3d	; 61
    229e:	de b7       	in	r29, 0x3e	; 62
    22a0:	89 83       	std	Y+1, r24	; 0x01
	if (pinNum>=0 && pinNum<=7)
    22a2:	89 81       	ldd	r24, Y+1	; 0x01
    22a4:	88 30       	cpi	r24, 0x08	; 8
    22a6:	80 f4       	brcc	.+32     	; 0x22c8 <DIO_readPinValue+0x32>
	{

			return GET_BIT(PINA,pinNum);
    22a8:	89 e3       	ldi	r24, 0x39	; 57
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	fc 01       	movw	r30, r24
    22ae:	80 81       	ld	r24, Z
    22b0:	88 2f       	mov	r24, r24
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	29 81       	ldd	r18, Y+1	; 0x01
    22b6:	22 2f       	mov	r18, r18
    22b8:	30 e0       	ldi	r19, 0x00	; 0
    22ba:	02 c0       	rjmp	.+4      	; 0x22c0 <DIO_readPinValue+0x2a>
    22bc:	95 95       	asr	r25
    22be:	87 95       	ror	r24
    22c0:	2a 95       	dec	r18
    22c2:	e2 f7       	brpl	.-8      	; 0x22bc <DIO_readPinValue+0x26>
    22c4:	81 70       	andi	r24, 0x01	; 1
    22c6:	4b c0       	rjmp	.+150    	; 0x235e <DIO_readPinValue+0xc8>
	
	}
	else if (pinNum>=8 && pinNum<=15)
    22c8:	89 81       	ldd	r24, Y+1	; 0x01
    22ca:	88 30       	cpi	r24, 0x08	; 8
    22cc:	b0 f0       	brcs	.+44     	; 0x22fa <DIO_readPinValue+0x64>
    22ce:	89 81       	ldd	r24, Y+1	; 0x01
    22d0:	80 31       	cpi	r24, 0x10	; 16
    22d2:	98 f4       	brcc	.+38     	; 0x22fa <DIO_readPinValue+0x64>
	{
		pinNum-=8;
    22d4:	89 81       	ldd	r24, Y+1	; 0x01
    22d6:	88 50       	subi	r24, 0x08	; 8
    22d8:	89 83       	std	Y+1, r24	; 0x01
			return GET_BIT(PINB,pinNum);
    22da:	86 e3       	ldi	r24, 0x36	; 54
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	fc 01       	movw	r30, r24
    22e0:	80 81       	ld	r24, Z
    22e2:	88 2f       	mov	r24, r24
    22e4:	90 e0       	ldi	r25, 0x00	; 0
    22e6:	29 81       	ldd	r18, Y+1	; 0x01
    22e8:	22 2f       	mov	r18, r18
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	02 c0       	rjmp	.+4      	; 0x22f2 <DIO_readPinValue+0x5c>
    22ee:	95 95       	asr	r25
    22f0:	87 95       	ror	r24
    22f2:	2a 95       	dec	r18
    22f4:	e2 f7       	brpl	.-8      	; 0x22ee <DIO_readPinValue+0x58>
    22f6:	81 70       	andi	r24, 0x01	; 1
    22f8:	32 c0       	rjmp	.+100    	; 0x235e <DIO_readPinValue+0xc8>

	}
	else if (pinNum>=16 && pinNum<=23)
    22fa:	89 81       	ldd	r24, Y+1	; 0x01
    22fc:	80 31       	cpi	r24, 0x10	; 16
    22fe:	b0 f0       	brcs	.+44     	; 0x232c <DIO_readPinValue+0x96>
    2300:	89 81       	ldd	r24, Y+1	; 0x01
    2302:	88 31       	cpi	r24, 0x18	; 24
    2304:	98 f4       	brcc	.+38     	; 0x232c <DIO_readPinValue+0x96>
	{
		pinNum-=16;
    2306:	89 81       	ldd	r24, Y+1	; 0x01
    2308:	80 51       	subi	r24, 0x10	; 16
    230a:	89 83       	std	Y+1, r24	; 0x01
			return GET_BIT(PINC,pinNum);
    230c:	83 e3       	ldi	r24, 0x33	; 51
    230e:	90 e0       	ldi	r25, 0x00	; 0
    2310:	fc 01       	movw	r30, r24
    2312:	80 81       	ld	r24, Z
    2314:	88 2f       	mov	r24, r24
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	29 81       	ldd	r18, Y+1	; 0x01
    231a:	22 2f       	mov	r18, r18
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	02 c0       	rjmp	.+4      	; 0x2324 <DIO_readPinValue+0x8e>
    2320:	95 95       	asr	r25
    2322:	87 95       	ror	r24
    2324:	2a 95       	dec	r18
    2326:	e2 f7       	brpl	.-8      	; 0x2320 <DIO_readPinValue+0x8a>
    2328:	81 70       	andi	r24, 0x01	; 1
    232a:	19 c0       	rjmp	.+50     	; 0x235e <DIO_readPinValue+0xc8>

	}
	else if (pinNum>=24 && pinNum<=31)
    232c:	89 81       	ldd	r24, Y+1	; 0x01
    232e:	88 31       	cpi	r24, 0x18	; 24
    2330:	b0 f0       	brcs	.+44     	; 0x235e <DIO_readPinValue+0xc8>
    2332:	89 81       	ldd	r24, Y+1	; 0x01
    2334:	80 32       	cpi	r24, 0x20	; 32
    2336:	98 f4       	brcc	.+38     	; 0x235e <DIO_readPinValue+0xc8>
	{
		pinNum-=24;
    2338:	89 81       	ldd	r24, Y+1	; 0x01
    233a:	88 51       	subi	r24, 0x18	; 24
    233c:	89 83       	std	Y+1, r24	; 0x01
			return GET_BIT(PIND,pinNum);
    233e:	80 e3       	ldi	r24, 0x30	; 48
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	fc 01       	movw	r30, r24
    2344:	80 81       	ld	r24, Z
    2346:	88 2f       	mov	r24, r24
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	29 81       	ldd	r18, Y+1	; 0x01
    234c:	22 2f       	mov	r18, r18
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	02 c0       	rjmp	.+4      	; 0x2356 <DIO_readPinValue+0xc0>
    2352:	95 95       	asr	r25
    2354:	87 95       	ror	r24
    2356:	2a 95       	dec	r18
    2358:	e2 f7       	brpl	.-8      	; 0x2352 <DIO_readPinValue+0xbc>
    235a:	81 70       	andi	r24, 0x01	; 1
    235c:	00 c0       	rjmp	.+0      	; 0x235e <DIO_readPinValue+0xc8>

	}
	
}
    235e:	0f 90       	pop	r0
    2360:	df 91       	pop	r29
    2362:	cf 91       	pop	r28
    2364:	08 95       	ret

00002366 <DIO_setPinPullup>:

void DIO_setPinPullup(u8 pinNum)
{
    2366:	cf 93       	push	r28
    2368:	df 93       	push	r29
    236a:	1f 92       	push	r1
    236c:	cd b7       	in	r28, 0x3d	; 61
    236e:	de b7       	in	r29, 0x3e	; 62
    2370:	89 83       	std	Y+1, r24	; 0x01
	DIO_setPinValue(pinNum, DIO_HIGH);
    2372:	61 e0       	ldi	r22, 0x01	; 1
    2374:	89 81       	ldd	r24, Y+1	; 0x01
    2376:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <DIO_setPinValue>
}
    237a:	00 00       	nop
    237c:	0f 90       	pop	r0
    237e:	df 91       	pop	r29
    2380:	cf 91       	pop	r28
    2382:	08 95       	ret

00002384 <EXT0_init>:

void EXT_setCallbackInt2(void (*ptr)())
{
	//INT0_ptr = APP_func;
	INT2_ptr = ptr;
}
    2384:	cf 93       	push	r28
    2386:	df 93       	push	r29
    2388:	1f 92       	push	r1
    238a:	cd b7       	in	r28, 0x3d	; 61
    238c:	de b7       	in	r29, 0x3e	; 62
    238e:	89 83       	std	Y+1, r24	; 0x01
    2390:	89 81       	ldd	r24, Y+1	; 0x01
    2392:	88 23       	and	r24, r24
    2394:	99 f4       	brne	.+38     	; 0x23bc <EXT0_init+0x38>
    2396:	85 e5       	ldi	r24, 0x55	; 85
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	25 e5       	ldi	r18, 0x55	; 85
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	f9 01       	movw	r30, r18
    23a0:	20 81       	ld	r18, Z
    23a2:	2e 7f       	andi	r18, 0xFE	; 254
    23a4:	fc 01       	movw	r30, r24
    23a6:	20 83       	st	Z, r18
    23a8:	85 e5       	ldi	r24, 0x55	; 85
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	25 e5       	ldi	r18, 0x55	; 85
    23ae:	30 e0       	ldi	r19, 0x00	; 0
    23b0:	f9 01       	movw	r30, r18
    23b2:	20 81       	ld	r18, Z
    23b4:	2d 7f       	andi	r18, 0xFD	; 253
    23b6:	fc 01       	movw	r30, r24
    23b8:	20 83       	st	Z, r18
    23ba:	41 c0       	rjmp	.+130    	; 0x243e <EXT0_init+0xba>
    23bc:	89 81       	ldd	r24, Y+1	; 0x01
    23be:	81 30       	cpi	r24, 0x01	; 1
    23c0:	99 f4       	brne	.+38     	; 0x23e8 <EXT0_init+0x64>
    23c2:	85 e5       	ldi	r24, 0x55	; 85
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	25 e5       	ldi	r18, 0x55	; 85
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	f9 01       	movw	r30, r18
    23cc:	20 81       	ld	r18, Z
    23ce:	21 60       	ori	r18, 0x01	; 1
    23d0:	fc 01       	movw	r30, r24
    23d2:	20 83       	st	Z, r18
    23d4:	85 e5       	ldi	r24, 0x55	; 85
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	25 e5       	ldi	r18, 0x55	; 85
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	f9 01       	movw	r30, r18
    23de:	20 81       	ld	r18, Z
    23e0:	2d 7f       	andi	r18, 0xFD	; 253
    23e2:	fc 01       	movw	r30, r24
    23e4:	20 83       	st	Z, r18
    23e6:	2b c0       	rjmp	.+86     	; 0x243e <EXT0_init+0xba>
    23e8:	89 81       	ldd	r24, Y+1	; 0x01
    23ea:	82 30       	cpi	r24, 0x02	; 2
    23ec:	99 f4       	brne	.+38     	; 0x2414 <EXT0_init+0x90>
    23ee:	85 e5       	ldi	r24, 0x55	; 85
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	25 e5       	ldi	r18, 0x55	; 85
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	f9 01       	movw	r30, r18
    23f8:	20 81       	ld	r18, Z
    23fa:	2e 7f       	andi	r18, 0xFE	; 254
    23fc:	fc 01       	movw	r30, r24
    23fe:	20 83       	st	Z, r18
    2400:	85 e5       	ldi	r24, 0x55	; 85
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	25 e5       	ldi	r18, 0x55	; 85
    2406:	30 e0       	ldi	r19, 0x00	; 0
    2408:	f9 01       	movw	r30, r18
    240a:	20 81       	ld	r18, Z
    240c:	22 60       	ori	r18, 0x02	; 2
    240e:	fc 01       	movw	r30, r24
    2410:	20 83       	st	Z, r18
    2412:	15 c0       	rjmp	.+42     	; 0x243e <EXT0_init+0xba>
    2414:	89 81       	ldd	r24, Y+1	; 0x01
    2416:	83 30       	cpi	r24, 0x03	; 3
    2418:	91 f4       	brne	.+36     	; 0x243e <EXT0_init+0xba>
    241a:	85 e5       	ldi	r24, 0x55	; 85
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	25 e5       	ldi	r18, 0x55	; 85
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	f9 01       	movw	r30, r18
    2424:	20 81       	ld	r18, Z
    2426:	21 60       	ori	r18, 0x01	; 1
    2428:	fc 01       	movw	r30, r24
    242a:	20 83       	st	Z, r18
    242c:	85 e5       	ldi	r24, 0x55	; 85
    242e:	90 e0       	ldi	r25, 0x00	; 0
    2430:	25 e5       	ldi	r18, 0x55	; 85
    2432:	30 e0       	ldi	r19, 0x00	; 0
    2434:	f9 01       	movw	r30, r18
    2436:	20 81       	ld	r18, Z
    2438:	22 60       	ori	r18, 0x02	; 2
    243a:	fc 01       	movw	r30, r24
    243c:	20 83       	st	Z, r18
    243e:	8b e5       	ldi	r24, 0x5B	; 91
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	2b e5       	ldi	r18, 0x5B	; 91
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	f9 01       	movw	r30, r18
    2448:	20 81       	ld	r18, Z
    244a:	20 64       	ori	r18, 0x40	; 64
    244c:	fc 01       	movw	r30, r24
    244e:	20 83       	st	Z, r18
    2450:	00 00       	nop
    2452:	0f 90       	pop	r0
    2454:	df 91       	pop	r29
    2456:	cf 91       	pop	r28
    2458:	08 95       	ret

0000245a <EXT_setCallbackInt0>:
    245a:	cf 93       	push	r28
    245c:	df 93       	push	r29
    245e:	00 d0       	rcall	.+0      	; 0x2460 <EXT_setCallbackInt0+0x6>
    2460:	cd b7       	in	r28, 0x3d	; 61
    2462:	de b7       	in	r29, 0x3e	; 62
    2464:	9a 83       	std	Y+2, r25	; 0x02
    2466:	89 83       	std	Y+1, r24	; 0x01
    2468:	89 81       	ldd	r24, Y+1	; 0x01
    246a:	9a 81       	ldd	r25, Y+2	; 0x02
    246c:	90 93 f8 01 	sts	0x01F8, r25	; 0x8001f8 <INT0_ptr+0x1>
    2470:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <INT0_ptr>
    2474:	00 00       	nop
    2476:	0f 90       	pop	r0
    2478:	0f 90       	pop	r0
    247a:	df 91       	pop	r29
    247c:	cf 91       	pop	r28
    247e:	08 95       	ret

00002480 <__vector_1>:
    2480:	1f 92       	push	r1
    2482:	0f 92       	push	r0
    2484:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    2488:	0f 92       	push	r0
    248a:	11 24       	eor	r1, r1
    248c:	2f 93       	push	r18
    248e:	3f 93       	push	r19
    2490:	4f 93       	push	r20
    2492:	5f 93       	push	r21
    2494:	6f 93       	push	r22
    2496:	7f 93       	push	r23
    2498:	8f 93       	push	r24
    249a:	9f 93       	push	r25
    249c:	af 93       	push	r26
    249e:	bf 93       	push	r27
    24a0:	ef 93       	push	r30
    24a2:	ff 93       	push	r31
    24a4:	cf 93       	push	r28
    24a6:	df 93       	push	r29
    24a8:	cd b7       	in	r28, 0x3d	; 61
    24aa:	de b7       	in	r29, 0x3e	; 62
    24ac:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <INT0_ptr>
    24b0:	90 91 f8 01 	lds	r25, 0x01F8	; 0x8001f8 <INT0_ptr+0x1>
    24b4:	fc 01       	movw	r30, r24
    24b6:	09 95       	icall
    24b8:	00 00       	nop
    24ba:	df 91       	pop	r29
    24bc:	cf 91       	pop	r28
    24be:	ff 91       	pop	r31
    24c0:	ef 91       	pop	r30
    24c2:	bf 91       	pop	r27
    24c4:	af 91       	pop	r26
    24c6:	9f 91       	pop	r25
    24c8:	8f 91       	pop	r24
    24ca:	7f 91       	pop	r23
    24cc:	6f 91       	pop	r22
    24ce:	5f 91       	pop	r21
    24d0:	4f 91       	pop	r20
    24d2:	3f 91       	pop	r19
    24d4:	2f 91       	pop	r18
    24d6:	0f 90       	pop	r0
    24d8:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    24dc:	0f 90       	pop	r0
    24de:	1f 90       	pop	r1
    24e0:	18 95       	reti

000024e2 <__vector_2>:
    24e2:	1f 92       	push	r1
    24e4:	0f 92       	push	r0
    24e6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    24ea:	0f 92       	push	r0
    24ec:	11 24       	eor	r1, r1
    24ee:	2f 93       	push	r18
    24f0:	3f 93       	push	r19
    24f2:	4f 93       	push	r20
    24f4:	5f 93       	push	r21
    24f6:	6f 93       	push	r22
    24f8:	7f 93       	push	r23
    24fa:	8f 93       	push	r24
    24fc:	9f 93       	push	r25
    24fe:	af 93       	push	r26
    2500:	bf 93       	push	r27
    2502:	ef 93       	push	r30
    2504:	ff 93       	push	r31
    2506:	cf 93       	push	r28
    2508:	df 93       	push	r29
    250a:	cd b7       	in	r28, 0x3d	; 61
    250c:	de b7       	in	r29, 0x3e	; 62
    250e:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <INT1_ptr>
    2512:	90 91 fc 01 	lds	r25, 0x01FC	; 0x8001fc <INT1_ptr+0x1>
    2516:	fc 01       	movw	r30, r24
    2518:	09 95       	icall
    251a:	00 00       	nop
    251c:	df 91       	pop	r29
    251e:	cf 91       	pop	r28
    2520:	ff 91       	pop	r31
    2522:	ef 91       	pop	r30
    2524:	bf 91       	pop	r27
    2526:	af 91       	pop	r26
    2528:	9f 91       	pop	r25
    252a:	8f 91       	pop	r24
    252c:	7f 91       	pop	r23
    252e:	6f 91       	pop	r22
    2530:	5f 91       	pop	r21
    2532:	4f 91       	pop	r20
    2534:	3f 91       	pop	r19
    2536:	2f 91       	pop	r18
    2538:	0f 90       	pop	r0
    253a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    253e:	0f 90       	pop	r0
    2540:	1f 90       	pop	r1
    2542:	18 95       	reti

00002544 <__vector_3>:

void __vector_3(void) __attribute__((signal,used));
void __vector_3(void)
{
    2544:	1f 92       	push	r1
    2546:	0f 92       	push	r0
    2548:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    254c:	0f 92       	push	r0
    254e:	11 24       	eor	r1, r1
    2550:	2f 93       	push	r18
    2552:	3f 93       	push	r19
    2554:	4f 93       	push	r20
    2556:	5f 93       	push	r21
    2558:	6f 93       	push	r22
    255a:	7f 93       	push	r23
    255c:	8f 93       	push	r24
    255e:	9f 93       	push	r25
    2560:	af 93       	push	r26
    2562:	bf 93       	push	r27
    2564:	ef 93       	push	r30
    2566:	ff 93       	push	r31
    2568:	cf 93       	push	r28
    256a:	df 93       	push	r29
    256c:	cd b7       	in	r28, 0x3d	; 61
    256e:	de b7       	in	r29, 0x3e	; 62
	//call func(pointer to function)
	//APP_func();
	INT2_ptr();
    2570:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <INT2_ptr>
    2574:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <INT2_ptr+0x1>
    2578:	fc 01       	movw	r30, r24
    257a:	09 95       	icall
	//DIO_setPinValue(DIO_PINA0,DIO_HIGH);
}
    257c:	00 00       	nop
    257e:	df 91       	pop	r29
    2580:	cf 91       	pop	r28
    2582:	ff 91       	pop	r31
    2584:	ef 91       	pop	r30
    2586:	bf 91       	pop	r27
    2588:	af 91       	pop	r26
    258a:	9f 91       	pop	r25
    258c:	8f 91       	pop	r24
    258e:	7f 91       	pop	r23
    2590:	6f 91       	pop	r22
    2592:	5f 91       	pop	r21
    2594:	4f 91       	pop	r20
    2596:	3f 91       	pop	r19
    2598:	2f 91       	pop	r18
    259a:	0f 90       	pop	r0
    259c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    25a0:	0f 90       	pop	r0
    25a2:	1f 90       	pop	r1
    25a4:	18 95       	reti

000025a6 <GI_enable>:
#include "BIT_MATH.h"

#include "GI_INT.h"

void GI_enable()
{
    25a6:	cf 93       	push	r28
    25a8:	df 93       	push	r29
    25aa:	cd b7       	in	r28, 0x3d	; 61
    25ac:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, I);
    25ae:	8f e5       	ldi	r24, 0x5F	; 95
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	2f e5       	ldi	r18, 0x5F	; 95
    25b4:	30 e0       	ldi	r19, 0x00	; 0
    25b6:	f9 01       	movw	r30, r18
    25b8:	20 81       	ld	r18, Z
    25ba:	20 68       	ori	r18, 0x80	; 128
    25bc:	fc 01       	movw	r30, r24
    25be:	20 83       	st	Z, r18
}
    25c0:	00 00       	nop
    25c2:	df 91       	pop	r29
    25c4:	cf 91       	pop	r28
    25c6:	08 95       	ret

000025c8 <I2C_init>:
 *  Author: biso2
 */ 
#include "I2C_INT.h"

void I2C_init(enum I2C_mode mode)
{
    25c8:	cf 93       	push	r28
    25ca:	df 93       	push	r29
    25cc:	1f 92       	push	r1
    25ce:	cd b7       	in	r28, 0x3d	; 61
    25d0:	de b7       	in	r29, 0x3e	; 62
    25d2:	89 83       	std	Y+1, r24	; 0x01
	if(mode == MASTER)
    25d4:	89 81       	ldd	r24, Y+1	; 0x01
    25d6:	81 30       	cpi	r24, 0x01	; 1
    25d8:	41 f0       	breq	.+16     	; 0x25ea <I2C_init+0x22>
	{
		
	}
	else if(mode == SLAVE)
    25da:	89 81       	ldd	r24, Y+1	; 0x01
    25dc:	88 23       	and	r24, r24
    25de:	29 f4       	brne	.+10     	; 0x25ea <I2C_init+0x22>
	{
		TWAR =  I2C_SLAVE_ADDRESS<<1;
    25e0:	82 e2       	ldi	r24, 0x22	; 34
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	20 ea       	ldi	r18, 0xA0	; 160
    25e6:	fc 01       	movw	r30, r24
    25e8:	20 83       	st	Z, r18
	}
	//enable
	SET_BIT(TWCR, TWEN);
    25ea:	86 e5       	ldi	r24, 0x56	; 86
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	26 e5       	ldi	r18, 0x56	; 86
    25f0:	30 e0       	ldi	r19, 0x00	; 0
    25f2:	f9 01       	movw	r30, r18
    25f4:	20 81       	ld	r18, Z
    25f6:	24 60       	ori	r18, 0x04	; 4
    25f8:	fc 01       	movw	r30, r24
    25fa:	20 83       	st	Z, r18
	TWBR = 72;
    25fc:	80 e2       	ldi	r24, 0x20	; 32
    25fe:	90 e0       	ldi	r25, 0x00	; 0
    2600:	28 e4       	ldi	r18, 0x48	; 72
    2602:	fc 01       	movw	r30, r24
    2604:	20 83       	st	Z, r18
	
}
    2606:	00 00       	nop
    2608:	0f 90       	pop	r0
    260a:	df 91       	pop	r29
    260c:	cf 91       	pop	r28
    260e:	08 95       	ret

00002610 <SPI_Init>:
}
u8 SPI_Read()
{
	while(GET_BIT(SPSR,SPIF)==0);
	return SPDR;
}
    2610:	cf 93       	push	r28
    2612:	df 93       	push	r29
    2614:	cd b7       	in	r28, 0x3d	; 61
    2616:	de b7       	in	r29, 0x3e	; 62
    2618:	8d e2       	ldi	r24, 0x2D	; 45
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	2d e2       	ldi	r18, 0x2D	; 45
    261e:	30 e0       	ldi	r19, 0x00	; 0
    2620:	f9 01       	movw	r30, r18
    2622:	20 81       	ld	r18, Z
    2624:	20 61       	ori	r18, 0x10	; 16
    2626:	fc 01       	movw	r30, r24
    2628:	20 83       	st	Z, r18
    262a:	61 e0       	ldi	r22, 0x01	; 1
    262c:	8d e0       	ldi	r24, 0x0D	; 13
    262e:	0e 94 56 10 	call	0x20ac	; 0x20ac <DIO_setPinDir>
    2632:	61 e0       	ldi	r22, 0x01	; 1
    2634:	8f e0       	ldi	r24, 0x0F	; 15
    2636:	0e 94 56 10 	call	0x20ac	; 0x20ac <DIO_setPinDir>
    263a:	60 e0       	ldi	r22, 0x00	; 0
    263c:	8e e0       	ldi	r24, 0x0E	; 14
    263e:	0e 94 56 10 	call	0x20ac	; 0x20ac <DIO_setPinDir>
    2642:	61 e0       	ldi	r22, 0x01	; 1
    2644:	8c e0       	ldi	r24, 0x0C	; 12
    2646:	0e 94 56 10 	call	0x20ac	; 0x20ac <DIO_setPinDir>
    264a:	8d e2       	ldi	r24, 0x2D	; 45
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	2d e2       	ldi	r18, 0x2D	; 45
    2650:	30 e0       	ldi	r19, 0x00	; 0
    2652:	f9 01       	movw	r30, r18
    2654:	20 81       	ld	r18, Z
    2656:	20 64       	ori	r18, 0x40	; 64
    2658:	fc 01       	movw	r30, r24
    265a:	20 83       	st	Z, r18
    265c:	00 00       	nop
    265e:	df 91       	pop	r29
    2660:	cf 91       	pop	r28
    2662:	08 95       	ret

00002664 <SPI_Write>:
void SPI_Write(u8 data)
{
    2664:	cf 93       	push	r28
    2666:	df 93       	push	r29
    2668:	1f 92       	push	r1
    266a:	cd b7       	in	r28, 0x3d	; 61
    266c:	de b7       	in	r29, 0x3e	; 62
    266e:	89 83       	std	Y+1, r24	; 0x01
	DIO_setPinValue(DIO_PINB4,DIO_HIGH);
    2670:	61 e0       	ldi	r22, 0x01	; 1
    2672:	8c e0       	ldi	r24, 0x0C	; 12
    2674:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <DIO_setPinValue>
	DIO_setPinValue(DIO_PINB4,DIO_LOW);
    2678:	60 e0       	ldi	r22, 0x00	; 0
    267a:	8c e0       	ldi	r24, 0x0C	; 12
    267c:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <DIO_setPinValue>
	SPDR=data;
    2680:	8f e2       	ldi	r24, 0x2F	; 47
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	29 81       	ldd	r18, Y+1	; 0x01
    2686:	fc 01       	movw	r30, r24
    2688:	20 83       	st	Z, r18
	while(GET_BIT(SPSR,SPIF)==0);
    268a:	00 00       	nop
    268c:	8e e2       	ldi	r24, 0x2E	; 46
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	fc 01       	movw	r30, r24
    2692:	80 81       	ld	r24, Z
    2694:	88 1f       	adc	r24, r24
    2696:	88 27       	eor	r24, r24
    2698:	88 1f       	adc	r24, r24
    269a:	88 2f       	mov	r24, r24
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	81 70       	andi	r24, 0x01	; 1
    26a0:	99 27       	eor	r25, r25
    26a2:	89 2b       	or	r24, r25
    26a4:	99 f3       	breq	.-26     	; 0x268c <SPI_Write+0x28>
    26a6:	00 00       	nop
    26a8:	0f 90       	pop	r0
    26aa:	df 91       	pop	r29
    26ac:	cf 91       	pop	r28
    26ae:	08 95       	ret

000026b0 <TIMER0_initNormalMode>:
void (*CTC_ptr)();

void TIMER0_setCallbackCTC( void (*APP_func)() )
{
	CTC_ptr = APP_func;
}
    26b0:	cf 93       	push	r28
    26b2:	df 93       	push	r29
    26b4:	cd b7       	in	r28, 0x3d	; 61
    26b6:	de b7       	in	r29, 0x3e	; 62
    26b8:	83 e5       	ldi	r24, 0x53	; 83
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	23 e5       	ldi	r18, 0x53	; 83
    26be:	30 e0       	ldi	r19, 0x00	; 0
    26c0:	f9 01       	movw	r30, r18
    26c2:	20 81       	ld	r18, Z
    26c4:	2f 7b       	andi	r18, 0xBF	; 191
    26c6:	fc 01       	movw	r30, r24
    26c8:	20 83       	st	Z, r18
    26ca:	83 e5       	ldi	r24, 0x53	; 83
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	23 e5       	ldi	r18, 0x53	; 83
    26d0:	30 e0       	ldi	r19, 0x00	; 0
    26d2:	f9 01       	movw	r30, r18
    26d4:	20 81       	ld	r18, Z
    26d6:	27 7f       	andi	r18, 0xF7	; 247
    26d8:	fc 01       	movw	r30, r24
    26da:	20 83       	st	Z, r18
    26dc:	89 e5       	ldi	r24, 0x59	; 89
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	29 e5       	ldi	r18, 0x59	; 89
    26e2:	30 e0       	ldi	r19, 0x00	; 0
    26e4:	f9 01       	movw	r30, r18
    26e6:	20 81       	ld	r18, Z
    26e8:	21 60       	ori	r18, 0x01	; 1
    26ea:	fc 01       	movw	r30, r24
    26ec:	20 83       	st	Z, r18
    26ee:	00 00       	nop
    26f0:	df 91       	pop	r29
    26f2:	cf 91       	pop	r28
    26f4:	08 95       	ret

000026f6 <TIMER0_start>:
    26f6:	cf 93       	push	r28
    26f8:	df 93       	push	r29
    26fa:	1f 92       	push	r1
    26fc:	cd b7       	in	r28, 0x3d	; 61
    26fe:	de b7       	in	r29, 0x3e	; 62
    2700:	89 83       	std	Y+1, r24	; 0x01
    2702:	89 81       	ldd	r24, Y+1	; 0x01
    2704:	88 23       	and	r24, r24
    2706:	e1 f4       	brne	.+56     	; 0x2740 <TIMER0_start+0x4a>
    2708:	83 e5       	ldi	r24, 0x53	; 83
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	23 e5       	ldi	r18, 0x53	; 83
    270e:	30 e0       	ldi	r19, 0x00	; 0
    2710:	f9 01       	movw	r30, r18
    2712:	20 81       	ld	r18, Z
    2714:	21 60       	ori	r18, 0x01	; 1
    2716:	fc 01       	movw	r30, r24
    2718:	20 83       	st	Z, r18
    271a:	83 e5       	ldi	r24, 0x53	; 83
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	23 e5       	ldi	r18, 0x53	; 83
    2720:	30 e0       	ldi	r19, 0x00	; 0
    2722:	f9 01       	movw	r30, r18
    2724:	20 81       	ld	r18, Z
    2726:	2d 7f       	andi	r18, 0xFD	; 253
    2728:	fc 01       	movw	r30, r24
    272a:	20 83       	st	Z, r18
    272c:	83 e5       	ldi	r24, 0x53	; 83
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	23 e5       	ldi	r18, 0x53	; 83
    2732:	30 e0       	ldi	r19, 0x00	; 0
    2734:	f9 01       	movw	r30, r18
    2736:	20 81       	ld	r18, Z
    2738:	2b 7f       	andi	r18, 0xFB	; 251
    273a:	fc 01       	movw	r30, r24
    273c:	20 83       	st	Z, r18
    273e:	7b c0       	rjmp	.+246    	; 0x2836 <TIMER0_start+0x140>
    2740:	89 81       	ldd	r24, Y+1	; 0x01
    2742:	81 30       	cpi	r24, 0x01	; 1
    2744:	e1 f4       	brne	.+56     	; 0x277e <TIMER0_start+0x88>
    2746:	83 e5       	ldi	r24, 0x53	; 83
    2748:	90 e0       	ldi	r25, 0x00	; 0
    274a:	23 e5       	ldi	r18, 0x53	; 83
    274c:	30 e0       	ldi	r19, 0x00	; 0
    274e:	f9 01       	movw	r30, r18
    2750:	20 81       	ld	r18, Z
    2752:	2e 7f       	andi	r18, 0xFE	; 254
    2754:	fc 01       	movw	r30, r24
    2756:	20 83       	st	Z, r18
    2758:	83 e5       	ldi	r24, 0x53	; 83
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	23 e5       	ldi	r18, 0x53	; 83
    275e:	30 e0       	ldi	r19, 0x00	; 0
    2760:	f9 01       	movw	r30, r18
    2762:	20 81       	ld	r18, Z
    2764:	22 60       	ori	r18, 0x02	; 2
    2766:	fc 01       	movw	r30, r24
    2768:	20 83       	st	Z, r18
    276a:	83 e5       	ldi	r24, 0x53	; 83
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	23 e5       	ldi	r18, 0x53	; 83
    2770:	30 e0       	ldi	r19, 0x00	; 0
    2772:	f9 01       	movw	r30, r18
    2774:	20 81       	ld	r18, Z
    2776:	2b 7f       	andi	r18, 0xFB	; 251
    2778:	fc 01       	movw	r30, r24
    277a:	20 83       	st	Z, r18
    277c:	5c c0       	rjmp	.+184    	; 0x2836 <TIMER0_start+0x140>
    277e:	89 81       	ldd	r24, Y+1	; 0x01
    2780:	82 30       	cpi	r24, 0x02	; 2
    2782:	e1 f4       	brne	.+56     	; 0x27bc <TIMER0_start+0xc6>
    2784:	83 e5       	ldi	r24, 0x53	; 83
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	23 e5       	ldi	r18, 0x53	; 83
    278a:	30 e0       	ldi	r19, 0x00	; 0
    278c:	f9 01       	movw	r30, r18
    278e:	20 81       	ld	r18, Z
    2790:	21 60       	ori	r18, 0x01	; 1
    2792:	fc 01       	movw	r30, r24
    2794:	20 83       	st	Z, r18
    2796:	83 e5       	ldi	r24, 0x53	; 83
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	23 e5       	ldi	r18, 0x53	; 83
    279c:	30 e0       	ldi	r19, 0x00	; 0
    279e:	f9 01       	movw	r30, r18
    27a0:	20 81       	ld	r18, Z
    27a2:	22 60       	ori	r18, 0x02	; 2
    27a4:	fc 01       	movw	r30, r24
    27a6:	20 83       	st	Z, r18
    27a8:	83 e5       	ldi	r24, 0x53	; 83
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	23 e5       	ldi	r18, 0x53	; 83
    27ae:	30 e0       	ldi	r19, 0x00	; 0
    27b0:	f9 01       	movw	r30, r18
    27b2:	20 81       	ld	r18, Z
    27b4:	2b 7f       	andi	r18, 0xFB	; 251
    27b6:	fc 01       	movw	r30, r24
    27b8:	20 83       	st	Z, r18
    27ba:	3d c0       	rjmp	.+122    	; 0x2836 <TIMER0_start+0x140>
    27bc:	89 81       	ldd	r24, Y+1	; 0x01
    27be:	83 30       	cpi	r24, 0x03	; 3
    27c0:	e1 f4       	brne	.+56     	; 0x27fa <TIMER0_start+0x104>
    27c2:	83 e5       	ldi	r24, 0x53	; 83
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	23 e5       	ldi	r18, 0x53	; 83
    27c8:	30 e0       	ldi	r19, 0x00	; 0
    27ca:	f9 01       	movw	r30, r18
    27cc:	20 81       	ld	r18, Z
    27ce:	2e 7f       	andi	r18, 0xFE	; 254
    27d0:	fc 01       	movw	r30, r24
    27d2:	20 83       	st	Z, r18
    27d4:	83 e5       	ldi	r24, 0x53	; 83
    27d6:	90 e0       	ldi	r25, 0x00	; 0
    27d8:	23 e5       	ldi	r18, 0x53	; 83
    27da:	30 e0       	ldi	r19, 0x00	; 0
    27dc:	f9 01       	movw	r30, r18
    27de:	20 81       	ld	r18, Z
    27e0:	2d 7f       	andi	r18, 0xFD	; 253
    27e2:	fc 01       	movw	r30, r24
    27e4:	20 83       	st	Z, r18
    27e6:	83 e5       	ldi	r24, 0x53	; 83
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	23 e5       	ldi	r18, 0x53	; 83
    27ec:	30 e0       	ldi	r19, 0x00	; 0
    27ee:	f9 01       	movw	r30, r18
    27f0:	20 81       	ld	r18, Z
    27f2:	24 60       	ori	r18, 0x04	; 4
    27f4:	fc 01       	movw	r30, r24
    27f6:	20 83       	st	Z, r18
    27f8:	1e c0       	rjmp	.+60     	; 0x2836 <TIMER0_start+0x140>
    27fa:	89 81       	ldd	r24, Y+1	; 0x01
    27fc:	84 30       	cpi	r24, 0x04	; 4
    27fe:	d9 f4       	brne	.+54     	; 0x2836 <TIMER0_start+0x140>
    2800:	83 e5       	ldi	r24, 0x53	; 83
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	23 e5       	ldi	r18, 0x53	; 83
    2806:	30 e0       	ldi	r19, 0x00	; 0
    2808:	f9 01       	movw	r30, r18
    280a:	20 81       	ld	r18, Z
    280c:	21 60       	ori	r18, 0x01	; 1
    280e:	fc 01       	movw	r30, r24
    2810:	20 83       	st	Z, r18
    2812:	83 e5       	ldi	r24, 0x53	; 83
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	23 e5       	ldi	r18, 0x53	; 83
    2818:	30 e0       	ldi	r19, 0x00	; 0
    281a:	f9 01       	movw	r30, r18
    281c:	20 81       	ld	r18, Z
    281e:	2d 7f       	andi	r18, 0xFD	; 253
    2820:	fc 01       	movw	r30, r24
    2822:	20 83       	st	Z, r18
    2824:	83 e5       	ldi	r24, 0x53	; 83
    2826:	90 e0       	ldi	r25, 0x00	; 0
    2828:	23 e5       	ldi	r18, 0x53	; 83
    282a:	30 e0       	ldi	r19, 0x00	; 0
    282c:	f9 01       	movw	r30, r18
    282e:	20 81       	ld	r18, Z
    2830:	24 60       	ori	r18, 0x04	; 4
    2832:	fc 01       	movw	r30, r24
    2834:	20 83       	st	Z, r18
    2836:	00 00       	nop
    2838:	0f 90       	pop	r0
    283a:	df 91       	pop	r29
    283c:	cf 91       	pop	r28
    283e:	08 95       	ret

00002840 <TIMER0_setCallback>:
    2840:	cf 93       	push	r28
    2842:	df 93       	push	r29
    2844:	00 d0       	rcall	.+0      	; 0x2846 <TIMER0_setCallback+0x6>
    2846:	cd b7       	in	r28, 0x3d	; 61
    2848:	de b7       	in	r29, 0x3e	; 62
    284a:	9a 83       	std	Y+2, r25	; 0x02
    284c:	89 83       	std	Y+1, r24	; 0x01
    284e:	89 81       	ldd	r24, Y+1	; 0x01
    2850:	9a 81       	ldd	r25, Y+2	; 0x02
    2852:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <OV_ptr+0x1>
    2856:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <OV_ptr>
    285a:	00 00       	nop
    285c:	0f 90       	pop	r0
    285e:	0f 90       	pop	r0
    2860:	df 91       	pop	r29
    2862:	cf 91       	pop	r28
    2864:	08 95       	ret

00002866 <__vector_11>:
    2866:	1f 92       	push	r1
    2868:	0f 92       	push	r0
    286a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    286e:	0f 92       	push	r0
    2870:	11 24       	eor	r1, r1
    2872:	2f 93       	push	r18
    2874:	3f 93       	push	r19
    2876:	4f 93       	push	r20
    2878:	5f 93       	push	r21
    287a:	6f 93       	push	r22
    287c:	7f 93       	push	r23
    287e:	8f 93       	push	r24
    2880:	9f 93       	push	r25
    2882:	af 93       	push	r26
    2884:	bf 93       	push	r27
    2886:	ef 93       	push	r30
    2888:	ff 93       	push	r31
    288a:	cf 93       	push	r28
    288c:	df 93       	push	r29
    288e:	cd b7       	in	r28, 0x3d	; 61
    2890:	de b7       	in	r29, 0x3e	; 62
    2892:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <OV_ptr>
    2896:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <OV_ptr+0x1>
    289a:	fc 01       	movw	r30, r24
    289c:	09 95       	icall
    289e:	00 00       	nop
    28a0:	df 91       	pop	r29
    28a2:	cf 91       	pop	r28
    28a4:	ff 91       	pop	r31
    28a6:	ef 91       	pop	r30
    28a8:	bf 91       	pop	r27
    28aa:	af 91       	pop	r26
    28ac:	9f 91       	pop	r25
    28ae:	8f 91       	pop	r24
    28b0:	7f 91       	pop	r23
    28b2:	6f 91       	pop	r22
    28b4:	5f 91       	pop	r21
    28b6:	4f 91       	pop	r20
    28b8:	3f 91       	pop	r19
    28ba:	2f 91       	pop	r18
    28bc:	0f 90       	pop	r0
    28be:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    28c2:	0f 90       	pop	r0
    28c4:	1f 90       	pop	r1
    28c6:	18 95       	reti

000028c8 <__vector_10>:

//ISR
void __vector_10(void) __attribute__((signal,used));
void __vector_10(void)
{
    28c8:	1f 92       	push	r1
    28ca:	0f 92       	push	r0
    28cc:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    28d0:	0f 92       	push	r0
    28d2:	11 24       	eor	r1, r1
    28d4:	2f 93       	push	r18
    28d6:	3f 93       	push	r19
    28d8:	4f 93       	push	r20
    28da:	5f 93       	push	r21
    28dc:	6f 93       	push	r22
    28de:	7f 93       	push	r23
    28e0:	8f 93       	push	r24
    28e2:	9f 93       	push	r25
    28e4:	af 93       	push	r26
    28e6:	bf 93       	push	r27
    28e8:	ef 93       	push	r30
    28ea:	ff 93       	push	r31
    28ec:	cf 93       	push	r28
    28ee:	df 93       	push	r29
    28f0:	cd b7       	in	r28, 0x3d	; 61
    28f2:	de b7       	in	r29, 0x3e	; 62
	//toggleLed();
	CTC_ptr();
    28f4:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <CTC_ptr>
    28f8:	90 91 fe 01 	lds	r25, 0x01FE	; 0x8001fe <CTC_ptr+0x1>
    28fc:	fc 01       	movw	r30, r24
    28fe:	09 95       	icall
	
}
    2900:	00 00       	nop
    2902:	df 91       	pop	r29
    2904:	cf 91       	pop	r28
    2906:	ff 91       	pop	r31
    2908:	ef 91       	pop	r30
    290a:	bf 91       	pop	r27
    290c:	af 91       	pop	r26
    290e:	9f 91       	pop	r25
    2910:	8f 91       	pop	r24
    2912:	7f 91       	pop	r23
    2914:	6f 91       	pop	r22
    2916:	5f 91       	pop	r21
    2918:	4f 91       	pop	r20
    291a:	3f 91       	pop	r19
    291c:	2f 91       	pop	r18
    291e:	0f 90       	pop	r0
    2920:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    2924:	0f 90       	pop	r0
    2926:	1f 90       	pop	r1
    2928:	18 95       	reti

0000292a <UART_init>:
#include "BIT_MATH.h"
#include "UART_PRIV.h"
#include "UART_CONFIG.h"
#include "UART_INT.h"
void UART_init()
{
    292a:	cf 93       	push	r28
    292c:	df 93       	push	r29
    292e:	1f 92       	push	r1
    2930:	cd b7       	in	r28, 0x3d	; 61
    2932:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,RXEN);
    2934:	8a e2       	ldi	r24, 0x2A	; 42
    2936:	90 e0       	ldi	r25, 0x00	; 0
    2938:	2a e2       	ldi	r18, 0x2A	; 42
    293a:	30 e0       	ldi	r19, 0x00	; 0
    293c:	f9 01       	movw	r30, r18
    293e:	20 81       	ld	r18, Z
    2940:	20 61       	ori	r18, 0x10	; 16
    2942:	fc 01       	movw	r30, r24
    2944:	20 83       	st	Z, r18
	SET_BIT(UCSRB,TXEN);
    2946:	8a e2       	ldi	r24, 0x2A	; 42
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	2a e2       	ldi	r18, 0x2A	; 42
    294c:	30 e0       	ldi	r19, 0x00	; 0
    294e:	f9 01       	movw	r30, r18
    2950:	20 81       	ld	r18, Z
    2952:	28 60       	ori	r18, 0x08	; 8
    2954:	fc 01       	movw	r30, r24
    2956:	20 83       	st	Z, r18
	
	u8 x=0b10000000;
    2958:	80 e8       	ldi	r24, 0x80	; 128
    295a:	89 83       	std	Y+1, r24	; 0x01
	#if(UART_NUM_BIT_MODE==UART_8BIT_MODE)
	SET_BIT(UCSRB,UCSZ2);
    295c:	8a e2       	ldi	r24, 0x2A	; 42
    295e:	90 e0       	ldi	r25, 0x00	; 0
    2960:	2a e2       	ldi	r18, 0x2A	; 42
    2962:	30 e0       	ldi	r19, 0x00	; 0
    2964:	f9 01       	movw	r30, r18
    2966:	20 81       	ld	r18, Z
    2968:	24 60       	ori	r18, 0x04	; 4
    296a:	fc 01       	movw	r30, r24
    296c:	20 83       	st	Z, r18
	SET_BIT(x,UCSZ1);
    296e:	89 81       	ldd	r24, Y+1	; 0x01
    2970:	84 60       	ori	r24, 0x04	; 4
    2972:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(x,UCSZ2);
    2974:	89 81       	ldd	r24, Y+1	; 0x01
    2976:	84 60       	ori	r24, 0x04	; 4
    2978:	89 83       	std	Y+1, r24	; 0x01

	#elif(UART_NUM_BIT_MODE==UART_7BIT_MODE)

	#endif
	#if(UART_NUM_STOP_BIT==UART_STOP_1BIT)
	CLEAR_BIT(x,USBS);
    297a:	89 81       	ldd	r24, Y+1	; 0x01
    297c:	87 7f       	andi	r24, 0xF7	; 247
    297e:	89 83       	std	Y+1, r24	; 0x01
	#elif(UART_NUM_STOP_BIT==UART_STOP_2BIT)
	SET_BIT(x,USBS);

	#endif
	#if(UART_PARITY_MODE==UART_PARITY_DISABLED)
	CLEAR_BIT(x,UPM0);
    2980:	89 81       	ldd	r24, Y+1	; 0x01
    2982:	8f 7e       	andi	r24, 0xEF	; 239
    2984:	89 83       	std	Y+1, r24	; 0x01
	CLEAR_BIT(x,UPM1);
    2986:	89 81       	ldd	r24, Y+1	; 0x01
    2988:	8f 7d       	andi	r24, 0xDF	; 223
    298a:	89 83       	std	Y+1, r24	; 0x01

	#elif(UART_PARITY_MODE==UART_PARITY_EVEN)
	CLEAR_BIT(x,UPM0);
	SET_BIT(x,UPM1);
	#endif
	UCSRC_UBRRH=x;
    298c:	80 e4       	ldi	r24, 0x40	; 64
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	29 81       	ldd	r18, Y+1	; 0x01
    2992:	fc 01       	movw	r30, r24
    2994:	20 83       	st	Z, r18
	UBRRL=UART_BAUD_9600;
    2996:	89 e2       	ldi	r24, 0x29	; 41
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	27 e6       	ldi	r18, 0x67	; 103
    299c:	fc 01       	movw	r30, r24
    299e:	20 83       	st	Z, r18

}
    29a0:	00 00       	nop
    29a2:	0f 90       	pop	r0
    29a4:	df 91       	pop	r29
    29a6:	cf 91       	pop	r28
    29a8:	08 95       	ret

000029aa <UART_sendData>:
void UART_sendData(u8 data)
{
    29aa:	cf 93       	push	r28
    29ac:	df 93       	push	r29
    29ae:	1f 92       	push	r1
    29b0:	cd b7       	in	r28, 0x3d	; 61
    29b2:	de b7       	in	r29, 0x3e	; 62
    29b4:	89 83       	std	Y+1, r24	; 0x01
	// data register e,pty
	while(GET_BIT(UCSRA,UDRE)==0);
    29b6:	00 00       	nop
    29b8:	8b e2       	ldi	r24, 0x2B	; 43
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	fc 01       	movw	r30, r24
    29be:	80 81       	ld	r24, Z
    29c0:	82 95       	swap	r24
    29c2:	86 95       	lsr	r24
    29c4:	87 70       	andi	r24, 0x07	; 7
    29c6:	88 2f       	mov	r24, r24
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	81 70       	andi	r24, 0x01	; 1
    29cc:	99 27       	eor	r25, r25
    29ce:	89 2b       	or	r24, r25
    29d0:	99 f3       	breq	.-26     	; 0x29b8 <UART_sendData+0xe>
	//send
	UDR= data;
    29d2:	8c e2       	ldi	r24, 0x2C	; 44
    29d4:	90 e0       	ldi	r25, 0x00	; 0
    29d6:	29 81       	ldd	r18, Y+1	; 0x01
    29d8:	fc 01       	movw	r30, r24
    29da:	20 83       	st	Z, r18
}
    29dc:	00 00       	nop
    29de:	0f 90       	pop	r0
    29e0:	df 91       	pop	r29
    29e2:	cf 91       	pop	r28
    29e4:	08 95       	ret

000029e6 <UART_sendString>:
void UART_sendString(u8* str)
{
    29e6:	cf 93       	push	r28
    29e8:	df 93       	push	r29
    29ea:	00 d0       	rcall	.+0      	; 0x29ec <UART_sendString+0x6>
    29ec:	1f 92       	push	r1
    29ee:	cd b7       	in	r28, 0x3d	; 61
    29f0:	de b7       	in	r29, 0x3e	; 62
    29f2:	9b 83       	std	Y+3, r25	; 0x03
    29f4:	8a 83       	std	Y+2, r24	; 0x02
		u8 i=0;
    29f6:	19 82       	std	Y+1, r1	; 0x01
		while(str[i] != '\0')
    29f8:	0e c0       	rjmp	.+28     	; 0x2a16 <UART_sendString+0x30>
		{
			UART_sendData(str[i]);
    29fa:	89 81       	ldd	r24, Y+1	; 0x01
    29fc:	88 2f       	mov	r24, r24
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	2a 81       	ldd	r18, Y+2	; 0x02
    2a02:	3b 81       	ldd	r19, Y+3	; 0x03
    2a04:	82 0f       	add	r24, r18
    2a06:	93 1f       	adc	r25, r19
    2a08:	fc 01       	movw	r30, r24
    2a0a:	80 81       	ld	r24, Z
    2a0c:	0e 94 d5 14 	call	0x29aa	; 0x29aa <UART_sendData>
			i++;
    2a10:	89 81       	ldd	r24, Y+1	; 0x01
    2a12:	8f 5f       	subi	r24, 0xFF	; 255
    2a14:	89 83       	std	Y+1, r24	; 0x01
	UDR= data;
}
void UART_sendString(u8* str)
{
		u8 i=0;
		while(str[i] != '\0')
    2a16:	89 81       	ldd	r24, Y+1	; 0x01
    2a18:	88 2f       	mov	r24, r24
    2a1a:	90 e0       	ldi	r25, 0x00	; 0
    2a1c:	2a 81       	ldd	r18, Y+2	; 0x02
    2a1e:	3b 81       	ldd	r19, Y+3	; 0x03
    2a20:	82 0f       	add	r24, r18
    2a22:	93 1f       	adc	r25, r19
    2a24:	fc 01       	movw	r30, r24
    2a26:	80 81       	ld	r24, Z
    2a28:	88 23       	and	r24, r24
    2a2a:	39 f7       	brne	.-50     	; 0x29fa <UART_sendString+0x14>
		{
			UART_sendData(str[i]);
			i++;
		}
}
    2a2c:	00 00       	nop
    2a2e:	0f 90       	pop	r0
    2a30:	0f 90       	pop	r0
    2a32:	0f 90       	pop	r0
    2a34:	df 91       	pop	r29
    2a36:	cf 91       	pop	r28
    2a38:	08 95       	ret

00002a3a <UART_receiveData>:

u8 UART_receiveData()
{
    2a3a:	cf 93       	push	r28
    2a3c:	df 93       	push	r29
    2a3e:	00 d0       	rcall	.+0      	; 0x2a40 <UART_receiveData+0x6>
    2a40:	cd b7       	in	r28, 0x3d	; 61
    2a42:	de b7       	in	r29, 0x3e	; 62
	//CHECK RECEIVE COMPLETE
	u32 timeout=0;
    2a44:	1a 82       	std	Y+2, r1	; 0x02
    2a46:	19 82       	std	Y+1, r1	; 0x01

	while(GET_BIT(UCSRA,RXC)==0)
    2a48:	05 c0       	rjmp	.+10     	; 0x2a54 <UART_receiveData+0x1a>
	{
		timeout++;
    2a4a:	89 81       	ldd	r24, Y+1	; 0x01
    2a4c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a4e:	01 96       	adiw	r24, 0x01	; 1
    2a50:	9a 83       	std	Y+2, r25	; 0x02
    2a52:	89 83       	std	Y+1, r24	; 0x01
u8 UART_receiveData()
{
	//CHECK RECEIVE COMPLETE
	u32 timeout=0;

	while(GET_BIT(UCSRA,RXC)==0)
    2a54:	8b e2       	ldi	r24, 0x2B	; 43
    2a56:	90 e0       	ldi	r25, 0x00	; 0
    2a58:	fc 01       	movw	r30, r24
    2a5a:	80 81       	ld	r24, Z
    2a5c:	88 1f       	adc	r24, r24
    2a5e:	88 27       	eor	r24, r24
    2a60:	88 1f       	adc	r24, r24
    2a62:	88 2f       	mov	r24, r24
    2a64:	90 e0       	ldi	r25, 0x00	; 0
    2a66:	81 70       	andi	r24, 0x01	; 1
    2a68:	99 27       	eor	r25, r25
    2a6a:	89 2b       	or	r24, r25
    2a6c:	71 f3       	breq	.-36     	; 0x2a4a <UART_receiveData+0x10>
		{
			return UART_NOT_RECEIVED;
		}
	}
	//READ DATA
	return UDR;
    2a6e:	8c e2       	ldi	r24, 0x2C	; 44
    2a70:	90 e0       	ldi	r25, 0x00	; 0
    2a72:	fc 01       	movw	r30, r24
    2a74:	80 81       	ld	r24, Z
    2a76:	0f 90       	pop	r0
    2a78:	0f 90       	pop	r0
    2a7a:	df 91       	pop	r29
    2a7c:	cf 91       	pop	r28
    2a7e:	08 95       	ret

00002a80 <__cmpsf2>:
    2a80:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <__fp_cmp>
    2a84:	08 f4       	brcc	.+2      	; 0x2a88 <__cmpsf2+0x8>
    2a86:	81 e0       	ldi	r24, 0x01	; 1
    2a88:	08 95       	ret

00002a8a <__fixunssfsi>:
    2a8a:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <__fp_splitA>
    2a8e:	88 f0       	brcs	.+34     	; 0x2ab2 <__fixunssfsi+0x28>
    2a90:	9f 57       	subi	r25, 0x7F	; 127
    2a92:	98 f0       	brcs	.+38     	; 0x2aba <__fixunssfsi+0x30>
    2a94:	b9 2f       	mov	r27, r25
    2a96:	99 27       	eor	r25, r25
    2a98:	b7 51       	subi	r27, 0x17	; 23
    2a9a:	b0 f0       	brcs	.+44     	; 0x2ac8 <__fixunssfsi+0x3e>
    2a9c:	e1 f0       	breq	.+56     	; 0x2ad6 <__fixunssfsi+0x4c>
    2a9e:	66 0f       	add	r22, r22
    2aa0:	77 1f       	adc	r23, r23
    2aa2:	88 1f       	adc	r24, r24
    2aa4:	99 1f       	adc	r25, r25
    2aa6:	1a f0       	brmi	.+6      	; 0x2aae <__fixunssfsi+0x24>
    2aa8:	ba 95       	dec	r27
    2aaa:	c9 f7       	brne	.-14     	; 0x2a9e <__fixunssfsi+0x14>
    2aac:	14 c0       	rjmp	.+40     	; 0x2ad6 <__fixunssfsi+0x4c>
    2aae:	b1 30       	cpi	r27, 0x01	; 1
    2ab0:	91 f0       	breq	.+36     	; 0x2ad6 <__fixunssfsi+0x4c>
    2ab2:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <__fp_zero>
    2ab6:	b1 e0       	ldi	r27, 0x01	; 1
    2ab8:	08 95       	ret
    2aba:	0c 94 1f 16 	jmp	0x2c3e	; 0x2c3e <__fp_zero>
    2abe:	67 2f       	mov	r22, r23
    2ac0:	78 2f       	mov	r23, r24
    2ac2:	88 27       	eor	r24, r24
    2ac4:	b8 5f       	subi	r27, 0xF8	; 248
    2ac6:	39 f0       	breq	.+14     	; 0x2ad6 <__fixunssfsi+0x4c>
    2ac8:	b9 3f       	cpi	r27, 0xF9	; 249
    2aca:	cc f3       	brlt	.-14     	; 0x2abe <__fixunssfsi+0x34>
    2acc:	86 95       	lsr	r24
    2ace:	77 95       	ror	r23
    2ad0:	67 95       	ror	r22
    2ad2:	b3 95       	inc	r27
    2ad4:	d9 f7       	brne	.-10     	; 0x2acc <__fixunssfsi+0x42>
    2ad6:	3e f4       	brtc	.+14     	; 0x2ae6 <__fixunssfsi+0x5c>
    2ad8:	90 95       	com	r25
    2ada:	80 95       	com	r24
    2adc:	70 95       	com	r23
    2ade:	61 95       	neg	r22
    2ae0:	7f 4f       	sbci	r23, 0xFF	; 255
    2ae2:	8f 4f       	sbci	r24, 0xFF	; 255
    2ae4:	9f 4f       	sbci	r25, 0xFF	; 255
    2ae6:	08 95       	ret

00002ae8 <__floatunsisf>:
    2ae8:	e8 94       	clt
    2aea:	09 c0       	rjmp	.+18     	; 0x2afe <__floatsisf+0x12>

00002aec <__floatsisf>:
    2aec:	97 fb       	bst	r25, 7
    2aee:	3e f4       	brtc	.+14     	; 0x2afe <__floatsisf+0x12>
    2af0:	90 95       	com	r25
    2af2:	80 95       	com	r24
    2af4:	70 95       	com	r23
    2af6:	61 95       	neg	r22
    2af8:	7f 4f       	sbci	r23, 0xFF	; 255
    2afa:	8f 4f       	sbci	r24, 0xFF	; 255
    2afc:	9f 4f       	sbci	r25, 0xFF	; 255
    2afe:	99 23       	and	r25, r25
    2b00:	a9 f0       	breq	.+42     	; 0x2b2c <__floatsisf+0x40>
    2b02:	f9 2f       	mov	r31, r25
    2b04:	96 e9       	ldi	r25, 0x96	; 150
    2b06:	bb 27       	eor	r27, r27
    2b08:	93 95       	inc	r25
    2b0a:	f6 95       	lsr	r31
    2b0c:	87 95       	ror	r24
    2b0e:	77 95       	ror	r23
    2b10:	67 95       	ror	r22
    2b12:	b7 95       	ror	r27
    2b14:	f1 11       	cpse	r31, r1
    2b16:	f8 cf       	rjmp	.-16     	; 0x2b08 <__floatsisf+0x1c>
    2b18:	fa f4       	brpl	.+62     	; 0x2b58 <__floatsisf+0x6c>
    2b1a:	bb 0f       	add	r27, r27
    2b1c:	11 f4       	brne	.+4      	; 0x2b22 <__floatsisf+0x36>
    2b1e:	60 ff       	sbrs	r22, 0
    2b20:	1b c0       	rjmp	.+54     	; 0x2b58 <__floatsisf+0x6c>
    2b22:	6f 5f       	subi	r22, 0xFF	; 255
    2b24:	7f 4f       	sbci	r23, 0xFF	; 255
    2b26:	8f 4f       	sbci	r24, 0xFF	; 255
    2b28:	9f 4f       	sbci	r25, 0xFF	; 255
    2b2a:	16 c0       	rjmp	.+44     	; 0x2b58 <__floatsisf+0x6c>
    2b2c:	88 23       	and	r24, r24
    2b2e:	11 f0       	breq	.+4      	; 0x2b34 <__floatsisf+0x48>
    2b30:	96 e9       	ldi	r25, 0x96	; 150
    2b32:	11 c0       	rjmp	.+34     	; 0x2b56 <__floatsisf+0x6a>
    2b34:	77 23       	and	r23, r23
    2b36:	21 f0       	breq	.+8      	; 0x2b40 <__floatsisf+0x54>
    2b38:	9e e8       	ldi	r25, 0x8E	; 142
    2b3a:	87 2f       	mov	r24, r23
    2b3c:	76 2f       	mov	r23, r22
    2b3e:	05 c0       	rjmp	.+10     	; 0x2b4a <__floatsisf+0x5e>
    2b40:	66 23       	and	r22, r22
    2b42:	71 f0       	breq	.+28     	; 0x2b60 <__floatsisf+0x74>
    2b44:	96 e8       	ldi	r25, 0x86	; 134
    2b46:	86 2f       	mov	r24, r22
    2b48:	70 e0       	ldi	r23, 0x00	; 0
    2b4a:	60 e0       	ldi	r22, 0x00	; 0
    2b4c:	2a f0       	brmi	.+10     	; 0x2b58 <__floatsisf+0x6c>
    2b4e:	9a 95       	dec	r25
    2b50:	66 0f       	add	r22, r22
    2b52:	77 1f       	adc	r23, r23
    2b54:	88 1f       	adc	r24, r24
    2b56:	da f7       	brpl	.-10     	; 0x2b4e <__floatsisf+0x62>
    2b58:	88 0f       	add	r24, r24
    2b5a:	96 95       	lsr	r25
    2b5c:	87 95       	ror	r24
    2b5e:	97 f9       	bld	r25, 7
    2b60:	08 95       	ret

00002b62 <__fp_cmp>:
    2b62:	99 0f       	add	r25, r25
    2b64:	00 08       	sbc	r0, r0
    2b66:	55 0f       	add	r21, r21
    2b68:	aa 0b       	sbc	r26, r26
    2b6a:	e0 e8       	ldi	r30, 0x80	; 128
    2b6c:	fe ef       	ldi	r31, 0xFE	; 254
    2b6e:	16 16       	cp	r1, r22
    2b70:	17 06       	cpc	r1, r23
    2b72:	e8 07       	cpc	r30, r24
    2b74:	f9 07       	cpc	r31, r25
    2b76:	c0 f0       	brcs	.+48     	; 0x2ba8 <__fp_cmp+0x46>
    2b78:	12 16       	cp	r1, r18
    2b7a:	13 06       	cpc	r1, r19
    2b7c:	e4 07       	cpc	r30, r20
    2b7e:	f5 07       	cpc	r31, r21
    2b80:	98 f0       	brcs	.+38     	; 0x2ba8 <__fp_cmp+0x46>
    2b82:	62 1b       	sub	r22, r18
    2b84:	73 0b       	sbc	r23, r19
    2b86:	84 0b       	sbc	r24, r20
    2b88:	95 0b       	sbc	r25, r21
    2b8a:	39 f4       	brne	.+14     	; 0x2b9a <__fp_cmp+0x38>
    2b8c:	0a 26       	eor	r0, r26
    2b8e:	61 f0       	breq	.+24     	; 0x2ba8 <__fp_cmp+0x46>
    2b90:	23 2b       	or	r18, r19
    2b92:	24 2b       	or	r18, r20
    2b94:	25 2b       	or	r18, r21
    2b96:	21 f4       	brne	.+8      	; 0x2ba0 <__fp_cmp+0x3e>
    2b98:	08 95       	ret
    2b9a:	0a 26       	eor	r0, r26
    2b9c:	09 f4       	brne	.+2      	; 0x2ba0 <__fp_cmp+0x3e>
    2b9e:	a1 40       	sbci	r26, 0x01	; 1
    2ba0:	a6 95       	lsr	r26
    2ba2:	8f ef       	ldi	r24, 0xFF	; 255
    2ba4:	81 1d       	adc	r24, r1
    2ba6:	81 1d       	adc	r24, r1
    2ba8:	08 95       	ret

00002baa <__fp_inf>:
    2baa:	97 f9       	bld	r25, 7
    2bac:	9f 67       	ori	r25, 0x7F	; 127
    2bae:	80 e8       	ldi	r24, 0x80	; 128
    2bb0:	70 e0       	ldi	r23, 0x00	; 0
    2bb2:	60 e0       	ldi	r22, 0x00	; 0
    2bb4:	08 95       	ret

00002bb6 <__fp_nan>:
    2bb6:	9f ef       	ldi	r25, 0xFF	; 255
    2bb8:	80 ec       	ldi	r24, 0xC0	; 192
    2bba:	08 95       	ret

00002bbc <__fp_pscA>:
    2bbc:	00 24       	eor	r0, r0
    2bbe:	0a 94       	dec	r0
    2bc0:	16 16       	cp	r1, r22
    2bc2:	17 06       	cpc	r1, r23
    2bc4:	18 06       	cpc	r1, r24
    2bc6:	09 06       	cpc	r0, r25
    2bc8:	08 95       	ret

00002bca <__fp_pscB>:
    2bca:	00 24       	eor	r0, r0
    2bcc:	0a 94       	dec	r0
    2bce:	12 16       	cp	r1, r18
    2bd0:	13 06       	cpc	r1, r19
    2bd2:	14 06       	cpc	r1, r20
    2bd4:	05 06       	cpc	r0, r21
    2bd6:	08 95       	ret

00002bd8 <__fp_round>:
    2bd8:	09 2e       	mov	r0, r25
    2bda:	03 94       	inc	r0
    2bdc:	00 0c       	add	r0, r0
    2bde:	11 f4       	brne	.+4      	; 0x2be4 <__fp_round+0xc>
    2be0:	88 23       	and	r24, r24
    2be2:	52 f0       	brmi	.+20     	; 0x2bf8 <__fp_round+0x20>
    2be4:	bb 0f       	add	r27, r27
    2be6:	40 f4       	brcc	.+16     	; 0x2bf8 <__fp_round+0x20>
    2be8:	bf 2b       	or	r27, r31
    2bea:	11 f4       	brne	.+4      	; 0x2bf0 <__fp_round+0x18>
    2bec:	60 ff       	sbrs	r22, 0
    2bee:	04 c0       	rjmp	.+8      	; 0x2bf8 <__fp_round+0x20>
    2bf0:	6f 5f       	subi	r22, 0xFF	; 255
    2bf2:	7f 4f       	sbci	r23, 0xFF	; 255
    2bf4:	8f 4f       	sbci	r24, 0xFF	; 255
    2bf6:	9f 4f       	sbci	r25, 0xFF	; 255
    2bf8:	08 95       	ret

00002bfa <__fp_split3>:
    2bfa:	57 fd       	sbrc	r21, 7
    2bfc:	90 58       	subi	r25, 0x80	; 128
    2bfe:	44 0f       	add	r20, r20
    2c00:	55 1f       	adc	r21, r21
    2c02:	59 f0       	breq	.+22     	; 0x2c1a <__fp_splitA+0x10>
    2c04:	5f 3f       	cpi	r21, 0xFF	; 255
    2c06:	71 f0       	breq	.+28     	; 0x2c24 <__fp_splitA+0x1a>
    2c08:	47 95       	ror	r20

00002c0a <__fp_splitA>:
    2c0a:	88 0f       	add	r24, r24
    2c0c:	97 fb       	bst	r25, 7
    2c0e:	99 1f       	adc	r25, r25
    2c10:	61 f0       	breq	.+24     	; 0x2c2a <__fp_splitA+0x20>
    2c12:	9f 3f       	cpi	r25, 0xFF	; 255
    2c14:	79 f0       	breq	.+30     	; 0x2c34 <__fp_splitA+0x2a>
    2c16:	87 95       	ror	r24
    2c18:	08 95       	ret
    2c1a:	12 16       	cp	r1, r18
    2c1c:	13 06       	cpc	r1, r19
    2c1e:	14 06       	cpc	r1, r20
    2c20:	55 1f       	adc	r21, r21
    2c22:	f2 cf       	rjmp	.-28     	; 0x2c08 <__fp_split3+0xe>
    2c24:	46 95       	lsr	r20
    2c26:	f1 df       	rcall	.-30     	; 0x2c0a <__fp_splitA>
    2c28:	08 c0       	rjmp	.+16     	; 0x2c3a <__fp_splitA+0x30>
    2c2a:	16 16       	cp	r1, r22
    2c2c:	17 06       	cpc	r1, r23
    2c2e:	18 06       	cpc	r1, r24
    2c30:	99 1f       	adc	r25, r25
    2c32:	f1 cf       	rjmp	.-30     	; 0x2c16 <__fp_splitA+0xc>
    2c34:	86 95       	lsr	r24
    2c36:	71 05       	cpc	r23, r1
    2c38:	61 05       	cpc	r22, r1
    2c3a:	08 94       	sec
    2c3c:	08 95       	ret

00002c3e <__fp_zero>:
    2c3e:	e8 94       	clt

00002c40 <__fp_szero>:
    2c40:	bb 27       	eor	r27, r27
    2c42:	66 27       	eor	r22, r22
    2c44:	77 27       	eor	r23, r23
    2c46:	cb 01       	movw	r24, r22
    2c48:	97 f9       	bld	r25, 7
    2c4a:	08 95       	ret

00002c4c <__gesf2>:
    2c4c:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <__fp_cmp>
    2c50:	08 f4       	brcc	.+2      	; 0x2c54 <__gesf2+0x8>
    2c52:	8f ef       	ldi	r24, 0xFF	; 255
    2c54:	08 95       	ret

00002c56 <__mulsf3>:
    2c56:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <__mulsf3x>
    2c5a:	0c 94 ec 15 	jmp	0x2bd8	; 0x2bd8 <__fp_round>
    2c5e:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <__fp_pscA>
    2c62:	38 f0       	brcs	.+14     	; 0x2c72 <__mulsf3+0x1c>
    2c64:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__fp_pscB>
    2c68:	20 f0       	brcs	.+8      	; 0x2c72 <__mulsf3+0x1c>
    2c6a:	95 23       	and	r25, r21
    2c6c:	11 f0       	breq	.+4      	; 0x2c72 <__mulsf3+0x1c>
    2c6e:	0c 94 d5 15 	jmp	0x2baa	; 0x2baa <__fp_inf>
    2c72:	0c 94 db 15 	jmp	0x2bb6	; 0x2bb6 <__fp_nan>
    2c76:	11 24       	eor	r1, r1
    2c78:	0c 94 20 16 	jmp	0x2c40	; 0x2c40 <__fp_szero>

00002c7c <__mulsf3x>:
    2c7c:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <__fp_split3>
    2c80:	70 f3       	brcs	.-36     	; 0x2c5e <__mulsf3+0x8>

00002c82 <__mulsf3_pse>:
    2c82:	95 9f       	mul	r25, r21
    2c84:	c1 f3       	breq	.-16     	; 0x2c76 <__mulsf3+0x20>
    2c86:	95 0f       	add	r25, r21
    2c88:	50 e0       	ldi	r21, 0x00	; 0
    2c8a:	55 1f       	adc	r21, r21
    2c8c:	62 9f       	mul	r22, r18
    2c8e:	f0 01       	movw	r30, r0
    2c90:	72 9f       	mul	r23, r18
    2c92:	bb 27       	eor	r27, r27
    2c94:	f0 0d       	add	r31, r0
    2c96:	b1 1d       	adc	r27, r1
    2c98:	63 9f       	mul	r22, r19
    2c9a:	aa 27       	eor	r26, r26
    2c9c:	f0 0d       	add	r31, r0
    2c9e:	b1 1d       	adc	r27, r1
    2ca0:	aa 1f       	adc	r26, r26
    2ca2:	64 9f       	mul	r22, r20
    2ca4:	66 27       	eor	r22, r22
    2ca6:	b0 0d       	add	r27, r0
    2ca8:	a1 1d       	adc	r26, r1
    2caa:	66 1f       	adc	r22, r22
    2cac:	82 9f       	mul	r24, r18
    2cae:	22 27       	eor	r18, r18
    2cb0:	b0 0d       	add	r27, r0
    2cb2:	a1 1d       	adc	r26, r1
    2cb4:	62 1f       	adc	r22, r18
    2cb6:	73 9f       	mul	r23, r19
    2cb8:	b0 0d       	add	r27, r0
    2cba:	a1 1d       	adc	r26, r1
    2cbc:	62 1f       	adc	r22, r18
    2cbe:	83 9f       	mul	r24, r19
    2cc0:	a0 0d       	add	r26, r0
    2cc2:	61 1d       	adc	r22, r1
    2cc4:	22 1f       	adc	r18, r18
    2cc6:	74 9f       	mul	r23, r20
    2cc8:	33 27       	eor	r19, r19
    2cca:	a0 0d       	add	r26, r0
    2ccc:	61 1d       	adc	r22, r1
    2cce:	23 1f       	adc	r18, r19
    2cd0:	84 9f       	mul	r24, r20
    2cd2:	60 0d       	add	r22, r0
    2cd4:	21 1d       	adc	r18, r1
    2cd6:	82 2f       	mov	r24, r18
    2cd8:	76 2f       	mov	r23, r22
    2cda:	6a 2f       	mov	r22, r26
    2cdc:	11 24       	eor	r1, r1
    2cde:	9f 57       	subi	r25, 0x7F	; 127
    2ce0:	50 40       	sbci	r21, 0x00	; 0
    2ce2:	9a f0       	brmi	.+38     	; 0x2d0a <__mulsf3_pse+0x88>
    2ce4:	f1 f0       	breq	.+60     	; 0x2d22 <__mulsf3_pse+0xa0>
    2ce6:	88 23       	and	r24, r24
    2ce8:	4a f0       	brmi	.+18     	; 0x2cfc <__mulsf3_pse+0x7a>
    2cea:	ee 0f       	add	r30, r30
    2cec:	ff 1f       	adc	r31, r31
    2cee:	bb 1f       	adc	r27, r27
    2cf0:	66 1f       	adc	r22, r22
    2cf2:	77 1f       	adc	r23, r23
    2cf4:	88 1f       	adc	r24, r24
    2cf6:	91 50       	subi	r25, 0x01	; 1
    2cf8:	50 40       	sbci	r21, 0x00	; 0
    2cfa:	a9 f7       	brne	.-22     	; 0x2ce6 <__mulsf3_pse+0x64>
    2cfc:	9e 3f       	cpi	r25, 0xFE	; 254
    2cfe:	51 05       	cpc	r21, r1
    2d00:	80 f0       	brcs	.+32     	; 0x2d22 <__mulsf3_pse+0xa0>
    2d02:	0c 94 d5 15 	jmp	0x2baa	; 0x2baa <__fp_inf>
    2d06:	0c 94 20 16 	jmp	0x2c40	; 0x2c40 <__fp_szero>
    2d0a:	5f 3f       	cpi	r21, 0xFF	; 255
    2d0c:	e4 f3       	brlt	.-8      	; 0x2d06 <__mulsf3_pse+0x84>
    2d0e:	98 3e       	cpi	r25, 0xE8	; 232
    2d10:	d4 f3       	brlt	.-12     	; 0x2d06 <__mulsf3_pse+0x84>
    2d12:	86 95       	lsr	r24
    2d14:	77 95       	ror	r23
    2d16:	67 95       	ror	r22
    2d18:	b7 95       	ror	r27
    2d1a:	f7 95       	ror	r31
    2d1c:	e7 95       	ror	r30
    2d1e:	9f 5f       	subi	r25, 0xFF	; 255
    2d20:	c1 f7       	brne	.-16     	; 0x2d12 <__mulsf3_pse+0x90>
    2d22:	fe 2b       	or	r31, r30
    2d24:	88 0f       	add	r24, r24
    2d26:	91 1d       	adc	r25, r1
    2d28:	96 95       	lsr	r25
    2d2a:	87 95       	ror	r24
    2d2c:	97 f9       	bld	r25, 7
    2d2e:	08 95       	ret

00002d30 <strcmp>:
    2d30:	fb 01       	movw	r30, r22
    2d32:	dc 01       	movw	r26, r24
    2d34:	8d 91       	ld	r24, X+
    2d36:	01 90       	ld	r0, Z+
    2d38:	80 19       	sub	r24, r0
    2d3a:	01 10       	cpse	r0, r1
    2d3c:	d9 f3       	breq	.-10     	; 0x2d34 <strcmp+0x4>
    2d3e:	99 0b       	sbc	r25, r25
    2d40:	08 95       	ret

00002d42 <_exit>:
    2d42:	f8 94       	cli

00002d44 <__stop_program>:
    2d44:	ff cf       	rjmp	.-2      	; 0x2d44 <__stop_program>
